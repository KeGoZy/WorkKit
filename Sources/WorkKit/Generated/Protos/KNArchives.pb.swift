// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: KNArchives.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct KN_AnimationAttributesArchive: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var animationType: String {
    get {return _storage._animationType ?? String()}
    set {_uniqueStorage()._animationType = newValue}
  }
  /// Returns true if `animationType` has been explicitly set.
  var hasAnimationType: Bool {return _storage._animationType != nil}
  /// Clears the value of `animationType`. Subsequent reads from it will return its default value.
  mutating func clearAnimationType() {_uniqueStorage()._animationType = nil}

  var effect: String {
    get {return _storage._effect ?? String()}
    set {_uniqueStorage()._effect = newValue}
  }
  /// Returns true if `effect` has been explicitly set.
  var hasEffect: Bool {return _storage._effect != nil}
  /// Clears the value of `effect`. Subsequent reads from it will return its default value.
  mutating func clearEffect() {_uniqueStorage()._effect = nil}

  var duration: Double {
    get {return _storage._duration ?? 0}
    set {_uniqueStorage()._duration = newValue}
  }
  /// Returns true if `duration` has been explicitly set.
  var hasDuration: Bool {return _storage._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
  mutating func clearDuration() {_uniqueStorage()._duration = nil}

  var direction: UInt32 {
    get {return _storage._direction ?? 0}
    set {_uniqueStorage()._direction = newValue}
  }
  /// Returns true if `direction` has been explicitly set.
  var hasDirection: Bool {return _storage._direction != nil}
  /// Clears the value of `direction`. Subsequent reads from it will return its default value.
  mutating func clearDirection() {_uniqueStorage()._direction = nil}

  var delay: Double {
    get {return _storage._delay ?? 0}
    set {_uniqueStorage()._delay = newValue}
  }
  /// Returns true if `delay` has been explicitly set.
  var hasDelay: Bool {return _storage._delay != nil}
  /// Clears the value of `delay`. Subsequent reads from it will return its default value.
  mutating func clearDelay() {_uniqueStorage()._delay = nil}

  var isAutomatic: Bool {
    get {return _storage._isAutomatic ?? false}
    set {_uniqueStorage()._isAutomatic = newValue}
  }
  /// Returns true if `isAutomatic` has been explicitly set.
  var hasIsAutomatic: Bool {return _storage._isAutomatic != nil}
  /// Clears the value of `isAutomatic`. Subsequent reads from it will return its default value.
  mutating func clearIsAutomatic() {_uniqueStorage()._isAutomatic = nil}

  var color: TSP_Color {
    get {return _storage._color ?? TSP_Color()}
    set {_uniqueStorage()._color = newValue}
  }
  /// Returns true if `color` has been explicitly set.
  var hasColor: Bool {return _storage._color != nil}
  /// Clears the value of `color`. Subsequent reads from it will return its default value.
  mutating func clearColor() {_uniqueStorage()._color = nil}

  var customEffectTimingCurve1: TSD_PathSourceArchive {
    get {return _storage._customEffectTimingCurve1 ?? TSD_PathSourceArchive()}
    set {_uniqueStorage()._customEffectTimingCurve1 = newValue}
  }
  /// Returns true if `customEffectTimingCurve1` has been explicitly set.
  var hasCustomEffectTimingCurve1: Bool {return _storage._customEffectTimingCurve1 != nil}
  /// Clears the value of `customEffectTimingCurve1`. Subsequent reads from it will return its default value.
  mutating func clearCustomEffectTimingCurve1() {_uniqueStorage()._customEffectTimingCurve1 = nil}

  var customEffectTimingCurve2: TSD_PathSourceArchive {
    get {return _storage._customEffectTimingCurve2 ?? TSD_PathSourceArchive()}
    set {_uniqueStorage()._customEffectTimingCurve2 = newValue}
  }
  /// Returns true if `customEffectTimingCurve2` has been explicitly set.
  var hasCustomEffectTimingCurve2: Bool {return _storage._customEffectTimingCurve2 != nil}
  /// Clears the value of `customEffectTimingCurve2`. Subsequent reads from it will return its default value.
  mutating func clearCustomEffectTimingCurve2() {_uniqueStorage()._customEffectTimingCurve2 = nil}

  var customEffectTimingCurve3: TSD_PathSourceArchive {
    get {return _storage._customEffectTimingCurve3 ?? TSD_PathSourceArchive()}
    set {_uniqueStorage()._customEffectTimingCurve3 = newValue}
  }
  /// Returns true if `customEffectTimingCurve3` has been explicitly set.
  var hasCustomEffectTimingCurve3: Bool {return _storage._customEffectTimingCurve3 != nil}
  /// Clears the value of `customEffectTimingCurve3`. Subsequent reads from it will return its default value.
  mutating func clearCustomEffectTimingCurve3() {_uniqueStorage()._customEffectTimingCurve3 = nil}

  var randomNumberSeed: UInt32 {
    get {return _storage._randomNumberSeed ?? 0}
    set {_uniqueStorage()._randomNumberSeed = newValue}
  }
  /// Returns true if `randomNumberSeed` has been explicitly set.
  var hasRandomNumberSeed: Bool {return _storage._randomNumberSeed != nil}
  /// Clears the value of `randomNumberSeed`. Subsequent reads from it will return its default value.
  mutating func clearRandomNumberSeed() {_uniqueStorage()._randomNumberSeed = nil}

  var customDetail: Double {
    get {return _storage._customDetail ?? 0}
    set {_uniqueStorage()._customDetail = newValue}
  }
  /// Returns true if `customDetail` has been explicitly set.
  var hasCustomDetail: Bool {return _storage._customDetail != nil}
  /// Clears the value of `customDetail`. Subsequent reads from it will return its default value.
  mutating func clearCustomDetail() {_uniqueStorage()._customDetail = nil}

  var customEffectTimingCurveThemeName1: String {
    get {return _storage._customEffectTimingCurveThemeName1 ?? String()}
    set {_uniqueStorage()._customEffectTimingCurveThemeName1 = newValue}
  }
  /// Returns true if `customEffectTimingCurveThemeName1` has been explicitly set.
  var hasCustomEffectTimingCurveThemeName1: Bool {return _storage._customEffectTimingCurveThemeName1 != nil}
  /// Clears the value of `customEffectTimingCurveThemeName1`. Subsequent reads from it will return its default value.
  mutating func clearCustomEffectTimingCurveThemeName1() {_uniqueStorage()._customEffectTimingCurveThemeName1 = nil}

  var customEffectTimingCurveThemeName2: String {
    get {return _storage._customEffectTimingCurveThemeName2 ?? String()}
    set {_uniqueStorage()._customEffectTimingCurveThemeName2 = newValue}
  }
  /// Returns true if `customEffectTimingCurveThemeName2` has been explicitly set.
  var hasCustomEffectTimingCurveThemeName2: Bool {return _storage._customEffectTimingCurveThemeName2 != nil}
  /// Clears the value of `customEffectTimingCurveThemeName2`. Subsequent reads from it will return its default value.
  mutating func clearCustomEffectTimingCurveThemeName2() {_uniqueStorage()._customEffectTimingCurveThemeName2 = nil}

  var customEffectTimingCurveThemeName3: String {
    get {return _storage._customEffectTimingCurveThemeName3 ?? String()}
    set {_uniqueStorage()._customEffectTimingCurveThemeName3 = newValue}
  }
  /// Returns true if `customEffectTimingCurveThemeName3` has been explicitly set.
  var hasCustomEffectTimingCurveThemeName3: Bool {return _storage._customEffectTimingCurveThemeName3 != nil}
  /// Clears the value of `customEffectTimingCurveThemeName3`. Subsequent reads from it will return its default value.
  mutating func clearCustomEffectTimingCurveThemeName3() {_uniqueStorage()._customEffectTimingCurveThemeName3 = nil}

  var writingDirectionIsRtl: Bool {
    get {return _storage._writingDirectionIsRtl ?? false}
    set {_uniqueStorage()._writingDirectionIsRtl = newValue}
  }
  /// Returns true if `writingDirectionIsRtl` has been explicitly set.
  var hasWritingDirectionIsRtl: Bool {return _storage._writingDirectionIsRtl != nil}
  /// Clears the value of `writingDirectionIsRtl`. Subsequent reads from it will return its default value.
  mutating func clearWritingDirectionIsRtl() {_uniqueStorage()._writingDirectionIsRtl = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct KN_TransitionAttributesArchive: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var animationAttributes: KN_AnimationAttributesArchive {
    get {return _storage._animationAttributes ?? KN_AnimationAttributesArchive()}
    set {_uniqueStorage()._animationAttributes = newValue}
  }
  /// Returns true if `animationAttributes` has been explicitly set.
  var hasAnimationAttributes: Bool {return _storage._animationAttributes != nil}
  /// Clears the value of `animationAttributes`. Subsequent reads from it will return its default value.
  mutating func clearAnimationAttributes() {_uniqueStorage()._animationAttributes = nil}

  var customTwist: Float {
    get {return _storage._customTwist ?? 0}
    set {_uniqueStorage()._customTwist = newValue}
  }
  /// Returns true if `customTwist` has been explicitly set.
  var hasCustomTwist: Bool {return _storage._customTwist != nil}
  /// Clears the value of `customTwist`. Subsequent reads from it will return its default value.
  mutating func clearCustomTwist() {_uniqueStorage()._customTwist = nil}

  var customMosaicSize: UInt32 {
    get {return _storage._customMosaicSize ?? 0}
    set {_uniqueStorage()._customMosaicSize = newValue}
  }
  /// Returns true if `customMosaicSize` has been explicitly set.
  var hasCustomMosaicSize: Bool {return _storage._customMosaicSize != nil}
  /// Clears the value of `customMosaicSize`. Subsequent reads from it will return its default value.
  mutating func clearCustomMosaicSize() {_uniqueStorage()._customMosaicSize = nil}

  var customMosaicType: UInt32 {
    get {return _storage._customMosaicType ?? 0}
    set {_uniqueStorage()._customMosaicType = newValue}
  }
  /// Returns true if `customMosaicType` has been explicitly set.
  var hasCustomMosaicType: Bool {return _storage._customMosaicType != nil}
  /// Clears the value of `customMosaicType`. Subsequent reads from it will return its default value.
  mutating func clearCustomMosaicType() {_uniqueStorage()._customMosaicType = nil}

  var customBounce: Bool {
    get {return _storage._customBounce ?? false}
    set {_uniqueStorage()._customBounce = newValue}
  }
  /// Returns true if `customBounce` has been explicitly set.
  var hasCustomBounce: Bool {return _storage._customBounce != nil}
  /// Clears the value of `customBounce`. Subsequent reads from it will return its default value.
  mutating func clearCustomBounce() {_uniqueStorage()._customBounce = nil}

  var customMagicMoveFadeUnmatchedObjects: Bool {
    get {return _storage._customMagicMoveFadeUnmatchedObjects ?? false}
    set {_uniqueStorage()._customMagicMoveFadeUnmatchedObjects = newValue}
  }
  /// Returns true if `customMagicMoveFadeUnmatchedObjects` has been explicitly set.
  var hasCustomMagicMoveFadeUnmatchedObjects: Bool {return _storage._customMagicMoveFadeUnmatchedObjects != nil}
  /// Clears the value of `customMagicMoveFadeUnmatchedObjects`. Subsequent reads from it will return its default value.
  mutating func clearCustomMagicMoveFadeUnmatchedObjects() {_uniqueStorage()._customMagicMoveFadeUnmatchedObjects = nil}

  var customTimingCurve: KN_TransitionAttributesArchive.TransitionCustomAttributesTimingCurveType {
    get {return _storage._customTimingCurve ?? .linear}
    set {_uniqueStorage()._customTimingCurve = newValue}
  }
  /// Returns true if `customTimingCurve` has been explicitly set.
  var hasCustomTimingCurve: Bool {return _storage._customTimingCurve != nil}
  /// Clears the value of `customTimingCurve`. Subsequent reads from it will return its default value.
  mutating func clearCustomTimingCurve() {_uniqueStorage()._customTimingCurve = nil}

  var customTextDeliveryType: KN_TransitionAttributesArchive.TransitionCustomAttributesTextDeliveryType {
    get {return _storage._customTextDeliveryType ?? .byObject}
    set {_uniqueStorage()._customTextDeliveryType = newValue}
  }
  /// Returns true if `customTextDeliveryType` has been explicitly set.
  var hasCustomTextDeliveryType: Bool {return _storage._customTextDeliveryType != nil}
  /// Clears the value of `customTextDeliveryType`. Subsequent reads from it will return its default value.
  mutating func clearCustomTextDeliveryType() {_uniqueStorage()._customTextDeliveryType = nil}

  var customMotionBlur: Bool {
    get {return _storage._customMotionBlur ?? false}
    set {_uniqueStorage()._customMotionBlur = newValue}
  }
  /// Returns true if `customMotionBlur` has been explicitly set.
  var hasCustomMotionBlur: Bool {return _storage._customMotionBlur != nil}
  /// Clears the value of `customMotionBlur`. Subsequent reads from it will return its default value.
  mutating func clearCustomMotionBlur() {_uniqueStorage()._customMotionBlur = nil}

  var customTravelDistance: Float {
    get {return _storage._customTravelDistance ?? 0}
    set {_uniqueStorage()._customTravelDistance = newValue}
  }
  /// Returns true if `customTravelDistance` has been explicitly set.
  var hasCustomTravelDistance: Bool {return _storage._customTravelDistance != nil}
  /// Clears the value of `customTravelDistance`. Subsequent reads from it will return its default value.
  mutating func clearCustomTravelDistance() {_uniqueStorage()._customTravelDistance = nil}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var databaseAnimationType: String {
    get {return _storage._databaseAnimationType ?? String()}
    set {_uniqueStorage()._databaseAnimationType = newValue}
  }
  /// Returns true if `databaseAnimationType` has been explicitly set.
  var hasDatabaseAnimationType: Bool {return _storage._databaseAnimationType != nil}
  /// Clears the value of `databaseAnimationType`. Subsequent reads from it will return its default value.
  mutating func clearDatabaseAnimationType() {_uniqueStorage()._databaseAnimationType = nil}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var databaseEffect: String {
    get {return _storage._databaseEffect ?? String()}
    set {_uniqueStorage()._databaseEffect = newValue}
  }
  /// Returns true if `databaseEffect` has been explicitly set.
  var hasDatabaseEffect: Bool {return _storage._databaseEffect != nil}
  /// Clears the value of `databaseEffect`. Subsequent reads from it will return its default value.
  mutating func clearDatabaseEffect() {_uniqueStorage()._databaseEffect = nil}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var databaseDuration: Double {
    get {return _storage._databaseDuration ?? 0}
    set {_uniqueStorage()._databaseDuration = newValue}
  }
  /// Returns true if `databaseDuration` has been explicitly set.
  var hasDatabaseDuration: Bool {return _storage._databaseDuration != nil}
  /// Clears the value of `databaseDuration`. Subsequent reads from it will return its default value.
  mutating func clearDatabaseDuration() {_uniqueStorage()._databaseDuration = nil}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var databaseDirection: UInt32 {
    get {return _storage._databaseDirection ?? 0}
    set {_uniqueStorage()._databaseDirection = newValue}
  }
  /// Returns true if `databaseDirection` has been explicitly set.
  var hasDatabaseDirection: Bool {return _storage._databaseDirection != nil}
  /// Clears the value of `databaseDirection`. Subsequent reads from it will return its default value.
  mutating func clearDatabaseDirection() {_uniqueStorage()._databaseDirection = nil}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var databaseDelay: Float {
    get {return _storage._databaseDelay ?? 0}
    set {_uniqueStorage()._databaseDelay = newValue}
  }
  /// Returns true if `databaseDelay` has been explicitly set.
  var hasDatabaseDelay: Bool {return _storage._databaseDelay != nil}
  /// Clears the value of `databaseDelay`. Subsequent reads from it will return its default value.
  mutating func clearDatabaseDelay() {_uniqueStorage()._databaseDelay = nil}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var databaseIsAutomatic: Bool {
    get {return _storage._databaseIsAutomatic ?? false}
    set {_uniqueStorage()._databaseIsAutomatic = newValue}
  }
  /// Returns true if `databaseIsAutomatic` has been explicitly set.
  var hasDatabaseIsAutomatic: Bool {return _storage._databaseIsAutomatic != nil}
  /// Clears the value of `databaseIsAutomatic`. Subsequent reads from it will return its default value.
  mutating func clearDatabaseIsAutomatic() {_uniqueStorage()._databaseIsAutomatic = nil}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var databaseColor: TSP_Color {
    get {return _storage._databaseColor ?? TSP_Color()}
    set {_uniqueStorage()._databaseColor = newValue}
  }
  /// Returns true if `databaseColor` has been explicitly set.
  var hasDatabaseColor: Bool {return _storage._databaseColor != nil}
  /// Clears the value of `databaseColor`. Subsequent reads from it will return its default value.
  mutating func clearDatabaseColor() {_uniqueStorage()._databaseColor = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum TransitionCustomAttributesTimingCurveType: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case linear = 1
    case easeIn = 2
    case easeOut = 3
    case easeInEaseOut = 4
    case custom = 5

    init() {
      self = .linear
    }

  }

  enum TransitionCustomAttributesTextDeliveryType: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case byObject = 1
    case byWord = 2
    case byCharacter = 3
    case byLine = 4

    init() {
      self = .byObject
    }

  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct KN_TransitionArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var attributes: KN_TransitionAttributesArchive {
    get {return _attributes ?? KN_TransitionAttributesArchive()}
    set {_attributes = newValue}
  }
  /// Returns true if `attributes` has been explicitly set.
  var hasAttributes: Bool {return self._attributes != nil}
  /// Clears the value of `attributes`. Subsequent reads from it will return its default value.
  mutating func clearAttributes() {self._attributes = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _attributes: KN_TransitionAttributesArchive? = nil
}

struct KN_BuildChunkArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var build: TSP_Reference {
    get {return _build ?? TSP_Reference()}
    set {_build = newValue}
  }
  /// Returns true if `build` has been explicitly set.
  var hasBuild: Bool {return self._build != nil}
  /// Clears the value of `build`. Subsequent reads from it will return its default value.
  mutating func clearBuild() {self._build = nil}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var index: UInt32 {
    get {return _index ?? 0}
    set {_index = newValue}
  }
  /// Returns true if `index` has been explicitly set.
  var hasIndex: Bool {return self._index != nil}
  /// Clears the value of `index`. Subsequent reads from it will return its default value.
  mutating func clearIndex() {self._index = nil}

  var delay: Double {
    get {return _delay ?? 0}
    set {_delay = newValue}
  }
  /// Returns true if `delay` has been explicitly set.
  var hasDelay: Bool {return self._delay != nil}
  /// Clears the value of `delay`. Subsequent reads from it will return its default value.
  mutating func clearDelay() {self._delay = nil}

  var duration: Double {
    get {return _duration ?? 0}
    set {_duration = newValue}
  }
  /// Returns true if `duration` has been explicitly set.
  var hasDuration: Bool {return self._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
  mutating func clearDuration() {self._duration = nil}

  var automatic: Bool {
    get {return _automatic ?? false}
    set {_automatic = newValue}
  }
  /// Returns true if `automatic` has been explicitly set.
  var hasAutomatic: Bool {return self._automatic != nil}
  /// Clears the value of `automatic`. Subsequent reads from it will return its default value.
  mutating func clearAutomatic() {self._automatic = nil}

  var referent: Bool {
    get {return _referent ?? false}
    set {_referent = newValue}
  }
  /// Returns true if `referent` has been explicitly set.
  var hasReferent: Bool {return self._referent != nil}
  /// Clears the value of `referent`. Subsequent reads from it will return its default value.
  mutating func clearReferent() {self._referent = nil}

  var buildChunkIdentifier: KN_BuildChunkIdentifierArchive {
    get {return _buildChunkIdentifier ?? KN_BuildChunkIdentifierArchive()}
    set {_buildChunkIdentifier = newValue}
  }
  /// Returns true if `buildChunkIdentifier` has been explicitly set.
  var hasBuildChunkIdentifier: Bool {return self._buildChunkIdentifier != nil}
  /// Clears the value of `buildChunkIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearBuildChunkIdentifier() {self._buildChunkIdentifier = nil}

  var buildID: TSP_UUID {
    get {return _buildID ?? TSP_UUID()}
    set {_buildID = newValue}
  }
  /// Returns true if `buildID` has been explicitly set.
  var hasBuildID: Bool {return self._buildID != nil}
  /// Clears the value of `buildID`. Subsequent reads from it will return its default value.
  mutating func clearBuildID() {self._buildID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _build: TSP_Reference? = nil
  fileprivate var _index: UInt32? = nil
  fileprivate var _delay: Double? = nil
  fileprivate var _duration: Double? = nil
  fileprivate var _automatic: Bool? = nil
  fileprivate var _referent: Bool? = nil
  fileprivate var _buildChunkIdentifier: KN_BuildChunkIdentifierArchive? = nil
  fileprivate var _buildID: TSP_UUID? = nil
}

struct KN_BuildChunkIdentifierArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var buildID: TSP_UUID {
    get {return _buildID ?? TSP_UUID()}
    set {_buildID = newValue}
  }
  /// Returns true if `buildID` has been explicitly set.
  var hasBuildID: Bool {return self._buildID != nil}
  /// Clears the value of `buildID`. Subsequent reads from it will return its default value.
  mutating func clearBuildID() {self._buildID = nil}

  var buildChunkID: Int32 {
    get {return _buildChunkID ?? 0}
    set {_buildChunkID = newValue}
  }
  /// Returns true if `buildChunkID` has been explicitly set.
  var hasBuildChunkID: Bool {return self._buildChunkID != nil}
  /// Clears the value of `buildChunkID`. Subsequent reads from it will return its default value.
  mutating func clearBuildChunkID() {self._buildChunkID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _buildID: TSP_UUID? = nil
  fileprivate var _buildChunkID: Int32? = nil
}

struct KN_BuildAttributeValueArchive: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var integerValue: UInt32 {
    get {return _storage._integerValue ?? 0}
    set {_uniqueStorage()._integerValue = newValue}
  }
  /// Returns true if `integerValue` has been explicitly set.
  var hasIntegerValue: Bool {return _storage._integerValue != nil}
  /// Clears the value of `integerValue`. Subsequent reads from it will return its default value.
  mutating func clearIntegerValue() {_uniqueStorage()._integerValue = nil}

  var doubleValue: Double {
    get {return _storage._doubleValue ?? 0}
    set {_uniqueStorage()._doubleValue = newValue}
  }
  /// Returns true if `doubleValue` has been explicitly set.
  var hasDoubleValue: Bool {return _storage._doubleValue != nil}
  /// Clears the value of `doubleValue`. Subsequent reads from it will return its default value.
  mutating func clearDoubleValue() {_uniqueStorage()._doubleValue = nil}

  var boolValue: Bool {
    get {return _storage._boolValue ?? false}
    set {_uniqueStorage()._boolValue = newValue}
  }
  /// Returns true if `boolValue` has been explicitly set.
  var hasBoolValue: Bool {return _storage._boolValue != nil}
  /// Clears the value of `boolValue`. Subsequent reads from it will return its default value.
  mutating func clearBoolValue() {_uniqueStorage()._boolValue = nil}

  var stringValue: String {
    get {return _storage._stringValue ?? String()}
    set {_uniqueStorage()._stringValue = newValue}
  }
  /// Returns true if `stringValue` has been explicitly set.
  var hasStringValue: Bool {return _storage._stringValue != nil}
  /// Clears the value of `stringValue`. Subsequent reads from it will return its default value.
  mutating func clearStringValue() {_uniqueStorage()._stringValue = nil}

  var pathSourceValue: TSD_PathSourceArchive {
    get {return _storage._pathSourceValue ?? TSD_PathSourceArchive()}
    set {_uniqueStorage()._pathSourceValue = newValue}
  }
  /// Returns true if `pathSourceValue` has been explicitly set.
  var hasPathSourceValue: Bool {return _storage._pathSourceValue != nil}
  /// Clears the value of `pathSourceValue`. Subsequent reads from it will return its default value.
  mutating func clearPathSourceValue() {_uniqueStorage()._pathSourceValue = nil}

  var colorValue: TSP_Color {
    get {return _storage._colorValue ?? TSP_Color()}
    set {_uniqueStorage()._colorValue = newValue}
  }
  /// Returns true if `colorValue` has been explicitly set.
  var hasColorValue: Bool {return _storage._colorValue != nil}
  /// Clears the value of `colorValue`. Subsequent reads from it will return its default value.
  mutating func clearColorValue() {_uniqueStorage()._colorValue = nil}

  var type: KN_BuildAttributeValueArchive.BuildAttributeValueType {
    get {return _storage._type ?? .kInteger}
    set {_uniqueStorage()._type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {_uniqueStorage()._type = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum BuildAttributeValueType: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case kInteger = 0
    case kDouble = 2
    case kBool = 3
    case kString = 4
    case kPathSource = 5
    case kColor = 6

    init() {
      self = .kInteger
    }

  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct KN_BuildAttributeTupleArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var property: String {
    get {return _property ?? String()}
    set {_property = newValue}
  }
  /// Returns true if `property` has been explicitly set.
  var hasProperty: Bool {return self._property != nil}
  /// Clears the value of `property`. Subsequent reads from it will return its default value.
  mutating func clearProperty() {self._property = nil}

  var value: KN_BuildAttributeValueArchive {
    get {return _value ?? KN_BuildAttributeValueArchive()}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  mutating func clearValue() {self._value = nil}

  var buildID: TSP_UUID {
    get {return _buildID ?? TSP_UUID()}
    set {_buildID = newValue}
  }
  /// Returns true if `buildID` has been explicitly set.
  var hasBuildID: Bool {return self._buildID != nil}
  /// Clears the value of `buildID`. Subsequent reads from it will return its default value.
  mutating func clearBuildID() {self._buildID = nil}

  var buildChunkIdentifier: KN_BuildChunkIdentifierArchive {
    get {return _buildChunkIdentifier ?? KN_BuildChunkIdentifierArchive()}
    set {_buildChunkIdentifier = newValue}
  }
  /// Returns true if `buildChunkIdentifier` has been explicitly set.
  var hasBuildChunkIdentifier: Bool {return self._buildChunkIdentifier != nil}
  /// Clears the value of `buildChunkIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearBuildChunkIdentifier() {self._buildChunkIdentifier = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _property: String? = nil
  fileprivate var _value: KN_BuildAttributeValueArchive? = nil
  fileprivate var _buildID: TSP_UUID? = nil
  fileprivate var _buildChunkIdentifier: KN_BuildChunkIdentifierArchive? = nil
}

struct KN_BuildAttributesArchive: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var animationAttributes: KN_AnimationAttributesArchive {
    get {return _storage._animationAttributes ?? KN_AnimationAttributesArchive()}
    set {_uniqueStorage()._animationAttributes = newValue}
  }
  /// Returns true if `animationAttributes` has been explicitly set.
  var hasAnimationAttributes: Bool {return _storage._animationAttributes != nil}
  /// Clears the value of `animationAttributes`. Subsequent reads from it will return its default value.
  mutating func clearAnimationAttributes() {_uniqueStorage()._animationAttributes = nil}

  var eventTrigger: UInt32 {
    get {return _storage._eventTrigger ?? 0}
    set {_uniqueStorage()._eventTrigger = newValue}
  }
  /// Returns true if `eventTrigger` has been explicitly set.
  var hasEventTrigger: Bool {return _storage._eventTrigger != nil}
  /// Clears the value of `eventTrigger`. Subsequent reads from it will return its default value.
  mutating func clearEventTrigger() {_uniqueStorage()._eventTrigger = nil}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var delayAutomaticAfter: Double {
    get {return _storage._delayAutomaticAfter ?? 0}
    set {_uniqueStorage()._delayAutomaticAfter = newValue}
  }
  /// Returns true if `delayAutomaticAfter` has been explicitly set.
  var hasDelayAutomaticAfter: Bool {return _storage._delayAutomaticAfter != nil}
  /// Clears the value of `delayAutomaticAfter`. Subsequent reads from it will return its default value.
  mutating func clearDelayAutomaticAfter() {_uniqueStorage()._delayAutomaticAfter = nil}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var delayAutomaticWith: Double {
    get {return _storage._delayAutomaticWith ?? 0}
    set {_uniqueStorage()._delayAutomaticWith = newValue}
  }
  /// Returns true if `delayAutomaticWith` has been explicitly set.
  var hasDelayAutomaticWith: Bool {return _storage._delayAutomaticWith != nil}
  /// Clears the value of `delayAutomaticWith`. Subsequent reads from it will return its default value.
  mutating func clearDelayAutomaticWith() {_uniqueStorage()._delayAutomaticWith = nil}

  var curveStyle: KN_BuildAttributesArchive.BuildAttributesCurveStyle {
    get {return _storage._curveStyle ?? .kStraight}
    set {_uniqueStorage()._curveStyle = newValue}
  }
  /// Returns true if `curveStyle` has been explicitly set.
  var hasCurveStyle: Bool {return _storage._curveStyle != nil}
  /// Clears the value of `curveStyle`. Subsequent reads from it will return its default value.
  mutating func clearCurveStyle() {_uniqueStorage()._curveStyle = nil}

  var chartRotation3D: Double {
    get {return _storage._chartRotation3D ?? 0}
    set {_uniqueStorage()._chartRotation3D = newValue}
  }
  /// Returns true if `chartRotation3D` has been explicitly set.
  var hasChartRotation3D: Bool {return _storage._chartRotation3D != nil}
  /// Clears the value of `chartRotation3D`. Subsequent reads from it will return its default value.
  mutating func clearChartRotation3D() {_uniqueStorage()._chartRotation3D = nil}

  var startOffset: UInt32 {
    get {return _storage._startOffset ?? 0}
    set {_uniqueStorage()._startOffset = newValue}
  }
  /// Returns true if `startOffset` has been explicitly set.
  var hasStartOffset: Bool {return _storage._startOffset != nil}
  /// Clears the value of `startOffset`. Subsequent reads from it will return its default value.
  mutating func clearStartOffset() {_uniqueStorage()._startOffset = nil}

  var endOffset: UInt32 {
    get {return _storage._endOffset ?? 0}
    set {_uniqueStorage()._endOffset = newValue}
  }
  /// Returns true if `endOffset` has been explicitly set.
  var hasEndOffset: Bool {return _storage._endOffset != nil}
  /// Clears the value of `endOffset`. Subsequent reads from it will return its default value.
  mutating func clearEndOffset() {_uniqueStorage()._endOffset = nil}

  var actionRotationAngle: Double {
    get {return _storage._actionRotationAngle ?? 0}
    set {_uniqueStorage()._actionRotationAngle = newValue}
  }
  /// Returns true if `actionRotationAngle` has been explicitly set.
  var hasActionRotationAngle: Bool {return _storage._actionRotationAngle != nil}
  /// Clears the value of `actionRotationAngle`. Subsequent reads from it will return its default value.
  mutating func clearActionRotationAngle() {_uniqueStorage()._actionRotationAngle = nil}

  var actionRotationDirection: KN_BuildAttributesArchive.BuildAttributesRotationDirection {
    get {return _storage._actionRotationDirection ?? .kClockwise}
    set {_uniqueStorage()._actionRotationDirection = newValue}
  }
  /// Returns true if `actionRotationDirection` has been explicitly set.
  var hasActionRotationDirection: Bool {return _storage._actionRotationDirection != nil}
  /// Clears the value of `actionRotationDirection`. Subsequent reads from it will return its default value.
  mutating func clearActionRotationDirection() {_uniqueStorage()._actionRotationDirection = nil}

  var actionScaleSize: Double {
    get {return _storage._actionScaleSize ?? 0}
    set {_uniqueStorage()._actionScaleSize = newValue}
  }
  /// Returns true if `actionScaleSize` has been explicitly set.
  var hasActionScaleSize: Bool {return _storage._actionScaleSize != nil}
  /// Clears the value of `actionScaleSize`. Subsequent reads from it will return its default value.
  mutating func clearActionScaleSize() {_uniqueStorage()._actionScaleSize = nil}

  var actionColorAlpha: Double {
    get {return _storage._actionColorAlpha ?? 0}
    set {_uniqueStorage()._actionColorAlpha = newValue}
  }
  /// Returns true if `actionColorAlpha` has been explicitly set.
  var hasActionColorAlpha: Bool {return _storage._actionColorAlpha != nil}
  /// Clears the value of `actionColorAlpha`. Subsequent reads from it will return its default value.
  mutating func clearActionColorAlpha() {_uniqueStorage()._actionColorAlpha = nil}

  var actionAcceleration: KN_BuildAttributesArchive.BuildAttributesAcceleration {
    get {return _storage._actionAcceleration ?? .kNone}
    set {_uniqueStorage()._actionAcceleration = newValue}
  }
  /// Returns true if `actionAcceleration` has been explicitly set.
  var hasActionAcceleration: Bool {return _storage._actionAcceleration != nil}
  /// Clears the value of `actionAcceleration`. Subsequent reads from it will return its default value.
  mutating func clearActionAcceleration() {_uniqueStorage()._actionAcceleration = nil}

  var actionMotionPathSource: TSD_PathSourceArchive {
    get {return _storage._actionMotionPathSource ?? TSD_PathSourceArchive()}
    set {_uniqueStorage()._actionMotionPathSource = newValue}
  }
  /// Returns true if `actionMotionPathSource` has been explicitly set.
  var hasActionMotionPathSource: Bool {return _storage._actionMotionPathSource != nil}
  /// Clears the value of `actionMotionPathSource`. Subsequent reads from it will return its default value.
  mutating func clearActionMotionPathSource() {_uniqueStorage()._actionMotionPathSource = nil}

  var customBounce: Bool {
    get {return _storage._customBounce ?? false}
    set {_uniqueStorage()._customBounce = newValue}
  }
  /// Returns true if `customBounce` has been explicitly set.
  var hasCustomBounce: Bool {return _storage._customBounce != nil}
  /// Clears the value of `customBounce`. Subsequent reads from it will return its default value.
  mutating func clearCustomBounce() {_uniqueStorage()._customBounce = nil}

  var customTextDelivery: KN_BuildAttributesArchive.BuildAttributesTextDelivery {
    get {return _storage._customTextDelivery ?? .kTextDeliveryUndefined}
    set {_uniqueStorage()._customTextDelivery = newValue}
  }
  /// Returns true if `customTextDelivery` has been explicitly set.
  var hasCustomTextDelivery: Bool {return _storage._customTextDelivery != nil}
  /// Clears the value of `customTextDelivery`. Subsequent reads from it will return its default value.
  mutating func clearCustomTextDelivery() {_uniqueStorage()._customTextDelivery = nil}

  var customDeliveryOption: KN_BuildAttributesArchive.BuildAttributesDeliveryOption {
    get {return _storage._customDeliveryOption ?? .kDeliveryOptionUndefined}
    set {_uniqueStorage()._customDeliveryOption = newValue}
  }
  /// Returns true if `customDeliveryOption` has been explicitly set.
  var hasCustomDeliveryOption: Bool {return _storage._customDeliveryOption != nil}
  /// Clears the value of `customDeliveryOption`. Subsequent reads from it will return its default value.
  mutating func clearCustomDeliveryOption() {_uniqueStorage()._customDeliveryOption = nil}

  var customActionDecay: Bool {
    get {return _storage._customActionDecay ?? false}
    set {_uniqueStorage()._customActionDecay = newValue}
  }
  /// Returns true if `customActionDecay` has been explicitly set.
  var hasCustomActionDecay: Bool {return _storage._customActionDecay != nil}
  /// Clears the value of `customActionDecay`. Subsequent reads from it will return its default value.
  mutating func clearCustomActionDecay() {_uniqueStorage()._customActionDecay = nil}

  var customActionRepeatCount: UInt32 {
    get {return _storage._customActionRepeatCount ?? 0}
    set {_uniqueStorage()._customActionRepeatCount = newValue}
  }
  /// Returns true if `customActionRepeatCount` has been explicitly set.
  var hasCustomActionRepeatCount: Bool {return _storage._customActionRepeatCount != nil}
  /// Clears the value of `customActionRepeatCount`. Subsequent reads from it will return its default value.
  mutating func clearCustomActionRepeatCount() {_uniqueStorage()._customActionRepeatCount = nil}

  var customActionScale: Double {
    get {return _storage._customActionScale ?? 0}
    set {_uniqueStorage()._customActionScale = newValue}
  }
  /// Returns true if `customActionScale` has been explicitly set.
  var hasCustomActionScale: Bool {return _storage._customActionScale != nil}
  /// Clears the value of `customActionScale`. Subsequent reads from it will return its default value.
  mutating func clearCustomActionScale() {_uniqueStorage()._customActionScale = nil}

  var customActionJiggleIntensity: KN_BuildAttributesArchive.ActionBuildAttributesJiggleIntensity {
    get {return _storage._customActionJiggleIntensity ?? .kJiggleIntensitySmall}
    set {_uniqueStorage()._customActionJiggleIntensity = newValue}
  }
  /// Returns true if `customActionJiggleIntensity` has been explicitly set.
  var hasCustomActionJiggleIntensity: Bool {return _storage._customActionJiggleIntensity != nil}
  /// Clears the value of `customActionJiggleIntensity`. Subsequent reads from it will return its default value.
  mutating func clearCustomActionJiggleIntensity() {_uniqueStorage()._customActionJiggleIntensity = nil}

  var customMotionBlur: Bool {
    get {return _storage._customMotionBlur ?? false}
    set {_uniqueStorage()._customMotionBlur = newValue}
  }
  /// Returns true if `customMotionBlur` has been explicitly set.
  var hasCustomMotionBlur: Bool {return _storage._customMotionBlur != nil}
  /// Clears the value of `customMotionBlur`. Subsequent reads from it will return its default value.
  mutating func clearCustomMotionBlur() {_uniqueStorage()._customMotionBlur = nil}

  var customIncludeEndpoints: Bool {
    get {return _storage._customIncludeEndpoints ?? false}
    set {_uniqueStorage()._customIncludeEndpoints = newValue}
  }
  /// Returns true if `customIncludeEndpoints` has been explicitly set.
  var hasCustomIncludeEndpoints: Bool {return _storage._customIncludeEndpoints != nil}
  /// Clears the value of `customIncludeEndpoints`. Subsequent reads from it will return its default value.
  mutating func clearCustomIncludeEndpoints() {_uniqueStorage()._customIncludeEndpoints = nil}

  var customShine: Bool {
    get {return _storage._customShine ?? false}
    set {_uniqueStorage()._customShine = newValue}
  }
  /// Returns true if `customShine` has been explicitly set.
  var hasCustomShine: Bool {return _storage._customShine != nil}
  /// Clears the value of `customShine`. Subsequent reads from it will return its default value.
  mutating func clearCustomShine() {_uniqueStorage()._customShine = nil}

  var customScaleAmount: Double {
    get {return _storage._customScaleAmount ?? 0}
    set {_uniqueStorage()._customScaleAmount = newValue}
  }
  /// Returns true if `customScaleAmount` has been explicitly set.
  var hasCustomScaleAmount: Bool {return _storage._customScaleAmount != nil}
  /// Clears the value of `customScaleAmount`. Subsequent reads from it will return its default value.
  mutating func clearCustomScaleAmount() {_uniqueStorage()._customScaleAmount = nil}

  var customTravelDistance: Double {
    get {return _storage._customTravelDistance ?? 0}
    set {_uniqueStorage()._customTravelDistance = newValue}
  }
  /// Returns true if `customTravelDistance` has been explicitly set.
  var hasCustomTravelDistance: Bool {return _storage._customTravelDistance != nil}
  /// Clears the value of `customTravelDistance`. Subsequent reads from it will return its default value.
  mutating func clearCustomTravelDistance() {_uniqueStorage()._customTravelDistance = nil}

  var customCursor: Bool {
    get {return _storage._customCursor ?? false}
    set {_uniqueStorage()._customCursor = newValue}
  }
  /// Returns true if `customCursor` has been explicitly set.
  var hasCustomCursor: Bool {return _storage._customCursor != nil}
  /// Clears the value of `customCursor`. Subsequent reads from it will return its default value.
  mutating func clearCustomCursor() {_uniqueStorage()._customCursor = nil}

  var customAlignToPath: Bool {
    get {return _storage._customAlignToPath ?? false}
    set {_uniqueStorage()._customAlignToPath = newValue}
  }
  /// Returns true if `customAlignToPath` has been explicitly set.
  var hasCustomAlignToPath: Bool {return _storage._customAlignToPath != nil}
  /// Clears the value of `customAlignToPath`. Subsequent reads from it will return its default value.
  mutating func clearCustomAlignToPath() {_uniqueStorage()._customAlignToPath = nil}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var databaseAnimationType: String {
    get {return _storage._databaseAnimationType ?? String()}
    set {_uniqueStorage()._databaseAnimationType = newValue}
  }
  /// Returns true if `databaseAnimationType` has been explicitly set.
  var hasDatabaseAnimationType: Bool {return _storage._databaseAnimationType != nil}
  /// Clears the value of `databaseAnimationType`. Subsequent reads from it will return its default value.
  mutating func clearDatabaseAnimationType() {_uniqueStorage()._databaseAnimationType = nil}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var databaseEffect: String {
    get {return _storage._databaseEffect ?? String()}
    set {_uniqueStorage()._databaseEffect = newValue}
  }
  /// Returns true if `databaseEffect` has been explicitly set.
  var hasDatabaseEffect: Bool {return _storage._databaseEffect != nil}
  /// Clears the value of `databaseEffect`. Subsequent reads from it will return its default value.
  mutating func clearDatabaseEffect() {_uniqueStorage()._databaseEffect = nil}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var databaseDirection: UInt32 {
    get {return _storage._databaseDirection ?? 0}
    set {_uniqueStorage()._databaseDirection = newValue}
  }
  /// Returns true if `databaseDirection` has been explicitly set.
  var hasDatabaseDirection: Bool {return _storage._databaseDirection != nil}
  /// Clears the value of `databaseDirection`. Subsequent reads from it will return its default value.
  mutating func clearDatabaseDirection() {_uniqueStorage()._databaseDirection = nil}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var databaseDelay: Double {
    get {return _storage._databaseDelay ?? 0}
    set {_uniqueStorage()._databaseDelay = newValue}
  }
  /// Returns true if `databaseDelay` has been explicitly set.
  var hasDatabaseDelay: Bool {return _storage._databaseDelay != nil}
  /// Clears the value of `databaseDelay`. Subsequent reads from it will return its default value.
  mutating func clearDatabaseDelay() {_uniqueStorage()._databaseDelay = nil}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var databaseDuration: Double {
    get {return _storage._databaseDuration ?? 0}
    set {_uniqueStorage()._databaseDuration = newValue}
  }
  /// Returns true if `databaseDuration` has been explicitly set.
  var hasDatabaseDuration: Bool {return _storage._databaseDuration != nil}
  /// Clears the value of `databaseDuration`. Subsequent reads from it will return its default value.
  mutating func clearDatabaseDuration() {_uniqueStorage()._databaseDuration = nil}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var databaseColor: TSP_Color {
    get {return _storage._databaseColor ?? TSP_Color()}
    set {_uniqueStorage()._databaseColor = newValue}
  }
  /// Returns true if `databaseColor` has been explicitly set.
  var hasDatabaseColor: Bool {return _storage._databaseColor != nil}
  /// Clears the value of `databaseColor`. Subsequent reads from it will return its default value.
  mutating func clearDatabaseColor() {_uniqueStorage()._databaseColor = nil}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var motionPathString: String {
    get {return _storage._motionPathString ?? String()}
    set {_uniqueStorage()._motionPathString = newValue}
  }
  /// Returns true if `motionPathString` has been explicitly set.
  var hasMotionPathString: Bool {return _storage._motionPathString != nil}
  /// Clears the value of `motionPathString`. Subsequent reads from it will return its default value.
  mutating func clearMotionPathString() {_uniqueStorage()._motionPathString = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum BuildAttributesAcceleration: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case kNone = 0
    case kEaseIn = 1
    case kEaseOut = 2
    case kEaseBoth = 3
    case kCustom = 4

    init() {
      self = .kNone
    }

  }

  enum BuildAttributesRotationDirection: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case kClockwise = 31
    case kCounterclockwise = 32

    init() {
      self = .kClockwise
    }

  }

  enum BuildAttributesCurveStyle: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case kStraight = 0
    case kCurved = 1

    init() {
      self = .kStraight
    }

  }

  enum BuildAttributesTextDelivery: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case kTextDeliveryUndefined = 0
    case kTextDeliveryByObject = 1
    case kTextDeliveryByWord = 2
    case kTextDeliveryByCharacter = 3
    case kTextDeliveryByLine = 4

    init() {
      self = .kTextDeliveryUndefined
    }

  }

  enum BuildAttributesDeliveryOption: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case kDeliveryOptionUndefined = 0
    case kDeliveryOptionForward = 1
    case kDeliveryOptionBackward = 2
    case kDeliveryOptionFromCenter = 3
    case kDeliveryOptionFromEdges = 4
    case kDeliveryOptionRandom = 5

    init() {
      self = .kDeliveryOptionUndefined
    }

  }

  enum ActionBuildAttributesJiggleIntensity: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case kJiggleIntensitySmall = 0
    case kJiggleIntensityMedium = 1
    case kJiggleIntensityLarge = 2

    init() {
      self = .kJiggleIntensitySmall
    }

  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct KN_BuildArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var drawable: TSP_Reference {
    get {return _drawable ?? TSP_Reference()}
    set {_drawable = newValue}
  }
  /// Returns true if `drawable` has been explicitly set.
  var hasDrawable: Bool {return self._drawable != nil}
  /// Clears the value of `drawable`. Subsequent reads from it will return its default value.
  mutating func clearDrawable() {self._drawable = nil}

  var delivery: String {
    get {return _delivery ?? String()}
    set {_delivery = newValue}
  }
  /// Returns true if `delivery` has been explicitly set.
  var hasDelivery: Bool {return self._delivery != nil}
  /// Clears the value of `delivery`. Subsequent reads from it will return its default value.
  mutating func clearDelivery() {self._delivery = nil}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var duration: Double {
    get {return _duration ?? 0}
    set {_duration = newValue}
  }
  /// Returns true if `duration` has been explicitly set.
  var hasDuration: Bool {return self._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
  mutating func clearDuration() {self._duration = nil}

  var attributes: KN_BuildAttributesArchive {
    get {return _attributes ?? KN_BuildAttributesArchive()}
    set {_attributes = newValue}
  }
  /// Returns true if `attributes` has been explicitly set.
  var hasAttributes: Bool {return self._attributes != nil}
  /// Clears the value of `attributes`. Subsequent reads from it will return its default value.
  mutating func clearAttributes() {self._attributes = nil}

  var chunkIDSeed: Int32 {
    get {return _chunkIDSeed ?? 0}
    set {_chunkIDSeed = newValue}
  }
  /// Returns true if `chunkIDSeed` has been explicitly set.
  var hasChunkIDSeed: Bool {return self._chunkIDSeed != nil}
  /// Clears the value of `chunkIDSeed`. Subsequent reads from it will return its default value.
  mutating func clearChunkIDSeed() {self._chunkIDSeed = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _drawable: TSP_Reference? = nil
  fileprivate var _delivery: String? = nil
  fileprivate var _duration: Double? = nil
  fileprivate var _attributes: KN_BuildAttributesArchive? = nil
  fileprivate var _chunkIDSeed: Int32? = nil
}

struct KN_PlaceholderArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSWP_ShapeInfoArchive {
    get {return _super ?? TSWP_ShapeInfoArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var kind: KN_PlaceholderArchive.Kind {
    get {return _kind ?? .kKindPlaceholder}
    set {_kind = newValue}
  }
  /// Returns true if `kind` has been explicitly set.
  var hasKind: Bool {return self._kind != nil}
  /// Clears the value of `kind`. Subsequent reads from it will return its default value.
  mutating func clearKind() {self._kind = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Kind: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case kKindPlaceholder = 0
    case kKindSlideNumberPlaceholder = 1
    case kKindTitlePlaceholder = 2
    case kKindBodyPlaceholder = 3
    case kKindObjectPlaceholder = 4

    init() {
      self = .kKindPlaceholder
    }

  }

  init() {}

  fileprivate var _super: TSWP_ShapeInfoArchive? = nil
  fileprivate var _kind: KN_PlaceholderArchive.Kind? = nil
}

struct KN_NoteArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var containedStorage: TSP_Reference {
    get {return _containedStorage ?? TSP_Reference()}
    set {_containedStorage = newValue}
  }
  /// Returns true if `containedStorage` has been explicitly set.
  var hasContainedStorage: Bool {return self._containedStorage != nil}
  /// Clears the value of `containedStorage`. Subsequent reads from it will return its default value.
  mutating func clearContainedStorage() {self._containedStorage = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _containedStorage: TSP_Reference? = nil
}

struct KN_ClassicStylesheetRecordArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var identifierToStyleMap: [TSS_StylesheetArchive.IdentifiedStyleEntry] = []

  /// NOTE: This field was marked as deprecated in the .proto file.
  var deprecatedTheme: TSP_Reference {
    get {return _deprecatedTheme ?? TSP_Reference()}
    set {_deprecatedTheme = newValue}
  }
  /// Returns true if `deprecatedTheme` has been explicitly set.
  var hasDeprecatedTheme: Bool {return self._deprecatedTheme != nil}
  /// Clears the value of `deprecatedTheme`. Subsequent reads from it will return its default value.
  mutating func clearDeprecatedTheme() {self._deprecatedTheme = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _deprecatedTheme: TSP_Reference? = nil
}

struct KN_ClassicThemeRecordArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uuid: String {
    get {return _uuid ?? String()}
    set {_uuid = newValue}
  }
  /// Returns true if `uuid` has been explicitly set.
  var hasUuid: Bool {return self._uuid != nil}
  /// Clears the value of `uuid`. Subsequent reads from it will return its default value.
  mutating func clearUuid() {self._uuid = nil}

  var stylesheetRecord: TSP_Reference {
    get {return _stylesheetRecord ?? TSP_Reference()}
    set {_stylesheetRecord = newValue}
  }
  /// Returns true if `stylesheetRecord` has been explicitly set.
  var hasStylesheetRecord: Bool {return self._stylesheetRecord != nil}
  /// Clears the value of `stylesheetRecord`. Subsequent reads from it will return its default value.
  mutating func clearStylesheetRecord() {self._stylesheetRecord = nil}

  var templates: [TSP_Reference] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _uuid: String? = nil
  fileprivate var _stylesheetRecord: TSP_Reference? = nil
}

struct KN_SlideArchive: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var style: TSP_Reference {
    get {return _storage._style ?? TSP_Reference()}
    set {_uniqueStorage()._style = newValue}
  }
  /// Returns true if `style` has been explicitly set.
  var hasStyle: Bool {return _storage._style != nil}
  /// Clears the value of `style`. Subsequent reads from it will return its default value.
  mutating func clearStyle() {_uniqueStorage()._style = nil}

  var builds: [TSP_Reference] {
    get {return _storage._builds}
    set {_uniqueStorage()._builds = newValue}
  }

  /// NOTE: This field was marked as deprecated in the .proto file.
  var buildChunkArchives: [KN_BuildChunkArchive] {
    get {return _storage._buildChunkArchives}
    set {_uniqueStorage()._buildChunkArchives = newValue}
  }

  var buildChunks: [TSP_Reference] {
    get {return _storage._buildChunks}
    set {_uniqueStorage()._buildChunks = newValue}
  }

  var transition: KN_TransitionArchive {
    get {return _storage._transition ?? KN_TransitionArchive()}
    set {_uniqueStorage()._transition = newValue}
  }
  /// Returns true if `transition` has been explicitly set.
  var hasTransition: Bool {return _storage._transition != nil}
  /// Clears the value of `transition`. Subsequent reads from it will return its default value.
  mutating func clearTransition() {_uniqueStorage()._transition = nil}

  var titlePlaceholder: TSP_Reference {
    get {return _storage._titlePlaceholder ?? TSP_Reference()}
    set {_uniqueStorage()._titlePlaceholder = newValue}
  }
  /// Returns true if `titlePlaceholder` has been explicitly set.
  var hasTitlePlaceholder: Bool {return _storage._titlePlaceholder != nil}
  /// Clears the value of `titlePlaceholder`. Subsequent reads from it will return its default value.
  mutating func clearTitlePlaceholder() {_uniqueStorage()._titlePlaceholder = nil}

  var bodyPlaceholder: TSP_Reference {
    get {return _storage._bodyPlaceholder ?? TSP_Reference()}
    set {_uniqueStorage()._bodyPlaceholder = newValue}
  }
  /// Returns true if `bodyPlaceholder` has been explicitly set.
  var hasBodyPlaceholder: Bool {return _storage._bodyPlaceholder != nil}
  /// Clears the value of `bodyPlaceholder`. Subsequent reads from it will return its default value.
  mutating func clearBodyPlaceholder() {_uniqueStorage()._bodyPlaceholder = nil}

  var objectPlaceholder: TSP_Reference {
    get {return _storage._objectPlaceholder ?? TSP_Reference()}
    set {_uniqueStorage()._objectPlaceholder = newValue}
  }
  /// Returns true if `objectPlaceholder` has been explicitly set.
  var hasObjectPlaceholder: Bool {return _storage._objectPlaceholder != nil}
  /// Clears the value of `objectPlaceholder`. Subsequent reads from it will return its default value.
  mutating func clearObjectPlaceholder() {_uniqueStorage()._objectPlaceholder = nil}

  var slideNumberPlaceholder: TSP_Reference {
    get {return _storage._slideNumberPlaceholder ?? TSP_Reference()}
    set {_uniqueStorage()._slideNumberPlaceholder = newValue}
  }
  /// Returns true if `slideNumberPlaceholder` has been explicitly set.
  var hasSlideNumberPlaceholder: Bool {return _storage._slideNumberPlaceholder != nil}
  /// Clears the value of `slideNumberPlaceholder`. Subsequent reads from it will return its default value.
  mutating func clearSlideNumberPlaceholder() {_uniqueStorage()._slideNumberPlaceholder = nil}

  var ownedDrawables: [TSP_Reference] {
    get {return _storage._ownedDrawables}
    set {_uniqueStorage()._ownedDrawables = newValue}
  }

  var drawablesZOrder: [TSP_Reference] {
    get {return _storage._drawablesZOrder}
    set {_uniqueStorage()._drawablesZOrder = newValue}
  }

  var sageTagToInfoMap: [KN_SlideArchive.SageTagMapEntry] {
    get {return _storage._sageTagToInfoMap}
    set {_uniqueStorage()._sageTagToInfoMap = newValue}
  }

  var instructionalTextMap: KN_SlideArchive.InstructionalTextMap {
    get {return _storage._instructionalTextMap ?? KN_SlideArchive.InstructionalTextMap()}
    set {_uniqueStorage()._instructionalTextMap = newValue}
  }
  /// Returns true if `instructionalTextMap` has been explicitly set.
  var hasInstructionalTextMap: Bool {return _storage._instructionalTextMap != nil}
  /// Clears the value of `instructionalTextMap`. Subsequent reads from it will return its default value.
  mutating func clearInstructionalTextMap() {_uniqueStorage()._instructionalTextMap = nil}

  var name: String {
    get {return _storage._name ?? String()}
    set {_uniqueStorage()._name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {_uniqueStorage()._name = nil}

  var titlePlaceholderGeometry: TSD_GeometryArchive {
    get {return _storage._titlePlaceholderGeometry ?? TSD_GeometryArchive()}
    set {_uniqueStorage()._titlePlaceholderGeometry = newValue}
  }
  /// Returns true if `titlePlaceholderGeometry` has been explicitly set.
  var hasTitlePlaceholderGeometry: Bool {return _storage._titlePlaceholderGeometry != nil}
  /// Clears the value of `titlePlaceholderGeometry`. Subsequent reads from it will return its default value.
  mutating func clearTitlePlaceholderGeometry() {_uniqueStorage()._titlePlaceholderGeometry = nil}

  var titlePlaceholderShapeStyleIndex: UInt32 {
    get {return _storage._titlePlaceholderShapeStyleIndex ?? 0}
    set {_uniqueStorage()._titlePlaceholderShapeStyleIndex = newValue}
  }
  /// Returns true if `titlePlaceholderShapeStyleIndex` has been explicitly set.
  var hasTitlePlaceholderShapeStyleIndex: Bool {return _storage._titlePlaceholderShapeStyleIndex != nil}
  /// Clears the value of `titlePlaceholderShapeStyleIndex`. Subsequent reads from it will return its default value.
  mutating func clearTitlePlaceholderShapeStyleIndex() {_uniqueStorage()._titlePlaceholderShapeStyleIndex = nil}

  var titlePlaceholderTextStyleIndex: UInt32 {
    get {return _storage._titlePlaceholderTextStyleIndex ?? 0}
    set {_uniqueStorage()._titlePlaceholderTextStyleIndex = newValue}
  }
  /// Returns true if `titlePlaceholderTextStyleIndex` has been explicitly set.
  var hasTitlePlaceholderTextStyleIndex: Bool {return _storage._titlePlaceholderTextStyleIndex != nil}
  /// Clears the value of `titlePlaceholderTextStyleIndex`. Subsequent reads from it will return its default value.
  mutating func clearTitlePlaceholderTextStyleIndex() {_uniqueStorage()._titlePlaceholderTextStyleIndex = nil}

  var titleLayoutProperties: TSWP_ShapeStylePropertiesArchive {
    get {return _storage._titleLayoutProperties ?? TSWP_ShapeStylePropertiesArchive()}
    set {_uniqueStorage()._titleLayoutProperties = newValue}
  }
  /// Returns true if `titleLayoutProperties` has been explicitly set.
  var hasTitleLayoutProperties: Bool {return _storage._titleLayoutProperties != nil}
  /// Clears the value of `titleLayoutProperties`. Subsequent reads from it will return its default value.
  mutating func clearTitleLayoutProperties() {_uniqueStorage()._titleLayoutProperties = nil}

  var bodyPlaceholderGeometry: TSD_GeometryArchive {
    get {return _storage._bodyPlaceholderGeometry ?? TSD_GeometryArchive()}
    set {_uniqueStorage()._bodyPlaceholderGeometry = newValue}
  }
  /// Returns true if `bodyPlaceholderGeometry` has been explicitly set.
  var hasBodyPlaceholderGeometry: Bool {return _storage._bodyPlaceholderGeometry != nil}
  /// Clears the value of `bodyPlaceholderGeometry`. Subsequent reads from it will return its default value.
  mutating func clearBodyPlaceholderGeometry() {_uniqueStorage()._bodyPlaceholderGeometry = nil}

  var bodyPlaceholderShapeStyleIndex: UInt32 {
    get {return _storage._bodyPlaceholderShapeStyleIndex ?? 0}
    set {_uniqueStorage()._bodyPlaceholderShapeStyleIndex = newValue}
  }
  /// Returns true if `bodyPlaceholderShapeStyleIndex` has been explicitly set.
  var hasBodyPlaceholderShapeStyleIndex: Bool {return _storage._bodyPlaceholderShapeStyleIndex != nil}
  /// Clears the value of `bodyPlaceholderShapeStyleIndex`. Subsequent reads from it will return its default value.
  mutating func clearBodyPlaceholderShapeStyleIndex() {_uniqueStorage()._bodyPlaceholderShapeStyleIndex = nil}

  var bodyPlaceholderTextStyleIndex: UInt32 {
    get {return _storage._bodyPlaceholderTextStyleIndex ?? 0}
    set {_uniqueStorage()._bodyPlaceholderTextStyleIndex = newValue}
  }
  /// Returns true if `bodyPlaceholderTextStyleIndex` has been explicitly set.
  var hasBodyPlaceholderTextStyleIndex: Bool {return _storage._bodyPlaceholderTextStyleIndex != nil}
  /// Clears the value of `bodyPlaceholderTextStyleIndex`. Subsequent reads from it will return its default value.
  mutating func clearBodyPlaceholderTextStyleIndex() {_uniqueStorage()._bodyPlaceholderTextStyleIndex = nil}

  var bodyLayoutProperties: TSWP_ShapeStylePropertiesArchive {
    get {return _storage._bodyLayoutProperties ?? TSWP_ShapeStylePropertiesArchive()}
    set {_uniqueStorage()._bodyLayoutProperties = newValue}
  }
  /// Returns true if `bodyLayoutProperties` has been explicitly set.
  var hasBodyLayoutProperties: Bool {return _storage._bodyLayoutProperties != nil}
  /// Clears the value of `bodyLayoutProperties`. Subsequent reads from it will return its default value.
  mutating func clearBodyLayoutProperties() {_uniqueStorage()._bodyLayoutProperties = nil}

  var slideNumberPlaceholderGeometry: TSD_GeometryArchive {
    get {return _storage._slideNumberPlaceholderGeometry ?? TSD_GeometryArchive()}
    set {_uniqueStorage()._slideNumberPlaceholderGeometry = newValue}
  }
  /// Returns true if `slideNumberPlaceholderGeometry` has been explicitly set.
  var hasSlideNumberPlaceholderGeometry: Bool {return _storage._slideNumberPlaceholderGeometry != nil}
  /// Clears the value of `slideNumberPlaceholderGeometry`. Subsequent reads from it will return its default value.
  mutating func clearSlideNumberPlaceholderGeometry() {_uniqueStorage()._slideNumberPlaceholderGeometry = nil}

  var slideNumberPlaceholderShapeStyleIndex: UInt32 {
    get {return _storage._slideNumberPlaceholderShapeStyleIndex ?? 0}
    set {_uniqueStorage()._slideNumberPlaceholderShapeStyleIndex = newValue}
  }
  /// Returns true if `slideNumberPlaceholderShapeStyleIndex` has been explicitly set.
  var hasSlideNumberPlaceholderShapeStyleIndex: Bool {return _storage._slideNumberPlaceholderShapeStyleIndex != nil}
  /// Clears the value of `slideNumberPlaceholderShapeStyleIndex`. Subsequent reads from it will return its default value.
  mutating func clearSlideNumberPlaceholderShapeStyleIndex() {_uniqueStorage()._slideNumberPlaceholderShapeStyleIndex = nil}

  var slideNumberPlaceholderTextStyleIndex: UInt32 {
    get {return _storage._slideNumberPlaceholderTextStyleIndex ?? 0}
    set {_uniqueStorage()._slideNumberPlaceholderTextStyleIndex = newValue}
  }
  /// Returns true if `slideNumberPlaceholderTextStyleIndex` has been explicitly set.
  var hasSlideNumberPlaceholderTextStyleIndex: Bool {return _storage._slideNumberPlaceholderTextStyleIndex != nil}
  /// Clears the value of `slideNumberPlaceholderTextStyleIndex`. Subsequent reads from it will return its default value.
  mutating func clearSlideNumberPlaceholderTextStyleIndex() {_uniqueStorage()._slideNumberPlaceholderTextStyleIndex = nil}

  var slideNumberLayoutProperties: TSWP_ShapeStylePropertiesArchive {
    get {return _storage._slideNumberLayoutProperties ?? TSWP_ShapeStylePropertiesArchive()}
    set {_uniqueStorage()._slideNumberLayoutProperties = newValue}
  }
  /// Returns true if `slideNumberLayoutProperties` has been explicitly set.
  var hasSlideNumberLayoutProperties: Bool {return _storage._slideNumberLayoutProperties != nil}
  /// Clears the value of `slideNumberLayoutProperties`. Subsequent reads from it will return its default value.
  mutating func clearSlideNumberLayoutProperties() {_uniqueStorage()._slideNumberLayoutProperties = nil}

  var classicStylesheetRecord: TSP_Reference {
    get {return _storage._classicStylesheetRecord ?? TSP_Reference()}
    set {_uniqueStorage()._classicStylesheetRecord = newValue}
  }
  /// Returns true if `classicStylesheetRecord` has been explicitly set.
  var hasClassicStylesheetRecord: Bool {return _storage._classicStylesheetRecord != nil}
  /// Clears the value of `classicStylesheetRecord`. Subsequent reads from it will return its default value.
  mutating func clearClassicStylesheetRecord() {_uniqueStorage()._classicStylesheetRecord = nil}

  var bodyParagraphStyles: [TSP_Reference] {
    get {return _storage._bodyParagraphStyles}
    set {_uniqueStorage()._bodyParagraphStyles = newValue}
  }

  var bodyListStyles: [TSP_Reference] {
    get {return _storage._bodyListStyles}
    set {_uniqueStorage()._bodyListStyles = newValue}
  }

  var thumbnailTextForTitlePlaceholder: String {
    get {return _storage._thumbnailTextForTitlePlaceholder ?? String()}
    set {_uniqueStorage()._thumbnailTextForTitlePlaceholder = newValue}
  }
  /// Returns true if `thumbnailTextForTitlePlaceholder` has been explicitly set.
  var hasThumbnailTextForTitlePlaceholder: Bool {return _storage._thumbnailTextForTitlePlaceholder != nil}
  /// Clears the value of `thumbnailTextForTitlePlaceholder`. Subsequent reads from it will return its default value.
  mutating func clearThumbnailTextForTitlePlaceholder() {_uniqueStorage()._thumbnailTextForTitlePlaceholder = nil}

  var thumbnailTextForBodyPlaceholder: String {
    get {return _storage._thumbnailTextForBodyPlaceholder ?? String()}
    set {_uniqueStorage()._thumbnailTextForBodyPlaceholder = newValue}
  }
  /// Returns true if `thumbnailTextForBodyPlaceholder` has been explicitly set.
  var hasThumbnailTextForBodyPlaceholder: Bool {return _storage._thumbnailTextForBodyPlaceholder != nil}
  /// Clears the value of `thumbnailTextForBodyPlaceholder`. Subsequent reads from it will return its default value.
  mutating func clearThumbnailTextForBodyPlaceholder() {_uniqueStorage()._thumbnailTextForBodyPlaceholder = nil}

  var slideObjectsLayerWithTemplate: Bool {
    get {return _storage._slideObjectsLayerWithTemplate ?? false}
    set {_uniqueStorage()._slideObjectsLayerWithTemplate = newValue}
  }
  /// Returns true if `slideObjectsLayerWithTemplate` has been explicitly set.
  var hasSlideObjectsLayerWithTemplate: Bool {return _storage._slideObjectsLayerWithTemplate != nil}
  /// Clears the value of `slideObjectsLayerWithTemplate`. Subsequent reads from it will return its default value.
  mutating func clearSlideObjectsLayerWithTemplate() {_uniqueStorage()._slideObjectsLayerWithTemplate = nil}

  var templateSlide: TSP_Reference {
    get {return _storage._templateSlide ?? TSP_Reference()}
    set {_uniqueStorage()._templateSlide = newValue}
  }
  /// Returns true if `templateSlide` has been explicitly set.
  var hasTemplateSlide: Bool {return _storage._templateSlide != nil}
  /// Clears the value of `templateSlide`. Subsequent reads from it will return its default value.
  mutating func clearTemplateSlide() {_uniqueStorage()._templateSlide = nil}

  var staticGuides: [TSD_GuideArchive] {
    get {return _storage._staticGuides}
    set {_uniqueStorage()._staticGuides = newValue}
  }

  var userDefinedGuideStorage: TSP_Reference {
    get {return _storage._userDefinedGuideStorage ?? TSP_Reference()}
    set {_uniqueStorage()._userDefinedGuideStorage = newValue}
  }
  /// Returns true if `userDefinedGuideStorage` has been explicitly set.
  var hasUserDefinedGuideStorage: Bool {return _storage._userDefinedGuideStorage != nil}
  /// Clears the value of `userDefinedGuideStorage`. Subsequent reads from it will return its default value.
  mutating func clearUserDefinedGuideStorage() {_uniqueStorage()._userDefinedGuideStorage = nil}

  var inDocument: Bool {
    get {return _storage._inDocument ?? false}
    set {_uniqueStorage()._inDocument = newValue}
  }
  /// Returns true if `inDocument` has been explicitly set.
  var hasInDocument: Bool {return _storage._inDocument != nil}
  /// Clears the value of `inDocument`. Subsequent reads from it will return its default value.
  mutating func clearInDocument() {_uniqueStorage()._inDocument = nil}

  var note: TSP_Reference {
    get {return _storage._note ?? TSP_Reference()}
    set {_uniqueStorage()._note = newValue}
  }
  /// Returns true if `note` has been explicitly set.
  var hasNote: Bool {return _storage._note != nil}
  /// Clears the value of `note`. Subsequent reads from it will return its default value.
  mutating func clearNote() {_uniqueStorage()._note = nil}

  var infosUsingObjectPlaceholderGeometry: [TSP_Reference] {
    get {return _storage._infosUsingObjectPlaceholderGeometry}
    set {_uniqueStorage()._infosUsingObjectPlaceholderGeometry = newValue}
  }

  var deprecatedObjectPlaceholderVisibleForExport: Bool {
    get {return _storage._deprecatedObjectPlaceholderVisibleForExport ?? false}
    set {_uniqueStorage()._deprecatedObjectPlaceholderVisibleForExport = newValue}
  }
  /// Returns true if `deprecatedObjectPlaceholderVisibleForExport` has been explicitly set.
  var hasDeprecatedObjectPlaceholderVisibleForExport: Bool {return _storage._deprecatedObjectPlaceholderVisibleForExport != nil}
  /// Clears the value of `deprecatedObjectPlaceholderVisibleForExport`. Subsequent reads from it will return its default value.
  mutating func clearDeprecatedObjectPlaceholderVisibleForExport() {_uniqueStorage()._deprecatedObjectPlaceholderVisibleForExport = nil}

  var infoUsingObjectPlaceholderGeometry: TSP_Reference {
    get {return _storage._infoUsingObjectPlaceholderGeometry ?? TSP_Reference()}
    set {_uniqueStorage()._infoUsingObjectPlaceholderGeometry = newValue}
  }
  /// Returns true if `infoUsingObjectPlaceholderGeometry` has been explicitly set.
  var hasInfoUsingObjectPlaceholderGeometry: Bool {return _storage._infoUsingObjectPlaceholderGeometry != nil}
  /// Clears the value of `infoUsingObjectPlaceholderGeometry`. Subsequent reads from it will return its default value.
  mutating func clearInfoUsingObjectPlaceholderGeometry() {_uniqueStorage()._infoUsingObjectPlaceholderGeometry = nil}

  var infoUsingObjectPlaceholderGeometryMatchesObjectPlaceholderGeometry: Bool {
    get {return _storage._infoUsingObjectPlaceholderGeometryMatchesObjectPlaceholderGeometry ?? false}
    set {_uniqueStorage()._infoUsingObjectPlaceholderGeometryMatchesObjectPlaceholderGeometry = newValue}
  }
  /// Returns true if `infoUsingObjectPlaceholderGeometryMatchesObjectPlaceholderGeometry` has been explicitly set.
  var hasInfoUsingObjectPlaceholderGeometryMatchesObjectPlaceholderGeometry: Bool {return _storage._infoUsingObjectPlaceholderGeometryMatchesObjectPlaceholderGeometry != nil}
  /// Clears the value of `infoUsingObjectPlaceholderGeometryMatchesObjectPlaceholderGeometry`. Subsequent reads from it will return its default value.
  mutating func clearInfoUsingObjectPlaceholderGeometryMatchesObjectPlaceholderGeometry() {_uniqueStorage()._infoUsingObjectPlaceholderGeometryMatchesObjectPlaceholderGeometry = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct SageTagMapEntry: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var tag: String {
      get {return _tag ?? String()}
      set {_tag = newValue}
    }
    /// Returns true if `tag` has been explicitly set.
    var hasTag: Bool {return self._tag != nil}
    /// Clears the value of `tag`. Subsequent reads from it will return its default value.
    mutating func clearTag() {self._tag = nil}

    var info: TSP_Reference {
      get {return _info ?? TSP_Reference()}
      set {_info = newValue}
    }
    /// Returns true if `info` has been explicitly set.
    var hasInfo: Bool {return self._info != nil}
    /// Clears the value of `info`. Subsequent reads from it will return its default value.
    mutating func clearInfo() {self._info = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _tag: String? = nil
    fileprivate var _info: TSP_Reference? = nil
  }

  struct InstructionalTextMap: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var instructionalTextForInfos: [KN_SlideArchive.InstructionalTextMap.InstructionalTextMapEntry] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct InstructionalTextMapEntry: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var info: TSP_Reference {
        get {return _info ?? TSP_Reference()}
        set {_info = newValue}
      }
      /// Returns true if `info` has been explicitly set.
      var hasInfo: Bool {return self._info != nil}
      /// Clears the value of `info`. Subsequent reads from it will return its default value.
      mutating func clearInfo() {self._info = nil}

      var instructionalText: String {
        get {return _instructionalText ?? String()}
        set {_instructionalText = newValue}
      }
      /// Returns true if `instructionalText` has been explicitly set.
      var hasInstructionalText: Bool {return self._instructionalText != nil}
      /// Clears the value of `instructionalText`. Subsequent reads from it will return its default value.
      mutating func clearInstructionalText() {self._instructionalText = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _info: TSP_Reference? = nil
      fileprivate var _instructionalText: String? = nil
    }

    init() {}
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct KN_SlideNodeArchive: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var children: [TSP_Reference] {
    get {return _storage._children}
    set {_uniqueStorage()._children = newValue}
  }

  var slide: TSP_Reference {
    get {return _storage._slide ?? TSP_Reference()}
    set {_uniqueStorage()._slide = newValue}
  }
  /// Returns true if `slide` has been explicitly set.
  var hasSlide: Bool {return _storage._slide != nil}
  /// Clears the value of `slide`. Subsequent reads from it will return its default value.
  mutating func clearSlide() {_uniqueStorage()._slide = nil}

  var depth: UInt32 {
    get {return _storage._depth ?? 1}
    set {_uniqueStorage()._depth = newValue}
  }
  /// Returns true if `depth` has been explicitly set.
  var hasDepth: Bool {return _storage._depth != nil}
  /// Clears the value of `depth`. Subsequent reads from it will return its default value.
  mutating func clearDepth() {_uniqueStorage()._depth = nil}

  var thumbnails: [TSP_DataReference] {
    get {return _storage._thumbnails}
    set {_uniqueStorage()._thumbnails = newValue}
  }

  var thumbnailSizes: [TSP_Size] {
    get {return _storage._thumbnailSizes}
    set {_uniqueStorage()._thumbnailSizes = newValue}
  }

  var thumbnailsAreDirty: Bool {
    get {return _storage._thumbnailsAreDirty ?? false}
    set {_uniqueStorage()._thumbnailsAreDirty = newValue}
  }
  /// Returns true if `thumbnailsAreDirty` has been explicitly set.
  var hasThumbnailsAreDirty: Bool {return _storage._thumbnailsAreDirty != nil}
  /// Clears the value of `thumbnailsAreDirty`. Subsequent reads from it will return its default value.
  mutating func clearThumbnailsAreDirty() {_uniqueStorage()._thumbnailsAreDirty = nil}

  var digestsForDatasNeedingDownloadForThumbnail: [String] {
    get {return _storage._digestsForDatasNeedingDownloadForThumbnail}
    set {_uniqueStorage()._digestsForDatasNeedingDownloadForThumbnail = newValue}
  }

  var isSkipped: Bool {
    get {return _storage._isSkipped ?? false}
    set {_uniqueStorage()._isSkipped = newValue}
  }
  /// Returns true if `isSkipped` has been explicitly set.
  var hasIsSkipped: Bool {return _storage._isSkipped != nil}
  /// Clears the value of `isSkipped`. Subsequent reads from it will return its default value.
  mutating func clearIsSkipped() {_uniqueStorage()._isSkipped = nil}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var isCollapsed: Bool {
    get {return _storage._isCollapsed ?? false}
    set {_uniqueStorage()._isCollapsed = newValue}
  }
  /// Returns true if `isCollapsed` has been explicitly set.
  var hasIsCollapsed: Bool {return _storage._isCollapsed != nil}
  /// Clears the value of `isCollapsed`. Subsequent reads from it will return its default value.
  mutating func clearIsCollapsed() {_uniqueStorage()._isCollapsed = nil}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var isCollapsedInOutlineView: Bool {
    get {return _storage._isCollapsedInOutlineView ?? false}
    set {_uniqueStorage()._isCollapsedInOutlineView = newValue}
  }
  /// Returns true if `isCollapsedInOutlineView` has been explicitly set.
  var hasIsCollapsedInOutlineView: Bool {return _storage._isCollapsedInOutlineView != nil}
  /// Clears the value of `isCollapsedInOutlineView`. Subsequent reads from it will return its default value.
  mutating func clearIsCollapsedInOutlineView() {_uniqueStorage()._isCollapsedInOutlineView = nil}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var hasBodyInOutlineView_p: Bool {
    get {return _storage._hasBodyInOutlineView_p ?? false}
    set {_uniqueStorage()._hasBodyInOutlineView_p = newValue}
  }
  /// Returns true if `hasBodyInOutlineView_p` has been explicitly set.
  var hasHasBodyInOutlineView_p: Bool {return _storage._hasBodyInOutlineView_p != nil}
  /// Clears the value of `hasBodyInOutlineView_p`. Subsequent reads from it will return its default value.
  mutating func clearHasBodyInOutlineView_p() {_uniqueStorage()._hasBodyInOutlineView_p = nil}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var hasBuilds_p: Bool {
    get {return _storage._hasBuilds_p ?? false}
    set {_uniqueStorage()._hasBuilds_p = newValue}
  }
  /// Returns true if `hasBuilds_p` has been explicitly set.
  var hasHasBuilds_p: Bool {return _storage._hasBuilds_p != nil}
  /// Clears the value of `hasBuilds_p`. Subsequent reads from it will return its default value.
  mutating func clearHasBuilds_p() {_uniqueStorage()._hasBuilds_p = nil}

  var hasTransition_p: Bool {
    get {return _storage._hasTransition_p ?? false}
    set {_uniqueStorage()._hasTransition_p = newValue}
  }
  /// Returns true if `hasTransition_p` has been explicitly set.
  var hasHasTransition_p: Bool {return _storage._hasTransition_p != nil}
  /// Clears the value of `hasTransition_p`. Subsequent reads from it will return its default value.
  mutating func clearHasTransition_p() {_uniqueStorage()._hasTransition_p = nil}

  var hasNote_p: Bool {
    get {return _storage._hasNote_p ?? false}
    set {_uniqueStorage()._hasNote_p = newValue}
  }
  /// Returns true if `hasNote_p` has been explicitly set.
  var hasHasNote_p: Bool {return _storage._hasNote_p != nil}
  /// Clears the value of `hasNote_p`. Subsequent reads from it will return its default value.
  mutating func clearHasNote_p() {_uniqueStorage()._hasNote_p = nil}

  var isSlideNumberVisible: Bool {
    get {return _storage._isSlideNumberVisible ?? false}
    set {_uniqueStorage()._isSlideNumberVisible = newValue}
  }
  /// Returns true if `isSlideNumberVisible` has been explicitly set.
  var hasIsSlideNumberVisible: Bool {return _storage._isSlideNumberVisible != nil}
  /// Clears the value of `isSlideNumberVisible`. Subsequent reads from it will return its default value.
  mutating func clearIsSlideNumberVisible() {_uniqueStorage()._isSlideNumberVisible = nil}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var uniqueIdentifier: String {
    get {return _storage._uniqueIdentifier ?? String()}
    set {_uniqueStorage()._uniqueIdentifier = newValue}
  }
  /// Returns true if `uniqueIdentifier` has been explicitly set.
  var hasUniqueIdentifier: Bool {return _storage._uniqueIdentifier != nil}
  /// Clears the value of `uniqueIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearUniqueIdentifier() {_uniqueStorage()._uniqueIdentifier = nil}

  var copyFromSlideIdentifier: String {
    get {return _storage._copyFromSlideIdentifier ?? String()}
    set {_uniqueStorage()._copyFromSlideIdentifier = newValue}
  }
  /// Returns true if `copyFromSlideIdentifier` has been explicitly set.
  var hasCopyFromSlideIdentifier: Bool {return _storage._copyFromSlideIdentifier != nil}
  /// Clears the value of `copyFromSlideIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearCopyFromSlideIdentifier() {_uniqueStorage()._copyFromSlideIdentifier = nil}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var slideSpecificHyperlinkCount: UInt32 {
    get {return _storage._slideSpecificHyperlinkCount ?? 0}
    set {_uniqueStorage()._slideSpecificHyperlinkCount = newValue}
  }
  /// Returns true if `slideSpecificHyperlinkCount` has been explicitly set.
  var hasSlideSpecificHyperlinkCount: Bool {return _storage._slideSpecificHyperlinkCount != nil}
  /// Clears the value of `slideSpecificHyperlinkCount`. Subsequent reads from it will return its default value.
  mutating func clearSlideSpecificHyperlinkCount() {_uniqueStorage()._slideSpecificHyperlinkCount = nil}

  var buildEventCount: UInt32 {
    get {return _storage._buildEventCount ?? 0}
    set {_uniqueStorage()._buildEventCount = newValue}
  }
  /// Returns true if `buildEventCount` has been explicitly set.
  var hasBuildEventCount: Bool {return _storage._buildEventCount != nil}
  /// Clears the value of `buildEventCount`. Subsequent reads from it will return its default value.
  mutating func clearBuildEventCount() {_uniqueStorage()._buildEventCount = nil}

  var buildEventCountCacheVersion: UInt32 {
    get {return _storage._buildEventCountCacheVersion ?? 0}
    set {_uniqueStorage()._buildEventCountCacheVersion = newValue}
  }
  /// Returns true if `buildEventCountCacheVersion` has been explicitly set.
  var hasBuildEventCountCacheVersion: Bool {return _storage._buildEventCountCacheVersion != nil}
  /// Clears the value of `buildEventCountCacheVersion`. Subsequent reads from it will return its default value.
  mutating func clearBuildEventCountCacheVersion() {_uniqueStorage()._buildEventCountCacheVersion = nil}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var buildEventCountIsUpToDate: Bool {
    get {return _storage._buildEventCountIsUpToDate ?? false}
    set {_uniqueStorage()._buildEventCountIsUpToDate = newValue}
  }
  /// Returns true if `buildEventCountIsUpToDate` has been explicitly set.
  var hasBuildEventCountIsUpToDate: Bool {return _storage._buildEventCountIsUpToDate != nil}
  /// Clears the value of `buildEventCountIsUpToDate`. Subsequent reads from it will return its default value.
  mutating func clearBuildEventCountIsUpToDate() {_uniqueStorage()._buildEventCountIsUpToDate = nil}

  var hasExplicitBuilds_p: Bool {
    get {return _storage._hasExplicitBuilds_p ?? false}
    set {_uniqueStorage()._hasExplicitBuilds_p = newValue}
  }
  /// Returns true if `hasExplicitBuilds_p` has been explicitly set.
  var hasHasExplicitBuilds_p: Bool {return _storage._hasExplicitBuilds_p != nil}
  /// Clears the value of `hasExplicitBuilds_p`. Subsequent reads from it will return its default value.
  mutating func clearHasExplicitBuilds_p() {_uniqueStorage()._hasExplicitBuilds_p = nil}

  var hasExplicitBuildsCacheVersion_p: UInt32 {
    get {return _storage._hasExplicitBuildsCacheVersion_p ?? 0}
    set {_uniqueStorage()._hasExplicitBuildsCacheVersion_p = newValue}
  }
  /// Returns true if `hasExplicitBuildsCacheVersion_p` has been explicitly set.
  var hasHasExplicitBuildsCacheVersion_p: Bool {return _storage._hasExplicitBuildsCacheVersion_p != nil}
  /// Clears the value of `hasExplicitBuildsCacheVersion_p`. Subsequent reads from it will return its default value.
  mutating func clearHasExplicitBuildsCacheVersion_p() {_uniqueStorage()._hasExplicitBuildsCacheVersion_p = nil}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var hasExplicitBuildsIsUpToDate_p: Bool {
    get {return _storage._hasExplicitBuildsIsUpToDate_p ?? false}
    set {_uniqueStorage()._hasExplicitBuildsIsUpToDate_p = newValue}
  }
  /// Returns true if `hasExplicitBuildsIsUpToDate_p` has been explicitly set.
  var hasHasExplicitBuildsIsUpToDate_p: Bool {return _storage._hasExplicitBuildsIsUpToDate_p != nil}
  /// Clears the value of `hasExplicitBuildsIsUpToDate_p`. Subsequent reads from it will return its default value.
  mutating func clearHasExplicitBuildsIsUpToDate_p() {_uniqueStorage()._hasExplicitBuildsIsUpToDate_p = nil}

  var slideSpecificHyperlinkMap: [KN_SlideNodeArchive.SlideSpecificHyperlinkMapEntry] {
    get {return _storage._slideSpecificHyperlinkMap}
    set {_uniqueStorage()._slideSpecificHyperlinkMap = newValue}
  }

  var backgroundIsNoFillOrColorFillWithAlpha: Bool {
    get {return _storage._backgroundIsNoFillOrColorFillWithAlpha ?? false}
    set {_uniqueStorage()._backgroundIsNoFillOrColorFillWithAlpha = newValue}
  }
  /// Returns true if `backgroundIsNoFillOrColorFillWithAlpha` has been explicitly set.
  var hasBackgroundIsNoFillOrColorFillWithAlpha: Bool {return _storage._backgroundIsNoFillOrColorFillWithAlpha != nil}
  /// Clears the value of `backgroundIsNoFillOrColorFillWithAlpha`. Subsequent reads from it will return its default value.
  mutating func clearBackgroundIsNoFillOrColorFillWithAlpha() {_uniqueStorage()._backgroundIsNoFillOrColorFillWithAlpha = nil}

  var templateSlideID: TSP_UUID {
    get {return _storage._templateSlideID ?? TSP_UUID()}
    set {_uniqueStorage()._templateSlideID = newValue}
  }
  /// Returns true if `templateSlideID` has been explicitly set.
  var hasTemplateSlideID: Bool {return _storage._templateSlideID != nil}
  /// Clears the value of `templateSlideID`. Subsequent reads from it will return its default value.
  mutating func clearTemplateSlideID() {_uniqueStorage()._templateSlideID = nil}

  var liveVideoSourceIds: [TSP_UUID] {
    get {return _storage._liveVideoSourceIds}
    set {_uniqueStorage()._liveVideoSourceIds = newValue}
  }

  var liveVideoSourceUsageEntries: [KN_LiveVideoSourceUsageEntry] {
    get {return _storage._liveVideoSourceUsageEntries}
    set {_uniqueStorage()._liveVideoSourceUsageEntries = newValue}
  }

  /// NOTE: This field was marked as deprecated in the .proto file.
  var databaseThumbnail: TSP_Reference {
    get {return _storage._databaseThumbnail ?? TSP_Reference()}
    set {_uniqueStorage()._databaseThumbnail = newValue}
  }
  /// Returns true if `databaseThumbnail` has been explicitly set.
  var hasDatabaseThumbnail: Bool {return _storage._databaseThumbnail != nil}
  /// Clears the value of `databaseThumbnail`. Subsequent reads from it will return its default value.
  mutating func clearDatabaseThumbnail() {_uniqueStorage()._databaseThumbnail = nil}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var databaseThumbnails: [TSP_Reference] {
    get {return _storage._databaseThumbnails}
    set {_uniqueStorage()._databaseThumbnails = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct SlideSpecificHyperlinkMapEntry: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var slideNodeIdstring: String {
      get {return _slideNodeIdstring ?? String()}
      set {_slideNodeIdstring = newValue}
    }
    /// Returns true if `slideNodeIdstring` has been explicitly set.
    var hasSlideNodeIdstring: Bool {return self._slideNodeIdstring != nil}
    /// Clears the value of `slideNodeIdstring`. Subsequent reads from it will return its default value.
    mutating func clearSlideNodeIdstring() {self._slideNodeIdstring = nil}

    var infoOrStorageIdstring: [String] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _slideNodeIdstring: String? = nil
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct KN_DesktopUILayoutArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sidebarVisible: Bool {
    get {return _sidebarVisible ?? false}
    set {_sidebarVisible = newValue}
  }
  /// Returns true if `sidebarVisible` has been explicitly set.
  var hasSidebarVisible: Bool {return self._sidebarVisible != nil}
  /// Clears the value of `sidebarVisible`. Subsequent reads from it will return its default value.
  mutating func clearSidebarVisible() {self._sidebarVisible = nil}

  var sidebarViewMode: KN_DesktopUILayoutArchive.SidebarViewMode {
    get {return _sidebarViewMode ?? .kSidebarViewModeNavigator}
    set {_sidebarViewMode = newValue}
  }
  /// Returns true if `sidebarViewMode` has been explicitly set.
  var hasSidebarViewMode: Bool {return self._sidebarViewMode != nil}
  /// Clears the value of `sidebarViewMode`. Subsequent reads from it will return its default value.
  mutating func clearSidebarViewMode() {self._sidebarViewMode = nil}

  var notesVisible: Bool {
    get {return _notesVisible ?? false}
    set {_notesVisible = newValue}
  }
  /// Returns true if `notesVisible` has been explicitly set.
  var hasNotesVisible: Bool {return self._notesVisible != nil}
  /// Clears the value of `notesVisible`. Subsequent reads from it will return its default value.
  mutating func clearNotesVisible() {self._notesVisible = nil}

  var lightTableVisible: Bool {
    get {return _lightTableVisible ?? false}
    set {_lightTableVisible = newValue}
  }
  /// Returns true if `lightTableVisible` has been explicitly set.
  var hasLightTableVisible: Bool {return self._lightTableVisible != nil}
  /// Clears the value of `lightTableVisible`. Subsequent reads from it will return its default value.
  mutating func clearLightTableVisible() {self._lightTableVisible = nil}

  var inspectorPaneVisible: Bool {
    get {return _inspectorPaneVisible ?? true}
    set {_inspectorPaneVisible = newValue}
  }
  /// Returns true if `inspectorPaneVisible` has been explicitly set.
  var hasInspectorPaneVisible: Bool {return self._inspectorPaneVisible != nil}
  /// Clears the value of `inspectorPaneVisible`. Subsequent reads from it will return its default value.
  mutating func clearInspectorPaneVisible() {self._inspectorPaneVisible = nil}

  var inspectorPaneViewMode: KN_DesktopUILayoutArchive.InspectorPaneViewMode {
    get {return _inspectorPaneViewMode ?? .kInspectorPaneViewModeFormat}
    set {_inspectorPaneViewMode = newValue}
  }
  /// Returns true if `inspectorPaneViewMode` has been explicitly set.
  var hasInspectorPaneViewMode: Bool {return self._inspectorPaneViewMode != nil}
  /// Clears the value of `inspectorPaneViewMode`. Subsequent reads from it will return its default value.
  mutating func clearInspectorPaneViewMode() {self._inspectorPaneViewMode = nil}

  var showingTemplateSlides: Bool {
    get {return _showingTemplateSlides ?? false}
    set {_showingTemplateSlides = newValue}
  }
  /// Returns true if `showingTemplateSlides` has been explicitly set.
  var hasShowingTemplateSlides: Bool {return self._showingTemplateSlides != nil}
  /// Clears the value of `showingTemplateSlides`. Subsequent reads from it will return its default value.
  mutating func clearShowingTemplateSlides() {self._showingTemplateSlides = nil}

  var inspectorPaneAutohidden: Bool {
    get {return _inspectorPaneAutohidden ?? false}
    set {_inspectorPaneAutohidden = newValue}
  }
  /// Returns true if `inspectorPaneAutohidden` has been explicitly set.
  var hasInspectorPaneAutohidden: Bool {return self._inspectorPaneAutohidden != nil}
  /// Clears the value of `inspectorPaneAutohidden`. Subsequent reads from it will return its default value.
  mutating func clearInspectorPaneAutohidden() {self._inspectorPaneAutohidden = nil}

  var elementListVisible: Bool {
    get {return _elementListVisible ?? false}
    set {_elementListVisible = newValue}
  }
  /// Returns true if `elementListVisible` has been explicitly set.
  var hasElementListVisible: Bool {return self._elementListVisible != nil}
  /// Clears the value of `elementListVisible`. Subsequent reads from it will return its default value.
  mutating func clearElementListVisible() {self._elementListVisible = nil}

  var activityStreamVisible: Bool {
    get {return _activityStreamVisible ?? false}
    set {_activityStreamVisible = newValue}
  }
  /// Returns true if `activityStreamVisible` has been explicitly set.
  var hasActivityStreamVisible: Bool {return self._activityStreamVisible != nil}
  /// Clears the value of `activityStreamVisible`. Subsequent reads from it will return its default value.
  mutating func clearActivityStreamVisible() {self._activityStreamVisible = nil}

  var activityStreamWasVisible: Bool {
    get {return _activityStreamWasVisible ?? false}
    set {_activityStreamWasVisible = newValue}
  }
  /// Returns true if `activityStreamWasVisible` has been explicitly set.
  var hasActivityStreamWasVisible: Bool {return self._activityStreamWasVisible != nil}
  /// Clears the value of `activityStreamWasVisible`. Subsequent reads from it will return its default value.
  mutating func clearActivityStreamWasVisible() {self._activityStreamWasVisible = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum SidebarViewMode: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case kSidebarViewModeNavigator = 0
    case kSidebarViewModeOutline = 1

    init() {
      self = .kSidebarViewModeNavigator
    }

  }

  enum InspectorPaneViewMode: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case kInspectorPaneViewModeFormat = 0
    case kInspectorPaneViewModeAnimate = 1
    case kInspectorPaneViewModeSetup = 2

    init() {
      self = .kInspectorPaneViewModeFormat
    }

  }

  init() {}

  fileprivate var _sidebarVisible: Bool? = nil
  fileprivate var _sidebarViewMode: KN_DesktopUILayoutArchive.SidebarViewMode? = nil
  fileprivate var _notesVisible: Bool? = nil
  fileprivate var _lightTableVisible: Bool? = nil
  fileprivate var _inspectorPaneVisible: Bool? = nil
  fileprivate var _inspectorPaneViewMode: KN_DesktopUILayoutArchive.InspectorPaneViewMode? = nil
  fileprivate var _showingTemplateSlides: Bool? = nil
  fileprivate var _inspectorPaneAutohidden: Bool? = nil
  fileprivate var _elementListVisible: Bool? = nil
  fileprivate var _activityStreamVisible: Bool? = nil
  fileprivate var _activityStreamWasVisible: Bool? = nil
}

struct KN_UIStateArchive: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// NOTE: This field was marked as deprecated in the .proto file.
  var slideNodeToEdit: TSP_Reference {
    get {return _storage._slideNodeToEdit ?? TSP_Reference()}
    set {_uniqueStorage()._slideNodeToEdit = newValue}
  }
  /// Returns true if `slideNodeToEdit` has been explicitly set.
  var hasSlideNodeToEdit: Bool {return _storage._slideNodeToEdit != nil}
  /// Clears the value of `slideNodeToEdit`. Subsequent reads from it will return its default value.
  mutating func clearSlideNodeToEdit() {_uniqueStorage()._slideNodeToEdit = nil}

  var deprecatedTemplateSlideNodeToApply: TSP_Reference {
    get {return _storage._deprecatedTemplateSlideNodeToApply ?? TSP_Reference()}
    set {_uniqueStorage()._deprecatedTemplateSlideNodeToApply = newValue}
  }
  /// Returns true if `deprecatedTemplateSlideNodeToApply` has been explicitly set.
  var hasDeprecatedTemplateSlideNodeToApply: Bool {return _storage._deprecatedTemplateSlideNodeToApply != nil}
  /// Clears the value of `deprecatedTemplateSlideNodeToApply`. Subsequent reads from it will return its default value.
  mutating func clearDeprecatedTemplateSlideNodeToApply() {_uniqueStorage()._deprecatedTemplateSlideNodeToApply = nil}

  var deprecatedSlideThumbnailSize: TSP_Size {
    get {return _storage._deprecatedSlideThumbnailSize ?? TSP_Size()}
    set {_uniqueStorage()._deprecatedSlideThumbnailSize = newValue}
  }
  /// Returns true if `deprecatedSlideThumbnailSize` has been explicitly set.
  var hasDeprecatedSlideThumbnailSize: Bool {return _storage._deprecatedSlideThumbnailSize != nil}
  /// Clears the value of `deprecatedSlideThumbnailSize`. Subsequent reads from it will return its default value.
  mutating func clearDeprecatedSlideThumbnailSize() {_uniqueStorage()._deprecatedSlideThumbnailSize = nil}

  var canvasViewScale: Float {
    get {return _storage._canvasViewScale ?? 0}
    set {_uniqueStorage()._canvasViewScale = newValue}
  }
  /// Returns true if `canvasViewScale` has been explicitly set.
  var hasCanvasViewScale: Bool {return _storage._canvasViewScale != nil}
  /// Clears the value of `canvasViewScale`. Subsequent reads from it will return its default value.
  mutating func clearCanvasViewScale() {_uniqueStorage()._canvasViewScale = nil}

  var canvasOffset: TSP_Point {
    get {return _storage._canvasOffset ?? TSP_Point()}
    set {_uniqueStorage()._canvasOffset = newValue}
  }
  /// Returns true if `canvasOffset` has been explicitly set.
  var hasCanvasOffset: Bool {return _storage._canvasOffset != nil}
  /// Clears the value of `canvasOffset`. Subsequent reads from it will return its default value.
  mutating func clearCanvasOffset() {_uniqueStorage()._canvasOffset = nil}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var selectedSlideNodes: [TSP_Reference] {
    get {return _storage._selectedSlideNodes}
    set {_uniqueStorage()._selectedSlideNodes = newValue}
  }

  /// NOTE: This field was marked as deprecated in the .proto file.
  var iPhoneCanvasViewScale: Float {
    get {return _storage._iPhoneCanvasViewScale ?? 0}
    set {_uniqueStorage()._iPhoneCanvasViewScale = newValue}
  }
  /// Returns true if `iPhoneCanvasViewScale` has been explicitly set.
  var hasIPhoneCanvasViewScale: Bool {return _storage._iPhoneCanvasViewScale != nil}
  /// Clears the value of `iPhoneCanvasViewScale`. Subsequent reads from it will return its default value.
  mutating func clearIPhoneCanvasViewScale() {_uniqueStorage()._iPhoneCanvasViewScale = nil}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var iPhoneCanvasOffset: TSP_Point {
    get {return _storage._iPhoneCanvasOffset ?? TSP_Point()}
    set {_uniqueStorage()._iPhoneCanvasOffset = newValue}
  }
  /// Returns true if `iPhoneCanvasOffset` has been explicitly set.
  var hasIPhoneCanvasOffset: Bool {return _storage._iPhoneCanvasOffset != nil}
  /// Clears the value of `iPhoneCanvasOffset`. Subsequent reads from it will return its default value.
  mutating func clearIPhoneCanvasOffset() {_uniqueStorage()._iPhoneCanvasOffset = nil}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var iPhone568CanvasViewScale: Float {
    get {return _storage._iPhone568CanvasViewScale ?? 0}
    set {_uniqueStorage()._iPhone568CanvasViewScale = newValue}
  }
  /// Returns true if `iPhone568CanvasViewScale` has been explicitly set.
  var hasIPhone568CanvasViewScale: Bool {return _storage._iPhone568CanvasViewScale != nil}
  /// Clears the value of `iPhone568CanvasViewScale`. Subsequent reads from it will return its default value.
  mutating func clearIPhone568CanvasViewScale() {_uniqueStorage()._iPhone568CanvasViewScale = nil}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var iPhone568CanvasOffset: TSP_Point {
    get {return _storage._iPhone568CanvasOffset ?? TSP_Point()}
    set {_uniqueStorage()._iPhone568CanvasOffset = newValue}
  }
  /// Returns true if `iPhone568CanvasOffset` has been explicitly set.
  var hasIPhone568CanvasOffset: Bool {return _storage._iPhone568CanvasOffset != nil}
  /// Clears the value of `iPhone568CanvasOffset`. Subsequent reads from it will return its default value.
  mutating func clearIPhone568CanvasOffset() {_uniqueStorage()._iPhone568CanvasOffset = nil}

  var desktopUiLayout: TSP_Reference {
    get {return _storage._desktopUiLayout ?? TSP_Reference()}
    set {_uniqueStorage()._desktopUiLayout = newValue}
  }
  /// Returns true if `desktopUiLayout` has been explicitly set.
  var hasDesktopUiLayout: Bool {return _storage._desktopUiLayout != nil}
  /// Clears the value of `desktopUiLayout`. Subsequent reads from it will return its default value.
  mutating func clearDesktopUiLayout() {_uniqueStorage()._desktopUiLayout = nil}

  var desktopSlideViewContentFitsWindow: Bool {
    get {return _storage._desktopSlideViewContentFitsWindow ?? false}
    set {_uniqueStorage()._desktopSlideViewContentFitsWindow = newValue}
  }
  /// Returns true if `desktopSlideViewContentFitsWindow` has been explicitly set.
  var hasDesktopSlideViewContentFitsWindow: Bool {return _storage._desktopSlideViewContentFitsWindow != nil}
  /// Clears the value of `desktopSlideViewContentFitsWindow`. Subsequent reads from it will return its default value.
  mutating func clearDesktopSlideViewContentFitsWindow() {_uniqueStorage()._desktopSlideViewContentFitsWindow = nil}

  var desktopCanvasViewScale: Float {
    get {return _storage._desktopCanvasViewScale ?? 0}
    set {_uniqueStorage()._desktopCanvasViewScale = newValue}
  }
  /// Returns true if `desktopCanvasViewScale` has been explicitly set.
  var hasDesktopCanvasViewScale: Bool {return _storage._desktopCanvasViewScale != nil}
  /// Clears the value of `desktopCanvasViewScale`. Subsequent reads from it will return its default value.
  mutating func clearDesktopCanvasViewScale() {_uniqueStorage()._desktopCanvasViewScale = nil}

  var desktopCanvasOffset: TSP_Point {
    get {return _storage._desktopCanvasOffset ?? TSP_Point()}
    set {_uniqueStorage()._desktopCanvasOffset = newValue}
  }
  /// Returns true if `desktopCanvasOffset` has been explicitly set.
  var hasDesktopCanvasOffset: Bool {return _storage._desktopCanvasOffset != nil}
  /// Clears the value of `desktopCanvasOffset`. Subsequent reads from it will return its default value.
  mutating func clearDesktopCanvasOffset() {_uniqueStorage()._desktopCanvasOffset = nil}

  var lightTableZoomScale: Float {
    get {return _storage._lightTableZoomScale ?? 0}
    set {_uniqueStorage()._lightTableZoomScale = newValue}
  }
  /// Returns true if `lightTableZoomScale` has been explicitly set.
  var hasLightTableZoomScale: Bool {return _storage._lightTableZoomScale != nil}
  /// Clears the value of `lightTableZoomScale`. Subsequent reads from it will return its default value.
  mutating func clearLightTableZoomScale() {_uniqueStorage()._lightTableZoomScale = nil}

  var chartUiState: [TSCH_ChartUIState] {
    get {return _storage._chartUiState}
    set {_uniqueStorage()._chartUiState = newValue}
  }

  var showSlideGuides: Bool {
    get {return _storage._showSlideGuides ?? false}
    set {_uniqueStorage()._showSlideGuides = newValue}
  }
  /// Returns true if `showSlideGuides` has been explicitly set.
  var hasShowSlideGuides: Bool {return _storage._showSlideGuides != nil}
  /// Clears the value of `showSlideGuides`. Subsequent reads from it will return its default value.
  mutating func clearShowSlideGuides() {_uniqueStorage()._showSlideGuides = nil}

  var showTemplateGuides: Bool {
    get {return _storage._showTemplateGuides ?? false}
    set {_uniqueStorage()._showTemplateGuides = newValue}
  }
  /// Returns true if `showTemplateGuides` has been explicitly set.
  var hasShowTemplateGuides: Bool {return _storage._showTemplateGuides != nil}
  /// Clears the value of `showTemplateGuides`. Subsequent reads from it will return its default value.
  mutating func clearShowTemplateGuides() {_uniqueStorage()._showTemplateGuides = nil}

  var showsComments: Bool {
    get {return _storage._showsComments ?? false}
    set {_uniqueStorage()._showsComments = newValue}
  }
  /// Returns true if `showsComments` has been explicitly set.
  var hasShowsComments: Bool {return _storage._showsComments != nil}
  /// Clears the value of `showsComments`. Subsequent reads from it will return its default value.
  mutating func clearShowsComments() {_uniqueStorage()._showsComments = nil}

  var commentsPrintingToggleEnabled: Bool {
    get {return _storage._commentsPrintingToggleEnabled ?? false}
    set {_uniqueStorage()._commentsPrintingToggleEnabled = newValue}
  }
  /// Returns true if `commentsPrintingToggleEnabled` has been explicitly set.
  var hasCommentsPrintingToggleEnabled: Bool {return _storage._commentsPrintingToggleEnabled != nil}
  /// Clears the value of `commentsPrintingToggleEnabled`. Subsequent reads from it will return its default value.
  mutating func clearCommentsPrintingToggleEnabled() {_uniqueStorage()._commentsPrintingToggleEnabled = nil}

  var collapsedSlideNodes: [TSP_Reference] {
    get {return _storage._collapsedSlideNodes}
    set {_uniqueStorage()._collapsedSlideNodes = newValue}
  }

  var outlineCollapsedSlideNodes: [TSP_Reference] {
    get {return _storage._outlineCollapsedSlideNodes}
    set {_uniqueStorage()._outlineCollapsedSlideNodes = newValue}
  }

  var outlineHasBodySlideNodes: [TSP_Reference] {
    get {return _storage._outlineHasBodySlideNodes}
    set {_uniqueStorage()._outlineHasBodySlideNodes = newValue}
  }

  var showsRuler: Bool {
    get {return _storage._showsRuler ?? false}
    set {_uniqueStorage()._showsRuler = newValue}
  }
  /// Returns true if `showsRuler` has been explicitly set.
  var hasShowsRuler: Bool {return _storage._showsRuler != nil}
  /// Clears the value of `showsRuler`. Subsequent reads from it will return its default value.
  mutating func clearShowsRuler() {_uniqueStorage()._showsRuler = nil}

  var desktopNavigatorViewWidth: Float {
    get {return _storage._desktopNavigatorViewWidth ?? 0}
    set {_uniqueStorage()._desktopNavigatorViewWidth = newValue}
  }
  /// Returns true if `desktopNavigatorViewWidth` has been explicitly set.
  var hasDesktopNavigatorViewWidth: Bool {return _storage._desktopNavigatorViewWidth != nil}
  /// Clears the value of `desktopNavigatorViewWidth`. Subsequent reads from it will return its default value.
  mutating func clearDesktopNavigatorViewWidth() {_uniqueStorage()._desktopNavigatorViewWidth = nil}

  var desktopOutlineViewWidth: Float {
    get {return _storage._desktopOutlineViewWidth ?? 0}
    set {_uniqueStorage()._desktopOutlineViewWidth = newValue}
  }
  /// Returns true if `desktopOutlineViewWidth` has been explicitly set.
  var hasDesktopOutlineViewWidth: Bool {return _storage._desktopOutlineViewWidth != nil}
  /// Clears the value of `desktopOutlineViewWidth`. Subsequent reads from it will return its default value.
  mutating func clearDesktopOutlineViewWidth() {_uniqueStorage()._desktopOutlineViewWidth = nil}

  var desktopOutlineViewDefaultFixed: Bool {
    get {return _storage._desktopOutlineViewDefaultFixed ?? false}
    set {_uniqueStorage()._desktopOutlineViewDefaultFixed = newValue}
  }
  /// Returns true if `desktopOutlineViewDefaultFixed` has been explicitly set.
  var hasDesktopOutlineViewDefaultFixed: Bool {return _storage._desktopOutlineViewDefaultFixed != nil}
  /// Clears the value of `desktopOutlineViewDefaultFixed`. Subsequent reads from it will return its default value.
  mutating func clearDesktopOutlineViewDefaultFixed() {_uniqueStorage()._desktopOutlineViewDefaultFixed = nil}

  var desktopMainContentSize: TSP_Size {
    get {return _storage._desktopMainContentSize ?? TSP_Size()}
    set {_uniqueStorage()._desktopMainContentSize = newValue}
  }
  /// Returns true if `desktopMainContentSize` has been explicitly set.
  var hasDesktopMainContentSize: Bool {return _storage._desktopMainContentSize != nil}
  /// Clears the value of `desktopMainContentSize`. Subsequent reads from it will return its default value.
  mutating func clearDesktopMainContentSize() {_uniqueStorage()._desktopMainContentSize = nil}

  var desktopPresenterNotesViewHeight: Float {
    get {return _storage._desktopPresenterNotesViewHeight ?? 0}
    set {_uniqueStorage()._desktopPresenterNotesViewHeight = newValue}
  }
  /// Returns true if `desktopPresenterNotesViewHeight` has been explicitly set.
  var hasDesktopPresenterNotesViewHeight: Bool {return _storage._desktopPresenterNotesViewHeight != nil}
  /// Clears the value of `desktopPresenterNotesViewHeight`. Subsequent reads from it will return its default value.
  mutating func clearDesktopPresenterNotesViewHeight() {_uniqueStorage()._desktopPresenterNotesViewHeight = nil}

  var desktopMainWindowOrigin: TSP_Point {
    get {return _storage._desktopMainWindowOrigin ?? TSP_Point()}
    set {_uniqueStorage()._desktopMainWindowOrigin = newValue}
  }
  /// Returns true if `desktopMainWindowOrigin` has been explicitly set.
  var hasDesktopMainWindowOrigin: Bool {return _storage._desktopMainWindowOrigin != nil}
  /// Clears the value of `desktopMainWindowOrigin`. Subsequent reads from it will return its default value.
  mutating func clearDesktopMainWindowOrigin() {_uniqueStorage()._desktopMainWindowOrigin = nil}

  var lightTableHidesSkippedSlides: Bool {
    get {return _storage._lightTableHidesSkippedSlides ?? false}
    set {_uniqueStorage()._lightTableHidesSkippedSlides = newValue}
  }
  /// Returns true if `lightTableHidesSkippedSlides` has been explicitly set.
  var hasLightTableHidesSkippedSlides: Bool {return _storage._lightTableHidesSkippedSlides != nil}
  /// Clears the value of `lightTableHidesSkippedSlides`. Subsequent reads from it will return its default value.
  mutating func clearLightTableHidesSkippedSlides() {_uniqueStorage()._lightTableHidesSkippedSlides = nil}

  var selectionPath: TSK_SelectionPathArchive {
    get {return _storage._selectionPath ?? TSK_SelectionPathArchive()}
    set {_uniqueStorage()._selectionPath = newValue}
  }
  /// Returns true if `selectionPath` has been explicitly set.
  var hasSelectionPath: Bool {return _storage._selectionPath != nil}
  /// Clears the value of `selectionPath`. Subsequent reads from it will return its default value.
  mutating func clearSelectionPath() {_uniqueStorage()._selectionPath = nil}

  var desktopElementListViewWidth: Float {
    get {return _storage._desktopElementListViewWidth ?? 0}
    set {_uniqueStorage()._desktopElementListViewWidth = newValue}
  }
  /// Returns true if `desktopElementListViewWidth` has been explicitly set.
  var hasDesktopElementListViewWidth: Bool {return _storage._desktopElementListViewWidth != nil}
  /// Clears the value of `desktopElementListViewWidth`. Subsequent reads from it will return its default value.
  mutating func clearDesktopElementListViewWidth() {_uniqueStorage()._desktopElementListViewWidth = nil}

  var elementListExpandedGroups: [TSP_Reference] {
    get {return _storage._elementListExpandedGroups}
    set {_uniqueStorage()._elementListExpandedGroups = newValue}
  }

  var showsMobileLightTable: Bool {
    get {return _storage._showsMobileLightTable ?? false}
    set {_uniqueStorage()._showsMobileLightTable = newValue}
  }
  /// Returns true if `showsMobileLightTable` has been explicitly set.
  var hasShowsMobileLightTable: Bool {return _storage._showsMobileLightTable != nil}
  /// Clears the value of `showsMobileLightTable`. Subsequent reads from it will return its default value.
  mutating func clearShowsMobileLightTable() {_uniqueStorage()._showsMobileLightTable = nil}

  var mobileLightTableZoomScale: Float {
    get {return _storage._mobileLightTableZoomScale ?? 0}
    set {_uniqueStorage()._mobileLightTableZoomScale = newValue}
  }
  /// Returns true if `mobileLightTableZoomScale` has been explicitly set.
  var hasMobileLightTableZoomScale: Bool {return _storage._mobileLightTableZoomScale != nil}
  /// Clears the value of `mobileLightTableZoomScale`. Subsequent reads from it will return its default value.
  mutating func clearMobileLightTableZoomScale() {_uniqueStorage()._mobileLightTableZoomScale = nil}

  var mobileLightTableHidesSkippedSlides: Bool {
    get {return _storage._mobileLightTableHidesSkippedSlides ?? false}
    set {_uniqueStorage()._mobileLightTableHidesSkippedSlides = newValue}
  }
  /// Returns true if `mobileLightTableHidesSkippedSlides` has been explicitly set.
  var hasMobileLightTableHidesSkippedSlides: Bool {return _storage._mobileLightTableHidesSkippedSlides != nil}
  /// Clears the value of `mobileLightTableHidesSkippedSlides`. Subsequent reads from it will return its default value.
  mutating func clearMobileLightTableHidesSkippedSlides() {_uniqueStorage()._mobileLightTableHidesSkippedSlides = nil}

  var freehandDrawingToolkitState: TSP_Reference {
    get {return _storage._freehandDrawingToolkitState ?? TSP_Reference()}
    set {_uniqueStorage()._freehandDrawingToolkitState = newValue}
  }
  /// Returns true if `freehandDrawingToolkitState` has been explicitly set.
  var hasFreehandDrawingToolkitState: Bool {return _storage._freehandDrawingToolkitState != nil}
  /// Clears the value of `freehandDrawingToolkitState`. Subsequent reads from it will return its default value.
  mutating func clearFreehandDrawingToolkitState() {_uniqueStorage()._freehandDrawingToolkitState = nil}

  var selectionPathTransformer: TSP_Reference {
    get {return _storage._selectionPathTransformer ?? TSP_Reference()}
    set {_uniqueStorage()._selectionPathTransformer = newValue}
  }
  /// Returns true if `selectionPathTransformer` has been explicitly set.
  var hasSelectionPathTransformer: Bool {return _storage._selectionPathTransformer != nil}
  /// Clears the value of `selectionPathTransformer`. Subsequent reads from it will return its default value.
  mutating func clearSelectionPathTransformer() {_uniqueStorage()._selectionPathTransformer = nil}

  var showsMobileOutline: Bool {
    get {return _storage._showsMobileOutline ?? false}
    set {_uniqueStorage()._showsMobileOutline = newValue}
  }
  /// Returns true if `showsMobileOutline` has been explicitly set.
  var hasShowsMobileOutline: Bool {return _storage._showsMobileOutline != nil}
  /// Clears the value of `showsMobileOutline`. Subsequent reads from it will return its default value.
  mutating func clearShowsMobileOutline() {_uniqueStorage()._showsMobileOutline = nil}

  var editingDisabled: Bool {
    get {return _storage._editingDisabled ?? false}
    set {_uniqueStorage()._editingDisabled = newValue}
  }
  /// Returns true if `editingDisabled` has been explicitly set.
  var hasEditingDisabled: Bool {return _storage._editingDisabled != nil}
  /// Clears the value of `editingDisabled`. Subsequent reads from it will return its default value.
  mutating func clearEditingDisabled() {_uniqueStorage()._editingDisabled = nil}

  var desktopActivityStreamViewWidth: Float {
    get {return _storage._desktopActivityStreamViewWidth ?? 0}
    set {_uniqueStorage()._desktopActivityStreamViewWidth = newValue}
  }
  /// Returns true if `desktopActivityStreamViewWidth` has been explicitly set.
  var hasDesktopActivityStreamViewWidth: Bool {return _storage._desktopActivityStreamViewWidth != nil}
  /// Clears the value of `desktopActivityStreamViewWidth`. Subsequent reads from it will return its default value.
  mutating func clearDesktopActivityStreamViewWidth() {_uniqueStorage()._desktopActivityStreamViewWidth = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct KN_IOSRestorableViewStateRootArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var savedPlaybackState: KN_IOSSavedPlaybackStateArchive {
    get {return _savedPlaybackState ?? KN_IOSSavedPlaybackStateArchive()}
    set {_savedPlaybackState = newValue}
  }
  /// Returns true if `savedPlaybackState` has been explicitly set.
  var hasSavedPlaybackState: Bool {return self._savedPlaybackState != nil}
  /// Clears the value of `savedPlaybackState`. Subsequent reads from it will return its default value.
  mutating func clearSavedPlaybackState() {self._savedPlaybackState = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _savedPlaybackState: KN_IOSSavedPlaybackStateArchive? = nil
}

struct KN_IOSSavedPlaybackStateArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var presentationType: KN_IOSSavedPlaybackStateArchive.PresentationType {
    get {return _presentationType ?? .manual}
    set {_presentationType = newValue}
  }
  /// Returns true if `presentationType` has been explicitly set.
  var hasPresentationType: Bool {return self._presentationType != nil}
  /// Clears the value of `presentationType`. Subsequent reads from it will return its default value.
  mutating func clearPresentationType() {self._presentationType = nil}

  var slideNodeIndex: UInt32 {
    get {return _slideNodeIndex ?? 0}
    set {_slideNodeIndex = newValue}
  }
  /// Returns true if `slideNodeIndex` has been explicitly set.
  var hasSlideNodeIndex: Bool {return self._slideNodeIndex != nil}
  /// Clears the value of `slideNodeIndex`. Subsequent reads from it will return its default value.
  mutating func clearSlideNodeIndex() {self._slideNodeIndex = nil}

  var eventIndex: UInt32 {
    get {return _eventIndex ?? 0}
    set {_eventIndex = newValue}
  }
  /// Returns true if `eventIndex` has been explicitly set.
  var hasEventIndex: Bool {return self._eventIndex != nil}
  /// Clears the value of `eventIndex`. Subsequent reads from it will return its default value.
  mutating func clearEventIndex() {self._eventIndex = nil}

  var breadcrumbTrail: [String] = []

  var hadExternalDisplay: Bool {
    get {return _hadExternalDisplay ?? false}
    set {_hadExternalDisplay = newValue}
  }
  /// Returns true if `hadExternalDisplay` has been explicitly set.
  var hasHadExternalDisplay: Bool {return self._hadExternalDisplay != nil}
  /// Clears the value of `hadExternalDisplay`. Subsequent reads from it will return its default value.
  mutating func clearHadExternalDisplay() {self._hadExternalDisplay = nil}

  var isElapsedTimeStarted: Bool {
    get {return _isElapsedTimeStarted ?? false}
    set {_isElapsedTimeStarted = newValue}
  }
  /// Returns true if `isElapsedTimeStarted` has been explicitly set.
  var hasIsElapsedTimeStarted: Bool {return self._isElapsedTimeStarted != nil}
  /// Clears the value of `isElapsedTimeStarted`. Subsequent reads from it will return its default value.
  mutating func clearIsElapsedTimeStarted() {self._isElapsedTimeStarted = nil}

  var elapsedTimeStartTime: Double {
    get {return _elapsedTimeStartTime ?? 0}
    set {_elapsedTimeStartTime = newValue}
  }
  /// Returns true if `elapsedTimeStartTime` has been explicitly set.
  var hasElapsedTimeStartTime: Bool {return self._elapsedTimeStartTime != nil}
  /// Clears the value of `elapsedTimeStartTime`. Subsequent reads from it will return its default value.
  mutating func clearElapsedTimeStartTime() {self._elapsedTimeStartTime = nil}

  var recordingPlaybackCurrentTime: Double {
    get {return _recordingPlaybackCurrentTime ?? 0}
    set {_recordingPlaybackCurrentTime = newValue}
  }
  /// Returns true if `recordingPlaybackCurrentTime` has been explicitly set.
  var hasRecordingPlaybackCurrentTime: Bool {return self._recordingPlaybackCurrentTime != nil}
  /// Clears the value of `recordingPlaybackCurrentTime`. Subsequent reads from it will return its default value.
  mutating func clearRecordingPlaybackCurrentTime() {self._recordingPlaybackCurrentTime = nil}

  var shouldShowSlideNavigator: Bool {
    get {return _shouldShowSlideNavigator ?? false}
    set {_shouldShowSlideNavigator = newValue}
  }
  /// Returns true if `shouldShowSlideNavigator` has been explicitly set.
  var hasShouldShowSlideNavigator: Bool {return self._shouldShowSlideNavigator != nil}
  /// Clears the value of `shouldShowSlideNavigator`. Subsequent reads from it will return its default value.
  mutating func clearShouldShowSlideNavigator() {self._shouldShowSlideNavigator = nil}

  var isMultiPresenterShow: Bool {
    get {return _isMultiPresenterShow ?? false}
    set {_isMultiPresenterShow = newValue}
  }
  /// Returns true if `isMultiPresenterShow` has been explicitly set.
  var hasIsMultiPresenterShow: Bool {return self._isMultiPresenterShow != nil}
  /// Clears the value of `isMultiPresenterShow`. Subsequent reads from it will return its default value.
  mutating func clearIsMultiPresenterShow() {self._isMultiPresenterShow = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum PresentationType: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case manual = 1
    case record = 2
    case playRecording = 3
    case rehearse = 4
    case showcastDeprecated = 5

    init() {
      self = .manual
    }

  }

  init() {}

  fileprivate var _presentationType: KN_IOSSavedPlaybackStateArchive.PresentationType? = nil
  fileprivate var _slideNodeIndex: UInt32? = nil
  fileprivate var _eventIndex: UInt32? = nil
  fileprivate var _hadExternalDisplay: Bool? = nil
  fileprivate var _isElapsedTimeStarted: Bool? = nil
  fileprivate var _elapsedTimeStartTime: Double? = nil
  fileprivate var _recordingPlaybackCurrentTime: Double? = nil
  fileprivate var _shouldShowSlideNavigator: Bool? = nil
  fileprivate var _isMultiPresenterShow: Bool? = nil
}

struct KN_CanvasSelectionArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var infos: [TSP_Reference] = []

  var nonInteractiveInfos: [TSP_Reference] = []

  var infosForActionGhostIndexes: [TSP_Reference] = []

  var actionGhostIndexes: [TSP_IndexSet] = []

  var buildChunks: [TSP_Reference] = []

  /// NOTE: This field was marked as deprecated in the .proto file.
  var databaseActionGhostIndexes: [UInt32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct KN_ActionGhostSelectionArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct KN_ThemeCustomTimingCurveArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  var curve: TSD_PathSourceArchive {
    get {return _curve ?? TSD_PathSourceArchive()}
    set {_curve = newValue}
  }
  /// Returns true if `curve` has been explicitly set.
  var hasCurve: Bool {return self._curve != nil}
  /// Clears the value of `curve`. Subsequent reads from it will return its default value.
  mutating func clearCurve() {self._curve = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _name: String? = nil
  fileprivate var _curve: TSD_PathSourceArchive? = nil
}

struct KN_ThemeArchive: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSS_ThemeArchive {
    get {return _storage._super ?? TSS_ThemeArchive()}
    set {_uniqueStorage()._super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return _storage._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {_uniqueStorage()._super = nil}

  var templates: [TSP_Reference] {
    get {return _storage._templates}
    set {_uniqueStorage()._templates = newValue}
  }

  var uuid: String {
    get {return _storage._uuid ?? String()}
    set {_uniqueStorage()._uuid = newValue}
  }
  /// Returns true if `uuid` has been explicitly set.
  var hasUuid: Bool {return _storage._uuid != nil}
  /// Clears the value of `uuid`. Subsequent reads from it will return its default value.
  mutating func clearUuid() {_uniqueStorage()._uuid = nil}

  var classicThemeRecords: [TSP_Reference] {
    get {return _storage._classicThemeRecords}
    set {_uniqueStorage()._classicThemeRecords = newValue}
  }

  var defaultTemplateSlideNode: TSP_Reference {
    get {return _storage._defaultTemplateSlideNode ?? TSP_Reference()}
    set {_uniqueStorage()._defaultTemplateSlideNode = newValue}
  }
  /// Returns true if `defaultTemplateSlideNode` has been explicitly set.
  var hasDefaultTemplateSlideNode: Bool {return _storage._defaultTemplateSlideNode != nil}
  /// Clears the value of `defaultTemplateSlideNode`. Subsequent reads from it will return its default value.
  mutating func clearDefaultTemplateSlideNode() {_uniqueStorage()._defaultTemplateSlideNode = nil}

  var defaultTemplateSlideNodeReference: TSP_Reference {
    get {return _storage._defaultTemplateSlideNodeReference ?? TSP_Reference()}
    set {_uniqueStorage()._defaultTemplateSlideNodeReference = newValue}
  }
  /// Returns true if `defaultTemplateSlideNodeReference` has been explicitly set.
  var hasDefaultTemplateSlideNodeReference: Bool {return _storage._defaultTemplateSlideNodeReference != nil}
  /// Clears the value of `defaultTemplateSlideNodeReference`. Subsequent reads from it will return its default value.
  mutating func clearDefaultTemplateSlideNodeReference() {_uniqueStorage()._defaultTemplateSlideNodeReference = nil}

  var defaultTemplateSlideNodeIsOurBestGuess: Bool {
    get {return _storage._defaultTemplateSlideNodeIsOurBestGuess ?? false}
    set {_uniqueStorage()._defaultTemplateSlideNodeIsOurBestGuess = newValue}
  }
  /// Returns true if `defaultTemplateSlideNodeIsOurBestGuess` has been explicitly set.
  var hasDefaultTemplateSlideNodeIsOurBestGuess: Bool {return _storage._defaultTemplateSlideNodeIsOurBestGuess != nil}
  /// Clears the value of `defaultTemplateSlideNodeIsOurBestGuess`. Subsequent reads from it will return its default value.
  mutating func clearDefaultTemplateSlideNodeIsOurBestGuess() {_uniqueStorage()._defaultTemplateSlideNodeIsOurBestGuess = nil}

  var customEffectTimingCurves: [KN_ThemeCustomTimingCurveArchive] {
    get {return _storage._customEffectTimingCurves}
    set {_uniqueStorage()._customEffectTimingCurves = newValue}
  }

  var liveVideoSourceCollection: TSP_Reference {
    get {return _storage._liveVideoSourceCollection ?? TSP_Reference()}
    set {_uniqueStorage()._liveVideoSourceCollection = newValue}
  }
  /// Returns true if `liveVideoSourceCollection` has been explicitly set.
  var hasLiveVideoSourceCollection: Bool {return _storage._liveVideoSourceCollection != nil}
  /// Clears the value of `liveVideoSourceCollection`. Subsequent reads from it will return its default value.
  mutating func clearLiveVideoSourceCollection() {_uniqueStorage()._liveVideoSourceCollection = nil}

  var motionBackgroundStylePresets: [TSP_Reference] {
    get {return _storage._motionBackgroundStylePresets}
    set {_uniqueStorage()._motionBackgroundStylePresets = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct KN_SlideTreeArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// NOTE: This field was marked as deprecated in the .proto file.
  var rootSlideNode: TSP_Reference {
    get {return _rootSlideNode ?? TSP_Reference()}
    set {_rootSlideNode = newValue}
  }
  /// Returns true if `rootSlideNode` has been explicitly set.
  var hasRootSlideNode: Bool {return self._rootSlideNode != nil}
  /// Clears the value of `rootSlideNode`. Subsequent reads from it will return its default value.
  mutating func clearRootSlideNode() {self._rootSlideNode = nil}

  var slides: [TSP_Reference] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _rootSlideNode: TSP_Reference? = nil
}

struct KN_ShowArchive: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uiState: TSP_Reference {
    get {return _storage._uiState ?? TSP_Reference()}
    set {_uniqueStorage()._uiState = newValue}
  }
  /// Returns true if `uiState` has been explicitly set.
  var hasUiState: Bool {return _storage._uiState != nil}
  /// Clears the value of `uiState`. Subsequent reads from it will return its default value.
  mutating func clearUiState() {_uniqueStorage()._uiState = nil}

  var theme: TSP_Reference {
    get {return _storage._theme ?? TSP_Reference()}
    set {_uniqueStorage()._theme = newValue}
  }
  /// Returns true if `theme` has been explicitly set.
  var hasTheme: Bool {return _storage._theme != nil}
  /// Clears the value of `theme`. Subsequent reads from it will return its default value.
  mutating func clearTheme() {_uniqueStorage()._theme = nil}

  var slideTree: KN_SlideTreeArchive {
    get {return _storage._slideTree ?? KN_SlideTreeArchive()}
    set {_uniqueStorage()._slideTree = newValue}
  }
  /// Returns true if `slideTree` has been explicitly set.
  var hasSlideTree: Bool {return _storage._slideTree != nil}
  /// Clears the value of `slideTree`. Subsequent reads from it will return its default value.
  mutating func clearSlideTree() {_uniqueStorage()._slideTree = nil}

  var size: TSP_Size {
    get {return _storage._size ?? TSP_Size()}
    set {_uniqueStorage()._size = newValue}
  }
  /// Returns true if `size` has been explicitly set.
  var hasSize: Bool {return _storage._size != nil}
  /// Clears the value of `size`. Subsequent reads from it will return its default value.
  mutating func clearSize() {_uniqueStorage()._size = nil}

  var stylesheet: TSP_Reference {
    get {return _storage._stylesheet ?? TSP_Reference()}
    set {_uniqueStorage()._stylesheet = newValue}
  }
  /// Returns true if `stylesheet` has been explicitly set.
  var hasStylesheet: Bool {return _storage._stylesheet != nil}
  /// Clears the value of `stylesheet`. Subsequent reads from it will return its default value.
  mutating func clearStylesheet() {_uniqueStorage()._stylesheet = nil}

  var slideNumbersVisible: Bool {
    get {return _storage._slideNumbersVisible ?? false}
    set {_uniqueStorage()._slideNumbersVisible = newValue}
  }
  /// Returns true if `slideNumbersVisible` has been explicitly set.
  var hasSlideNumbersVisible: Bool {return _storage._slideNumbersVisible != nil}
  /// Clears the value of `slideNumbersVisible`. Subsequent reads from it will return its default value.
  mutating func clearSlideNumbersVisible() {_uniqueStorage()._slideNumbersVisible = nil}

  var recording: TSP_Reference {
    get {return _storage._recording ?? TSP_Reference()}
    set {_uniqueStorage()._recording = newValue}
  }
  /// Returns true if `recording` has been explicitly set.
  var hasRecording: Bool {return _storage._recording != nil}
  /// Clears the value of `recording`. Subsequent reads from it will return its default value.
  mutating func clearRecording() {_uniqueStorage()._recording = nil}

  var loopPresentation: Bool {
    get {return _storage._loopPresentation ?? false}
    set {_uniqueStorage()._loopPresentation = newValue}
  }
  /// Returns true if `loopPresentation` has been explicitly set.
  var hasLoopPresentation: Bool {return _storage._loopPresentation != nil}
  /// Clears the value of `loopPresentation`. Subsequent reads from it will return its default value.
  mutating func clearLoopPresentation() {_uniqueStorage()._loopPresentation = nil}

  var mode: KN_ShowArchive.KNShowMode {
    get {return _storage._mode ?? .kKnshowModeNormal}
    set {_uniqueStorage()._mode = newValue}
  }
  /// Returns true if `mode` has been explicitly set.
  var hasMode: Bool {return _storage._mode != nil}
  /// Clears the value of `mode`. Subsequent reads from it will return its default value.
  mutating func clearMode() {_uniqueStorage()._mode = nil}

  var autoplayTransitionDelay: Double {
    get {return _storage._autoplayTransitionDelay ?? 5}
    set {_uniqueStorage()._autoplayTransitionDelay = newValue}
  }
  /// Returns true if `autoplayTransitionDelay` has been explicitly set.
  var hasAutoplayTransitionDelay: Bool {return _storage._autoplayTransitionDelay != nil}
  /// Clears the value of `autoplayTransitionDelay`. Subsequent reads from it will return its default value.
  mutating func clearAutoplayTransitionDelay() {_uniqueStorage()._autoplayTransitionDelay = nil}

  var autoplayBuildDelay: Double {
    get {return _storage._autoplayBuildDelay ?? 2}
    set {_uniqueStorage()._autoplayBuildDelay = newValue}
  }
  /// Returns true if `autoplayBuildDelay` has been explicitly set.
  var hasAutoplayBuildDelay: Bool {return _storage._autoplayBuildDelay != nil}
  /// Clears the value of `autoplayBuildDelay`. Subsequent reads from it will return its default value.
  mutating func clearAutoplayBuildDelay() {_uniqueStorage()._autoplayBuildDelay = nil}

  var idleTimerActive: Bool {
    get {return _storage._idleTimerActive ?? false}
    set {_uniqueStorage()._idleTimerActive = newValue}
  }
  /// Returns true if `idleTimerActive` has been explicitly set.
  var hasIdleTimerActive: Bool {return _storage._idleTimerActive != nil}
  /// Clears the value of `idleTimerActive`. Subsequent reads from it will return its default value.
  mutating func clearIdleTimerActive() {_uniqueStorage()._idleTimerActive = nil}

  var idleTimerDelay: Double {
    get {return _storage._idleTimerDelay ?? 900}
    set {_uniqueStorage()._idleTimerDelay = newValue}
  }
  /// Returns true if `idleTimerDelay` has been explicitly set.
  var hasIdleTimerDelay: Bool {return _storage._idleTimerDelay != nil}
  /// Clears the value of `idleTimerDelay`. Subsequent reads from it will return its default value.
  mutating func clearIdleTimerDelay() {_uniqueStorage()._idleTimerDelay = nil}

  var soundtrack: TSP_Reference {
    get {return _storage._soundtrack ?? TSP_Reference()}
    set {_uniqueStorage()._soundtrack = newValue}
  }
  /// Returns true if `soundtrack` has been explicitly set.
  var hasSoundtrack: Bool {return _storage._soundtrack != nil}
  /// Clears the value of `soundtrack`. Subsequent reads from it will return its default value.
  mutating func clearSoundtrack() {_uniqueStorage()._soundtrack = nil}

  var automaticallyPlaysUponOpen: Bool {
    get {return _storage._automaticallyPlaysUponOpen ?? false}
    set {_uniqueStorage()._automaticallyPlaysUponOpen = newValue}
  }
  /// Returns true if `automaticallyPlaysUponOpen` has been explicitly set.
  var hasAutomaticallyPlaysUponOpen: Bool {return _storage._automaticallyPlaysUponOpen != nil}
  /// Clears the value of `automaticallyPlaysUponOpen`. Subsequent reads from it will return its default value.
  mutating func clearAutomaticallyPlaysUponOpen() {_uniqueStorage()._automaticallyPlaysUponOpen = nil}

  var slideList: TSP_Reference {
    get {return _storage._slideList ?? TSP_Reference()}
    set {_uniqueStorage()._slideList = newValue}
  }
  /// Returns true if `slideList` has been explicitly set.
  var hasSlideList: Bool {return _storage._slideList != nil}
  /// Clears the value of `slideList`. Subsequent reads from it will return its default value.
  mutating func clearSlideList() {_uniqueStorage()._slideList = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum KNShowMode: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case kKnshowModeNormal = 0
    case kKnshowModeAutoPlay = 1
    case kKnshowModeHyperlinksOnly = 2

    init() {
      self = .kKnshowModeNormal
    }

  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct KN_DocumentArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSA_DocumentArchive {
    get {return _super ?? TSA_DocumentArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var show: TSP_Reference {
    get {return _show ?? TSP_Reference()}
    set {_show = newValue}
  }
  /// Returns true if `show` has been explicitly set.
  var hasShow: Bool {return self._show != nil}
  /// Clears the value of `show`. Subsequent reads from it will return its default value.
  mutating func clearShow() {self._show = nil}

  var tablesCustomFormatList: TSP_Reference {
    get {return _tablesCustomFormatList ?? TSP_Reference()}
    set {_tablesCustomFormatList = newValue}
  }
  /// Returns true if `tablesCustomFormatList` has been explicitly set.
  var hasTablesCustomFormatList: Bool {return self._tablesCustomFormatList != nil}
  /// Clears the value of `tablesCustomFormatList`. Subsequent reads from it will return its default value.
  mutating func clearTablesCustomFormatList() {self._tablesCustomFormatList = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSA_DocumentArchive? = nil
  fileprivate var _show: TSP_Reference? = nil
  fileprivate var _tablesCustomFormatList: TSP_Reference? = nil
}

struct KN_SlideStylePropertiesArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var fill: TSD_FillArchive {
    get {return _fill ?? TSD_FillArchive()}
    set {_fill = newValue}
  }
  /// Returns true if `fill` has been explicitly set.
  var hasFill: Bool {return self._fill != nil}
  /// Clears the value of `fill`. Subsequent reads from it will return its default value.
  mutating func clearFill() {self._fill = nil}

  var transition: KN_TransitionAttributesArchive {
    get {return _transition ?? KN_TransitionAttributesArchive()}
    set {_transition = newValue}
  }
  /// Returns true if `transition` has been explicitly set.
  var hasTransition: Bool {return self._transition != nil}
  /// Clears the value of `transition`. Subsequent reads from it will return its default value.
  mutating func clearTransition() {self._transition = nil}

  var transitionNull: Bool {
    get {return _transitionNull ?? false}
    set {_transitionNull = newValue}
  }
  /// Returns true if `transitionNull` has been explicitly set.
  var hasTransitionNull: Bool {return self._transitionNull != nil}
  /// Clears the value of `transitionNull`. Subsequent reads from it will return its default value.
  mutating func clearTransitionNull() {self._transitionNull = nil}

  var titlePlaceholderVisibility: Bool {
    get {return _titlePlaceholderVisibility ?? false}
    set {_titlePlaceholderVisibility = newValue}
  }
  /// Returns true if `titlePlaceholderVisibility` has been explicitly set.
  var hasTitlePlaceholderVisibility: Bool {return self._titlePlaceholderVisibility != nil}
  /// Clears the value of `titlePlaceholderVisibility`. Subsequent reads from it will return its default value.
  mutating func clearTitlePlaceholderVisibility() {self._titlePlaceholderVisibility = nil}

  var bodyPlaceholderVisibility: Bool {
    get {return _bodyPlaceholderVisibility ?? false}
    set {_bodyPlaceholderVisibility = newValue}
  }
  /// Returns true if `bodyPlaceholderVisibility` has been explicitly set.
  var hasBodyPlaceholderVisibility: Bool {return self._bodyPlaceholderVisibility != nil}
  /// Clears the value of `bodyPlaceholderVisibility`. Subsequent reads from it will return its default value.
  mutating func clearBodyPlaceholderVisibility() {self._bodyPlaceholderVisibility = nil}

  var objectPlaceholderVisibility: Bool {
    get {return _objectPlaceholderVisibility ?? false}
    set {_objectPlaceholderVisibility = newValue}
  }
  /// Returns true if `objectPlaceholderVisibility` has been explicitly set.
  var hasObjectPlaceholderVisibility: Bool {return self._objectPlaceholderVisibility != nil}
  /// Clears the value of `objectPlaceholderVisibility`. Subsequent reads from it will return its default value.
  mutating func clearObjectPlaceholderVisibility() {self._objectPlaceholderVisibility = nil}

  var slideNumberPlaceholderVisibility: Bool {
    get {return _slideNumberPlaceholderVisibility ?? false}
    set {_slideNumberPlaceholderVisibility = newValue}
  }
  /// Returns true if `slideNumberPlaceholderVisibility` has been explicitly set.
  var hasSlideNumberPlaceholderVisibility: Bool {return self._slideNumberPlaceholderVisibility != nil}
  /// Clears the value of `slideNumberPlaceholderVisibility`. Subsequent reads from it will return its default value.
  mutating func clearSlideNumberPlaceholderVisibility() {self._slideNumberPlaceholderVisibility = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _fill: TSD_FillArchive? = nil
  fileprivate var _transition: KN_TransitionAttributesArchive? = nil
  fileprivate var _transitionNull: Bool? = nil
  fileprivate var _titlePlaceholderVisibility: Bool? = nil
  fileprivate var _bodyPlaceholderVisibility: Bool? = nil
  fileprivate var _objectPlaceholderVisibility: Bool? = nil
  fileprivate var _slideNumberPlaceholderVisibility: Bool? = nil
}

struct KN_SlideStyleArchive: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSS_StyleArchive {
    get {return _storage._super ?? TSS_StyleArchive()}
    set {_uniqueStorage()._super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return _storage._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {_uniqueStorage()._super = nil}

  var overrideCount: UInt32 {
    get {return _storage._overrideCount ?? 0}
    set {_uniqueStorage()._overrideCount = newValue}
  }
  /// Returns true if `overrideCount` has been explicitly set.
  var hasOverrideCount: Bool {return _storage._overrideCount != nil}
  /// Clears the value of `overrideCount`. Subsequent reads from it will return its default value.
  mutating func clearOverrideCount() {_uniqueStorage()._overrideCount = nil}

  var slideProperties: KN_SlideStylePropertiesArchive {
    get {return _storage._slideProperties ?? KN_SlideStylePropertiesArchive()}
    set {_uniqueStorage()._slideProperties = newValue}
  }
  /// Returns true if `slideProperties` has been explicitly set.
  var hasSlideProperties: Bool {return _storage._slideProperties != nil}
  /// Clears the value of `slideProperties`. Subsequent reads from it will return its default value.
  mutating func clearSlideProperties() {_uniqueStorage()._slideProperties = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct KN_PasteboardNativeStorageArchive: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var drawables: [TSP_Reference] {
    get {return _storage._drawables}
    set {_uniqueStorage()._drawables = newValue}
  }

  var builds: [TSP_Reference] {
    get {return _storage._builds}
    set {_uniqueStorage()._builds = newValue}
  }

  var buildChunks: [TSP_Reference] {
    get {return _storage._buildChunks}
    set {_uniqueStorage()._buildChunks = newValue}
  }

  var slideNodes: [TSP_Reference] {
    get {return _storage._slideNodes}
    set {_uniqueStorage()._slideNodes = newValue}
  }

  var displayedSlideNodes: [TSP_Reference] {
    get {return _storage._displayedSlideNodes}
    set {_uniqueStorage()._displayedSlideNodes = newValue}
  }

  var templateSlideNodes: [TSP_Reference] {
    get {return _storage._templateSlideNodes}
    set {_uniqueStorage()._templateSlideNodes = newValue}
  }

  var collapsedSlideNodes: [TSP_Reference] {
    get {return _storage._collapsedSlideNodes}
    set {_uniqueStorage()._collapsedSlideNodes = newValue}
  }

  var outlineCollapsedSlideNodes: [TSP_Reference] {
    get {return _storage._outlineCollapsedSlideNodes}
    set {_uniqueStorage()._outlineCollapsedSlideNodes = newValue}
  }

  var outlineHasBodySlideNodes: [TSP_Reference] {
    get {return _storage._outlineHasBodySlideNodes}
    set {_uniqueStorage()._outlineHasBodySlideNodes = newValue}
  }

  var originalShowSize: TSP_Size {
    get {return _storage._originalShowSize ?? TSP_Size()}
    set {_uniqueStorage()._originalShowSize = newValue}
  }
  /// Returns true if `originalShowSize` has been explicitly set.
  var hasOriginalShowSize: Bool {return _storage._originalShowSize != nil}
  /// Clears the value of `originalShowSize`. Subsequent reads from it will return its default value.
  mutating func clearOriginalShowSize() {_uniqueStorage()._originalShowSize = nil}

  var titleRanges: [TSP_Range] {
    get {return _storage._titleRanges}
    set {_uniqueStorage()._titleRanges = newValue}
  }

  var geometriesInRoot: [TSD_GeometryArchive] {
    get {return _storage._geometriesInRoot}
    set {_uniqueStorage()._geometriesInRoot = newValue}
  }

  var slideNodeUniqueIdentifier: String {
    get {return _storage._slideNodeUniqueIdentifier ?? String()}
    set {_uniqueStorage()._slideNodeUniqueIdentifier = newValue}
  }
  /// Returns true if `slideNodeUniqueIdentifier` has been explicitly set.
  var hasSlideNodeUniqueIdentifier: Bool {return _storage._slideNodeUniqueIdentifier != nil}
  /// Clears the value of `slideNodeUniqueIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearSlideNodeUniqueIdentifier() {_uniqueStorage()._slideNodeUniqueIdentifier = nil}

  var customEffectTimingCurves: [KN_ThemeCustomTimingCurveArchive] {
    get {return _storage._customEffectTimingCurves}
    set {_uniqueStorage()._customEffectTimingCurves = newValue}
  }

  var originalSlideNodeUuids: [String] {
    get {return _storage._originalSlideNodeUuids}
    set {_uniqueStorage()._originalSlideNodeUuids = newValue}
  }

  var slideNodesHaveDatasNeedingDownload: Bool {
    get {return _storage._slideNodesHaveDatasNeedingDownload ?? false}
    set {_uniqueStorage()._slideNodesHaveDatasNeedingDownload = newValue}
  }
  /// Returns true if `slideNodesHaveDatasNeedingDownload` has been explicitly set.
  var hasSlideNodesHaveDatasNeedingDownload: Bool {return _storage._slideNodesHaveDatasNeedingDownload != nil}
  /// Clears the value of `slideNodesHaveDatasNeedingDownload`. Subsequent reads from it will return its default value.
  mutating func clearSlideNodesHaveDatasNeedingDownload() {_uniqueStorage()._slideNodesHaveDatasNeedingDownload = nil}

  var transition: KN_TransitionArchive {
    get {return _storage._transition ?? KN_TransitionArchive()}
    set {_uniqueStorage()._transition = newValue}
  }
  /// Returns true if `transition` has been explicitly set.
  var hasTransition: Bool {return _storage._transition != nil}
  /// Clears the value of `transition`. Subsequent reads from it will return its default value.
  mutating func clearTransition() {_uniqueStorage()._transition = nil}

  var liveVideoSources: [KN_PasteboardNativeStorageArchive.LiveVideoSourcePair] {
    get {return _storage._liveVideoSources}
    set {_uniqueStorage()._liveVideoSources = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct LiveVideoSourcePair: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var liveVideoInfo: TSP_Reference {
      get {return _liveVideoInfo ?? TSP_Reference()}
      set {_liveVideoInfo = newValue}
    }
    /// Returns true if `liveVideoInfo` has been explicitly set.
    var hasLiveVideoInfo: Bool {return self._liveVideoInfo != nil}
    /// Clears the value of `liveVideoInfo`. Subsequent reads from it will return its default value.
    mutating func clearLiveVideoInfo() {self._liveVideoInfo = nil}

    var liveVideoSource: TSP_Reference {
      get {return _liveVideoSource ?? TSP_Reference()}
      set {_liveVideoSource = newValue}
    }
    /// Returns true if `liveVideoSource` has been explicitly set.
    var hasLiveVideoSource: Bool {return self._liveVideoSource != nil}
    /// Clears the value of `liveVideoSource`. Subsequent reads from it will return its default value.
    mutating func clearLiveVideoSource() {self._liveVideoSource = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _liveVideoInfo: TSP_Reference? = nil
    fileprivate var _liveVideoSource: TSP_Reference? = nil
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct KN_PrototypeForUndoTemplateChangeArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var slideStyle: TSP_Reference {
    get {return _slideStyle ?? TSP_Reference()}
    set {_slideStyle = newValue}
  }
  /// Returns true if `slideStyle` has been explicitly set.
  var hasSlideStyle: Bool {return self._slideStyle != nil}
  /// Clears the value of `slideStyle`. Subsequent reads from it will return its default value.
  mutating func clearSlideStyle() {self._slideStyle = nil}

  var templateSlideID: TSP_UUID {
    get {return _templateSlideID ?? TSP_UUID()}
    set {_templateSlideID = newValue}
  }
  /// Returns true if `templateSlideID` has been explicitly set.
  var hasTemplateSlideID: Bool {return self._templateSlideID != nil}
  /// Clears the value of `templateSlideID`. Subsequent reads from it will return its default value.
  mutating func clearTemplateSlideID() {self._templateSlideID = nil}

  var drawableInfoIDList: [TSP_UUID] = []

  var placeholders: [TSP_Reference] = []

  var placeholderTagsList: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _slideStyle: TSP_Reference? = nil
  fileprivate var _templateSlideID: TSP_UUID? = nil
}

struct KN_RecordingArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var eventTracks: [TSP_Reference] = []

  var movieTrack: TSP_Reference {
    get {return _movieTrack ?? TSP_Reference()}
    set {_movieTrack = newValue}
  }
  /// Returns true if `movieTrack` has been explicitly set.
  var hasMovieTrack: Bool {return self._movieTrack != nil}
  /// Clears the value of `movieTrack`. Subsequent reads from it will return its default value.
  mutating func clearMovieTrack() {self._movieTrack = nil}

  var duration: Double {
    get {return _duration ?? 0}
    set {_duration = newValue}
  }
  /// Returns true if `duration` has been explicitly set.
  var hasDuration: Bool {return self._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
  mutating func clearDuration() {self._duration = nil}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var syncStateEnum: KN_RecordingArchive.RecordingSyncStateEnum {
    get {return _syncStateEnum ?? .kRecordingSyncStateInSyncWithShow}
    set {_syncStateEnum = newValue}
  }
  /// Returns true if `syncStateEnum` has been explicitly set.
  var hasSyncStateEnum: Bool {return self._syncStateEnum != nil}
  /// Clears the value of `syncStateEnum`. Subsequent reads from it will return its default value.
  mutating func clearSyncStateEnum() {self._syncStateEnum = nil}

  var modificationDate: TSP_Date {
    get {return _modificationDate ?? TSP_Date()}
    set {_modificationDate = newValue}
  }
  /// Returns true if `modificationDate` has been explicitly set.
  var hasModificationDate: Bool {return self._modificationDate != nil}
  /// Clears the value of `modificationDate`. Subsequent reads from it will return its default value.
  mutating func clearModificationDate() {self._modificationDate = nil}

  var syncState: KN_RecordingSyncState {
    get {return _syncState ?? KN_RecordingSyncState()}
    set {_syncState = newValue}
  }
  /// Returns true if `syncState` has been explicitly set.
  var hasSyncState: Bool {return self._syncState != nil}
  /// Clears the value of `syncState`. Subsequent reads from it will return its default value.
  mutating func clearSyncState() {self._syncState = nil}

  var correctionHistory: KN_RecordingCorrectionHistory {
    get {return _correctionHistory ?? KN_RecordingCorrectionHistory()}
    set {_correctionHistory = newValue}
  }
  /// Returns true if `correctionHistory` has been explicitly set.
  var hasCorrectionHistory: Bool {return self._correctionHistory != nil}
  /// Clears the value of `correctionHistory`. Subsequent reads from it will return its default value.
  mutating func clearCorrectionHistory() {self._correctionHistory = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum RecordingSyncStateEnum: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case kRecordingSyncStateInSyncWithShow = 0
    case kRecordingSyncStateOutOfSyncWithShow = 1

    init() {
      self = .kRecordingSyncStateInSyncWithShow
    }

  }

  init() {}

  fileprivate var _movieTrack: TSP_Reference? = nil
  fileprivate var _duration: Double? = nil
  fileprivate var _syncStateEnum: KN_RecordingArchive.RecordingSyncStateEnum? = nil
  fileprivate var _modificationDate: TSP_Date? = nil
  fileprivate var _syncState: KN_RecordingSyncState? = nil
  fileprivate var _correctionHistory: KN_RecordingCorrectionHistory? = nil
}

struct KN_RecordingSyncState: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var outOfSyncToken: TSP_UUID {
    get {return _outOfSyncToken ?? TSP_UUID()}
    set {_outOfSyncToken = newValue}
  }
  /// Returns true if `outOfSyncToken` has been explicitly set.
  var hasOutOfSyncToken: Bool {return self._outOfSyncToken != nil}
  /// Clears the value of `outOfSyncToken`. Subsequent reads from it will return its default value.
  mutating func clearOutOfSyncToken() {self._outOfSyncToken = nil}

  var canClearOutOfSyncToken: Bool {
    get {return _canClearOutOfSyncToken ?? false}
    set {_canClearOutOfSyncToken = newValue}
  }
  /// Returns true if `canClearOutOfSyncToken` has been explicitly set.
  var hasCanClearOutOfSyncToken: Bool {return self._canClearOutOfSyncToken != nil}
  /// Clears the value of `canClearOutOfSyncToken`. Subsequent reads from it will return its default value.
  mutating func clearCanClearOutOfSyncToken() {self._canClearOutOfSyncToken = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _outOfSyncToken: TSP_UUID? = nil
  fileprivate var _canClearOutOfSyncToken: Bool? = nil
}

struct KN_RecordingCorrectionHistory: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var didAddMissingEventsForRadar49654305: Bool {
    get {return _didAddMissingEventsForRadar49654305 ?? false}
    set {_didAddMissingEventsForRadar49654305 = newValue}
  }
  /// Returns true if `didAddMissingEventsForRadar49654305` has been explicitly set.
  var hasDidAddMissingEventsForRadar49654305: Bool {return self._didAddMissingEventsForRadar49654305 != nil}
  /// Clears the value of `didAddMissingEventsForRadar49654305`. Subsequent reads from it will return its default value.
  mutating func clearDidAddMissingEventsForRadar49654305() {self._didAddMissingEventsForRadar49654305 = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _didAddMissingEventsForRadar49654305: Bool? = nil
}

struct KN_RecordingEventTrackArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: String {
    get {return _type ?? String()}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var events: [KN_RecordingEventArchive] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _type: String? = nil
}

struct KN_RecordingEventArchive: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var startTime: Double {
    get {return _storage._startTime ?? -1}
    set {_uniqueStorage()._startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  var hasStartTime: Bool {return _storage._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  mutating func clearStartTime() {_uniqueStorage()._startTime = nil}

  var navigationEventArchive: KN_RecordingNavigationEventArchive {
    get {return _storage._navigationEventArchive ?? KN_RecordingNavigationEventArchive()}
    set {_uniqueStorage()._navigationEventArchive = newValue}
  }
  /// Returns true if `navigationEventArchive` has been explicitly set.
  var hasNavigationEventArchive: Bool {return _storage._navigationEventArchive != nil}
  /// Clears the value of `navigationEventArchive`. Subsequent reads from it will return its default value.
  mutating func clearNavigationEventArchive() {_uniqueStorage()._navigationEventArchive = nil}

  var laserEventArchive: KN_RecordingLaserEventArchive {
    get {return _storage._laserEventArchive ?? KN_RecordingLaserEventArchive()}
    set {_uniqueStorage()._laserEventArchive = newValue}
  }
  /// Returns true if `laserEventArchive` has been explicitly set.
  var hasLaserEventArchive: Bool {return _storage._laserEventArchive != nil}
  /// Clears the value of `laserEventArchive`. Subsequent reads from it will return its default value.
  mutating func clearLaserEventArchive() {_uniqueStorage()._laserEventArchive = nil}

  var pauseEventArchive: KN_RecordingPauseEventArchive {
    get {return _storage._pauseEventArchive ?? KN_RecordingPauseEventArchive()}
    set {_uniqueStorage()._pauseEventArchive = newValue}
  }
  /// Returns true if `pauseEventArchive` has been explicitly set.
  var hasPauseEventArchive: Bool {return _storage._pauseEventArchive != nil}
  /// Clears the value of `pauseEventArchive`. Subsequent reads from it will return its default value.
  mutating func clearPauseEventArchive() {_uniqueStorage()._pauseEventArchive = nil}

  var movieEventArchive: KN_RecordingMovieEventArchive {
    get {return _storage._movieEventArchive ?? KN_RecordingMovieEventArchive()}
    set {_uniqueStorage()._movieEventArchive = newValue}
  }
  /// Returns true if `movieEventArchive` has been explicitly set.
  var hasMovieEventArchive: Bool {return _storage._movieEventArchive != nil}
  /// Clears the value of `movieEventArchive`. Subsequent reads from it will return its default value.
  mutating func clearMovieEventArchive() {_uniqueStorage()._movieEventArchive = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct KN_RecordingNavigationEventArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var targetSlideNodeID: TSP_UUID {
    get {return _targetSlideNodeID ?? TSP_UUID()}
    set {_targetSlideNodeID = newValue}
  }
  /// Returns true if `targetSlideNodeID` has been explicitly set.
  var hasTargetSlideNodeID: Bool {return self._targetSlideNodeID != nil}
  /// Clears the value of `targetSlideNodeID`. Subsequent reads from it will return its default value.
  mutating func clearTargetSlideNodeID() {self._targetSlideNodeID = nil}

  var targetSlideNodeReference: TSP_Reference {
    get {return _targetSlideNodeReference ?? TSP_Reference()}
    set {_targetSlideNodeReference = newValue}
  }
  /// Returns true if `targetSlideNodeReference` has been explicitly set.
  var hasTargetSlideNodeReference: Bool {return self._targetSlideNodeReference != nil}
  /// Clears the value of `targetSlideNodeReference`. Subsequent reads from it will return its default value.
  mutating func clearTargetSlideNodeReference() {self._targetSlideNodeReference = nil}

  var targetEventIndex: UInt32 {
    get {return _targetEventIndex ?? 0}
    set {_targetEventIndex = newValue}
  }
  /// Returns true if `targetEventIndex` has been explicitly set.
  var hasTargetEventIndex: Bool {return self._targetEventIndex != nil}
  /// Clears the value of `targetEventIndex`. Subsequent reads from it will return its default value.
  mutating func clearTargetEventIndex() {self._targetEventIndex = nil}

  var animationPhase: KN_RecordingNavigationEventArchive.RecordingNavigationEventAnimationPhase {
    get {return _animationPhase ?? .kRecordingNavigationEventAnimationNone}
    set {_animationPhase = newValue}
  }
  /// Returns true if `animationPhase` has been explicitly set.
  var hasAnimationPhase: Bool {return self._animationPhase != nil}
  /// Clears the value of `animationPhase`. Subsequent reads from it will return its default value.
  mutating func clearAnimationPhase() {self._animationPhase = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum RecordingNavigationEventAnimationPhase: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case kRecordingNavigationEventAnimationNone = 0
    case kRecordingNavigationEventAnimationStart = 1
    case kRecordingNavigationEventAnimationEnd = 2

    init() {
      self = .kRecordingNavigationEventAnimationNone
    }

  }

  init() {}

  fileprivate var _targetSlideNodeID: TSP_UUID? = nil
  fileprivate var _targetSlideNodeReference: TSP_Reference? = nil
  fileprivate var _targetEventIndex: UInt32? = nil
  fileprivate var _animationPhase: KN_RecordingNavigationEventArchive.RecordingNavigationEventAnimationPhase? = nil
}

struct KN_RecordingLaserEventArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// NOTE: This field was marked as deprecated in the .proto file.
  var unscaledLocation: TSP_Point {
    get {return _unscaledLocation ?? TSP_Point()}
    set {_unscaledLocation = newValue}
  }
  /// Returns true if `unscaledLocation` has been explicitly set.
  var hasUnscaledLocation: Bool {return self._unscaledLocation != nil}
  /// Clears the value of `unscaledLocation`. Subsequent reads from it will return its default value.
  mutating func clearUnscaledLocation() {self._unscaledLocation = nil}

  var unitLocation: TSP_Point {
    get {return _unitLocation ?? TSP_Point()}
    set {_unitLocation = newValue}
  }
  /// Returns true if `unitLocation` has been explicitly set.
  var hasUnitLocation: Bool {return self._unitLocation != nil}
  /// Clears the value of `unitLocation`. Subsequent reads from it will return its default value.
  mutating func clearUnitLocation() {self._unitLocation = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _unscaledLocation: TSP_Point? = nil
  fileprivate var _unitLocation: TSP_Point? = nil
}

struct KN_RecordingPauseEventArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var pauseEventType: KN_RecordingPauseEventArchive.RecordingPauseEventType {
    get {return _pauseEventType ?? .kRecordingPauseEventTypeResume}
    set {_pauseEventType = newValue}
  }
  /// Returns true if `pauseEventType` has been explicitly set.
  var hasPauseEventType: Bool {return self._pauseEventType != nil}
  /// Clears the value of `pauseEventType`. Subsequent reads from it will return its default value.
  mutating func clearPauseEventType() {self._pauseEventType = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum RecordingPauseEventType: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case kRecordingPauseEventTypeResume = 0
    case kRecordingPauseEventTypePause = 1
    case kRecordingPauseEventTypeConcealWithBlack = 2
    case kRecordingPauseEventTypeConcealWithWhite = 3

    init() {
      self = .kRecordingPauseEventTypeResume
    }

  }

  init() {}

  fileprivate var _pauseEventType: KN_RecordingPauseEventArchive.RecordingPauseEventType? = nil
}

struct KN_RecordingMovieEventArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var movieInfoReference: TSP_Reference {
    get {return _movieInfoReference ?? TSP_Reference()}
    set {_movieInfoReference = newValue}
  }
  /// Returns true if `movieInfoReference` has been explicitly set.
  var hasMovieInfoReference: Bool {return self._movieInfoReference != nil}
  /// Clears the value of `movieInfoReference`. Subsequent reads from it will return its default value.
  mutating func clearMovieInfoReference() {self._movieInfoReference = nil}

  var movieEventType: KN_RecordingMovieEventArchive.RecordingMovieEventType {
    get {return _movieEventType ?? .kRecordingMovieEventSeek}
    set {_movieEventType = newValue}
  }
  /// Returns true if `movieEventType` has been explicitly set.
  var hasMovieEventType: Bool {return self._movieEventType != nil}
  /// Clears the value of `movieEventType`. Subsequent reads from it will return its default value.
  mutating func clearMovieEventType() {self._movieEventType = nil}

  var movieEventValue: Double {
    get {return _movieEventValue ?? 0}
    set {_movieEventValue = newValue}
  }
  /// Returns true if `movieEventValue` has been explicitly set.
  var hasMovieEventValue: Bool {return self._movieEventValue != nil}
  /// Clears the value of `movieEventValue`. Subsequent reads from it will return its default value.
  mutating func clearMovieEventValue() {self._movieEventValue = nil}

  var movieInfoThatPlayedAcrossSlidesReference: TSP_Reference {
    get {return _movieInfoThatPlayedAcrossSlidesReference ?? TSP_Reference()}
    set {_movieInfoThatPlayedAcrossSlidesReference = newValue}
  }
  /// Returns true if `movieInfoThatPlayedAcrossSlidesReference` has been explicitly set.
  var hasMovieInfoThatPlayedAcrossSlidesReference: Bool {return self._movieInfoThatPlayedAcrossSlidesReference != nil}
  /// Clears the value of `movieInfoThatPlayedAcrossSlidesReference`. Subsequent reads from it will return its default value.
  mutating func clearMovieInfoThatPlayedAcrossSlidesReference() {self._movieInfoThatPlayedAcrossSlidesReference = nil}

  var movieSlideNodeID: TSP_UUID {
    get {return _movieSlideNodeID ?? TSP_UUID()}
    set {_movieSlideNodeID = newValue}
  }
  /// Returns true if `movieSlideNodeID` has been explicitly set.
  var hasMovieSlideNodeID: Bool {return self._movieSlideNodeID != nil}
  /// Clears the value of `movieSlideNodeID`. Subsequent reads from it will return its default value.
  mutating func clearMovieSlideNodeID() {self._movieSlideNodeID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum RecordingMovieEventType: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case kRecordingMovieEventNone = 0
    case kRecordingMovieEventSeek = 1
    case kRecordingMovieEventSetRate = 2
    case kRecordingMovieEventStartPlayback = 3
    case kRecordingMovieEventStopPlayback = 4
    case kRecordingMovieEventBeginScrubbing = 5
    case kRecordingMovieEventEndScrubbing = 6

    init() {
      self = .kRecordingMovieEventNone
    }

  }

  init() {}

  fileprivate var _movieInfoReference: TSP_Reference? = nil
  fileprivate var _movieEventType: KN_RecordingMovieEventArchive.RecordingMovieEventType? = nil
  fileprivate var _movieEventValue: Double? = nil
  fileprivate var _movieInfoThatPlayedAcrossSlidesReference: TSP_Reference? = nil
  fileprivate var _movieSlideNodeID: TSP_UUID? = nil
}

struct KN_RecordingMovieTrackArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var movieSegments: [KN_MovieSegmentArchive] = []

  var isMovieSegmentDataTrimmedToDuration: Bool {
    get {return _isMovieSegmentDataTrimmedToDuration ?? false}
    set {_isMovieSegmentDataTrimmedToDuration = newValue}
  }
  /// Returns true if `isMovieSegmentDataTrimmedToDuration` has been explicitly set.
  var hasIsMovieSegmentDataTrimmedToDuration: Bool {return self._isMovieSegmentDataTrimmedToDuration != nil}
  /// Clears the value of `isMovieSegmentDataTrimmedToDuration`. Subsequent reads from it will return its default value.
  mutating func clearIsMovieSegmentDataTrimmedToDuration() {self._isMovieSegmentDataTrimmedToDuration = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _isMovieSegmentDataTrimmedToDuration: Bool? = nil
}

struct KN_MovieSegmentArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var movieData: TSP_DataReference {
    get {return _movieData ?? TSP_DataReference()}
    set {_movieData = newValue}
  }
  /// Returns true if `movieData` has been explicitly set.
  var hasMovieData: Bool {return self._movieData != nil}
  /// Clears the value of `movieData`. Subsequent reads from it will return its default value.
  mutating func clearMovieData() {self._movieData = nil}

  var startTime: Double {
    get {return _startTime ?? -1}
    set {_startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  mutating func clearStartTime() {self._startTime = nil}

  var databaseMovieData: TSP_Reference {
    get {return _databaseMovieData ?? TSP_Reference()}
    set {_databaseMovieData = newValue}
  }
  /// Returns true if `databaseMovieData` has been explicitly set.
  var hasDatabaseMovieData: Bool {return self._databaseMovieData != nil}
  /// Clears the value of `databaseMovieData`. Subsequent reads from it will return its default value.
  mutating func clearDatabaseMovieData() {self._databaseMovieData = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _movieData: TSP_DataReference? = nil
  fileprivate var _startTime: Double? = nil
  fileprivate var _databaseMovieData: TSP_Reference? = nil
}

struct KN_Soundtrack: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var volume: Double {
    get {return _volume ?? 0}
    set {_volume = newValue}
  }
  /// Returns true if `volume` has been explicitly set.
  var hasVolume: Bool {return self._volume != nil}
  /// Clears the value of `volume`. Subsequent reads from it will return its default value.
  mutating func clearVolume() {self._volume = nil}

  var mode: KN_Soundtrack.SoundtrackMode {
    get {return _mode ?? .kKnsoundtrackModePlayOnce}
    set {_mode = newValue}
  }
  /// Returns true if `mode` has been explicitly set.
  var hasMode: Bool {return self._mode != nil}
  /// Clears the value of `mode`. Subsequent reads from it will return its default value.
  mutating func clearMode() {self._mode = nil}

  var movieMedia: [TSP_DataReference] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum SoundtrackMode: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case kKnsoundtrackModePlayOnce = 0
    case kKnsoundtrackModeLoop = 1
    case kKnsoundtrackModeDoNotPlay = 2

    init() {
      self = .kKnsoundtrackModePlayOnce
    }

  }

  init() {}

  fileprivate var _volume: Double? = nil
  fileprivate var _mode: KN_Soundtrack.SoundtrackMode? = nil
}

struct KN_SlideNumberAttachmentArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSWP_TextualAttachmentArchive {
    get {return _super ?? TSWP_TextualAttachmentArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSWP_TextualAttachmentArchive? = nil
}

struct KN_SlideCollectionSelectionArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var slideNodes: [TSP_Reference] = []

  var slideNodeToEdit: TSP_Reference {
    get {return _slideNodeToEdit ?? TSP_Reference()}
    set {_slideNodeToEdit = newValue}
  }
  /// Returns true if `slideNodeToEdit` has been explicitly set.
  var hasSlideNodeToEdit: Bool {return self._slideNodeToEdit != nil}
  /// Clears the value of `slideNodeToEdit`. Subsequent reads from it will return its default value.
  mutating func clearSlideNodeToEdit() {self._slideNodeToEdit = nil}

  var selectedParagraphIndexesForSlideNodes: [KN_SlideCollectionSelectionArchive.OutlineSelection] = []

  var rangeInSelectedParagraph: TSP_Range {
    get {return _rangeInSelectedParagraph ?? TSP_Range()}
    set {_rangeInSelectedParagraph = newValue}
  }
  /// Returns true if `rangeInSelectedParagraph` has been explicitly set.
  var hasRangeInSelectedParagraph: Bool {return self._rangeInSelectedParagraph != nil}
  /// Clears the value of `rangeInSelectedParagraph`. Subsequent reads from it will return its default value.
  mutating func clearRangeInSelectedParagraph() {self._rangeInSelectedParagraph = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct OutlineSelection: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var slideNode: TSP_Reference {
      get {return _slideNode ?? TSP_Reference()}
      set {_slideNode = newValue}
    }
    /// Returns true if `slideNode` has been explicitly set.
    var hasSlideNode: Bool {return self._slideNode != nil}
    /// Clears the value of `slideNode`. Subsequent reads from it will return its default value.
    mutating func clearSlideNode() {self._slideNode = nil}

    var selectedParagraphIndexes: TSP_IndexSet {
      get {return _selectedParagraphIndexes ?? TSP_IndexSet()}
      set {_selectedParagraphIndexes = newValue}
    }
    /// Returns true if `selectedParagraphIndexes` has been explicitly set.
    var hasSelectedParagraphIndexes: Bool {return self._selectedParagraphIndexes != nil}
    /// Clears the value of `selectedParagraphIndexes`. Subsequent reads from it will return its default value.
    mutating func clearSelectedParagraphIndexes() {self._selectedParagraphIndexes = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _slideNode: TSP_Reference? = nil
    fileprivate var _selectedParagraphIndexes: TSP_IndexSet? = nil
  }

  init() {}

  fileprivate var _slideNodeToEdit: TSP_Reference? = nil
  fileprivate var _rangeInSelectedParagraph: TSP_Range? = nil
}

struct KN_PresenterNotesSelectionArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var slideNode: TSP_Reference {
    get {return _slideNode ?? TSP_Reference()}
    set {_slideNode = newValue}
  }
  /// Returns true if `slideNode` has been explicitly set.
  var hasSlideNode: Bool {return self._slideNode != nil}
  /// Clears the value of `slideNode`. Subsequent reads from it will return its default value.
  mutating func clearSlideNode() {self._slideNode = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _slideNode: TSP_Reference? = nil
}

struct KN_MixedIdOperationArgs: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var argsListTypes: [KN_MixedIdOperationArgs.ArgsListKind] = []

  var addArgsList: [TSCK_AddIdOperationArgs] = []

  var showPlaceholderArgsList: [TSCK_IdPlacementOperationArgs] = []

  var removeArgsList: [TSCK_RemoveIdOperationArgs] = []

  var hidePlaceholderArgsList: [TSCK_IdPlacementOperationArgs] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum ArgsListKind: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case add = 0
    case remove = 1
    case showPlaceholder = 2
    case hidePlaceholder = 3

    init() {
      self = .add
    }

  }

  init() {}
}

struct KN_LiveVideoInfo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sourceID: TSP_UUID {
    get {return _sourceID ?? TSP_UUID()}
    set {_sourceID = newValue}
  }
  /// Returns true if `sourceID` has been explicitly set.
  var hasSourceID: Bool {return self._sourceID != nil}
  /// Clears the value of `sourceID`. Subsequent reads from it will return its default value.
  mutating func clearSourceID() {self._sourceID = nil}

  var isPlaceholder: Bool {
    get {return _isPlaceholder ?? false}
    set {_isPlaceholder = newValue}
  }
  /// Returns true if `isPlaceholder` has been explicitly set.
  var hasIsPlaceholder: Bool {return self._isPlaceholder != nil}
  /// Clears the value of `isPlaceholder`. Subsequent reads from it will return its default value.
  mutating func clearIsPlaceholder() {self._isPlaceholder = nil}

  var scale: Double {
    get {return _scale ?? 0}
    set {_scale = newValue}
  }
  /// Returns true if `scale` has been explicitly set.
  var hasScale: Bool {return self._scale != nil}
  /// Clears the value of `scale`. Subsequent reads from it will return its default value.
  mutating func clearScale() {self._scale = nil}

  var normalizedOffset: TSP_Point {
    get {return _normalizedOffset ?? TSP_Point()}
    set {_normalizedOffset = newValue}
  }
  /// Returns true if `normalizedOffset` has been explicitly set.
  var hasNormalizedOffset: Bool {return self._normalizedOffset != nil}
  /// Clears the value of `normalizedOffset`. Subsequent reads from it will return its default value.
  mutating func clearNormalizedOffset() {self._normalizedOffset = nil}

  var maskKind: Int32 {
    get {return _maskKind ?? 0}
    set {_maskKind = newValue}
  }
  /// Returns true if `maskKind` has been explicitly set.
  var hasMaskKind: Bool {return self._maskKind != nil}
  /// Clears the value of `maskKind`. Subsequent reads from it will return its default value.
  mutating func clearMaskKind() {self._maskKind = nil}

  var maskCornerRadius: Double {
    get {return _maskCornerRadius ?? 0}
    set {_maskCornerRadius = newValue}
  }
  /// Returns true if `maskCornerRadius` has been explicitly set.
  var hasMaskCornerRadius: Bool {return self._maskCornerRadius != nil}
  /// Clears the value of `maskCornerRadius`. Subsequent reads from it will return its default value.
  mutating func clearMaskCornerRadius() {self._maskCornerRadius = nil}

  var backgroundKind: Int32 {
    get {return _backgroundKind ?? 0}
    set {_backgroundKind = newValue}
  }
  /// Returns true if `backgroundKind` has been explicitly set.
  var hasBackgroundKind: Bool {return self._backgroundKind != nil}
  /// Clears the value of `backgroundKind`. Subsequent reads from it will return its default value.
  mutating func clearBackgroundKind() {self._backgroundKind = nil}

  var backgroundFill: TSD_FillArchive {
    get {return _backgroundFill ?? TSD_FillArchive()}
    set {_backgroundFill = newValue}
  }
  /// Returns true if `backgroundFill` has been explicitly set.
  var hasBackgroundFill: Bool {return self._backgroundFill != nil}
  /// Clears the value of `backgroundFill`. Subsequent reads from it will return its default value.
  mutating func clearBackgroundFill() {self._backgroundFill = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _sourceID: TSP_UUID? = nil
  fileprivate var _isPlaceholder: Bool? = nil
  fileprivate var _scale: Double? = nil
  fileprivate var _normalizedOffset: TSP_Point? = nil
  fileprivate var _maskKind: Int32? = nil
  fileprivate var _maskCornerRadius: Double? = nil
  fileprivate var _backgroundKind: Int32? = nil
  fileprivate var _backgroundFill: TSD_FillArchive? = nil
}

struct KN_LiveVideoSource: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String {
    get {return _storage._name ?? String()}
    set {_uniqueStorage()._name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {_uniqueStorage()._name = nil}

  var captureDeviceDescription: KN_LiveVideoCaptureDeviceDescription {
    get {return _storage._captureDeviceDescription ?? KN_LiveVideoCaptureDeviceDescription()}
    set {_uniqueStorage()._captureDeviceDescription = newValue}
  }
  /// Returns true if `captureDeviceDescription` has been explicitly set.
  var hasCaptureDeviceDescription: Bool {return _storage._captureDeviceDescription != nil}
  /// Clears the value of `captureDeviceDescription`. Subsequent reads from it will return its default value.
  mutating func clearCaptureDeviceDescription() {_uniqueStorage()._captureDeviceDescription = nil}

  var collaborationCommandUsageState: KN_LiveVideoSourceCollaborationCommandUsageState {
    get {return _storage._collaborationCommandUsageState ?? KN_LiveVideoSourceCollaborationCommandUsageState()}
    set {_uniqueStorage()._collaborationCommandUsageState = newValue}
  }
  /// Returns true if `collaborationCommandUsageState` has been explicitly set.
  var hasCollaborationCommandUsageState: Bool {return _storage._collaborationCommandUsageState != nil}
  /// Clears the value of `collaborationCommandUsageState`. Subsequent reads from it will return its default value.
  mutating func clearCollaborationCommandUsageState() {_uniqueStorage()._collaborationCommandUsageState = nil}

  var posterImageData: TSP_DataReference {
    get {return _storage._posterImageData ?? TSP_DataReference()}
    set {_uniqueStorage()._posterImageData = newValue}
  }
  /// Returns true if `posterImageData` has been explicitly set.
  var hasPosterImageData: Bool {return _storage._posterImageData != nil}
  /// Clears the value of `posterImageData`. Subsequent reads from it will return its default value.
  mutating func clearPosterImageData() {_uniqueStorage()._posterImageData = nil}

  var symbolAbbreviationText: String {
    get {return _storage._symbolAbbreviationText ?? String()}
    set {_uniqueStorage()._symbolAbbreviationText = newValue}
  }
  /// Returns true if `symbolAbbreviationText` has been explicitly set.
  var hasSymbolAbbreviationText: Bool {return _storage._symbolAbbreviationText != nil}
  /// Clears the value of `symbolAbbreviationText`. Subsequent reads from it will return its default value.
  mutating func clearSymbolAbbreviationText() {_uniqueStorage()._symbolAbbreviationText = nil}

  var symbolImageIdentifier: Int32 {
    get {return _storage._symbolImageIdentifier ?? 0}
    set {_uniqueStorage()._symbolImageIdentifier = newValue}
  }
  /// Returns true if `symbolImageIdentifier` has been explicitly set.
  var hasSymbolImageIdentifier: Bool {return _storage._symbolImageIdentifier != nil}
  /// Clears the value of `symbolImageIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearSymbolImageIdentifier() {_uniqueStorage()._symbolImageIdentifier = nil}

  var symbolTintColorIdentifier: Int32 {
    get {return _storage._symbolTintColorIdentifier ?? 0}
    set {_uniqueStorage()._symbolTintColorIdentifier = newValue}
  }
  /// Returns true if `symbolTintColorIdentifier` has been explicitly set.
  var hasSymbolTintColorIdentifier: Bool {return _storage._symbolTintColorIdentifier != nil}
  /// Clears the value of `symbolTintColorIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearSymbolTintColorIdentifier() {_uniqueStorage()._symbolTintColorIdentifier = nil}

  var isDefaultSource: Bool {
    get {return _storage._isDefaultSource ?? false}
    set {_uniqueStorage()._isDefaultSource = newValue}
  }
  /// Returns true if `isDefaultSource` has been explicitly set.
  var hasIsDefaultSource: Bool {return _storage._isDefaultSource != nil}
  /// Clears the value of `isDefaultSource`. Subsequent reads from it will return its default value.
  mutating func clearIsDefaultSource() {_uniqueStorage()._isDefaultSource = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct KN_LiveVideoSourceCollaborationCommandUsageState: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var singleCollaborationCommandUsageToken: TSP_UUID {
    get {return _singleCollaborationCommandUsageToken ?? TSP_UUID()}
    set {_singleCollaborationCommandUsageToken = newValue}
  }
  /// Returns true if `singleCollaborationCommandUsageToken` has been explicitly set.
  var hasSingleCollaborationCommandUsageToken: Bool {return self._singleCollaborationCommandUsageToken != nil}
  /// Clears the value of `singleCollaborationCommandUsageToken`. Subsequent reads from it will return its default value.
  mutating func clearSingleCollaborationCommandUsageToken() {self._singleCollaborationCommandUsageToken = nil}

  var hasMultipleCollaborationCommandUsageTokens_p: Bool {
    get {return _hasMultipleCollaborationCommandUsageTokens_p ?? false}
    set {_hasMultipleCollaborationCommandUsageTokens_p = newValue}
  }
  /// Returns true if `hasMultipleCollaborationCommandUsageTokens_p` has been explicitly set.
  var hasHasMultipleCollaborationCommandUsageTokens_p: Bool {return self._hasMultipleCollaborationCommandUsageTokens_p != nil}
  /// Clears the value of `hasMultipleCollaborationCommandUsageTokens_p`. Subsequent reads from it will return its default value.
  mutating func clearHasMultipleCollaborationCommandUsageTokens_p() {self._hasMultipleCollaborationCommandUsageTokens_p = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _singleCollaborationCommandUsageToken: TSP_UUID? = nil
  fileprivate var _hasMultipleCollaborationCommandUsageTokens_p: Bool? = nil
}

struct KN_LiveVideoCaptureDeviceDescription: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uniqueID: String {
    get {return _uniqueID ?? String()}
    set {_uniqueID = newValue}
  }
  /// Returns true if `uniqueID` has been explicitly set.
  var hasUniqueID: Bool {return self._uniqueID != nil}
  /// Clears the value of `uniqueID`. Subsequent reads from it will return its default value.
  mutating func clearUniqueID() {self._uniqueID = nil}

  var position: KN_LiveVideoCaptureDeviceDescription.Position {
    get {return _position ?? .unspecified}
    set {_position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  var hasPosition: Bool {return self._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  mutating func clearPosition() {self._position = nil}

  var deviceType: String {
    get {return _deviceType ?? String()}
    set {_deviceType = newValue}
  }
  /// Returns true if `deviceType` has been explicitly set.
  var hasDeviceType: Bool {return self._deviceType != nil}
  /// Clears the value of `deviceType`. Subsequent reads from it will return its default value.
  mutating func clearDeviceType() {self._deviceType = nil}

  var localizedName: String {
    get {return _localizedName ?? String()}
    set {_localizedName = newValue}
  }
  /// Returns true if `localizedName` has been explicitly set.
  var hasLocalizedName: Bool {return self._localizedName != nil}
  /// Clears the value of `localizedName`. Subsequent reads from it will return its default value.
  mutating func clearLocalizedName() {self._localizedName = nil}

  var isIosScreenRecordingDevice: Bool {
    get {return _isIosScreenRecordingDevice ?? false}
    set {_isIosScreenRecordingDevice = newValue}
  }
  /// Returns true if `isIosScreenRecordingDevice` has been explicitly set.
  var hasIsIosScreenRecordingDevice: Bool {return self._isIosScreenRecordingDevice != nil}
  /// Clears the value of `isIosScreenRecordingDevice`. Subsequent reads from it will return its default value.
  mutating func clearIsIosScreenRecordingDevice() {self._isIosScreenRecordingDevice = nil}

  var modelID: String {
    get {return _modelID ?? String()}
    set {_modelID = newValue}
  }
  /// Returns true if `modelID` has been explicitly set.
  var hasModelID: Bool {return self._modelID != nil}
  /// Clears the value of `modelID`. Subsequent reads from it will return its default value.
  mutating func clearModelID() {self._modelID = nil}

  var defaultVideoResolution: TSP_Size {
    get {return _defaultVideoResolution ?? TSP_Size()}
    set {_defaultVideoResolution = newValue}
  }
  /// Returns true if `defaultVideoResolution` has been explicitly set.
  var hasDefaultVideoResolution: Bool {return self._defaultVideoResolution != nil}
  /// Clears the value of `defaultVideoResolution`. Subsequent reads from it will return its default value.
  mutating func clearDefaultVideoResolution() {self._defaultVideoResolution = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Position: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case unspecified = 0
    case back = 1
    case front = 2

    init() {
      self = .unspecified
    }

  }

  init() {}

  fileprivate var _uniqueID: String? = nil
  fileprivate var _position: KN_LiveVideoCaptureDeviceDescription.Position? = nil
  fileprivate var _deviceType: String? = nil
  fileprivate var _localizedName: String? = nil
  fileprivate var _isIosScreenRecordingDevice: Bool? = nil
  fileprivate var _modelID: String? = nil
  fileprivate var _defaultVideoResolution: TSP_Size? = nil
}

struct KN_LiveVideoSourceCollection: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sources: [TSP_Reference] = []

  var defaultSource: TSP_Reference {
    get {return _defaultSource ?? TSP_Reference()}
    set {_defaultSource = newValue}
  }
  /// Returns true if `defaultSource` has been explicitly set.
  var hasDefaultSource: Bool {return self._defaultSource != nil}
  /// Clears the value of `defaultSource`. Subsequent reads from it will return its default value.
  mutating func clearDefaultSource() {self._defaultSource = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _defaultSource: TSP_Reference? = nil
}

struct KN_LiveVideoSourceUsageEntry: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var backgroundKinds: [Int32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct KN_MotionBackgroundStylePropertiesArchive: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var backgroundName: String {
    get {return _storage._backgroundName ?? String()}
    set {_uniqueStorage()._backgroundName = newValue}
  }
  /// Returns true if `backgroundName` has been explicitly set.
  var hasBackgroundName: Bool {return _storage._backgroundName != nil}
  /// Clears the value of `backgroundName`. Subsequent reads from it will return its default value.
  mutating func clearBackgroundName() {_uniqueStorage()._backgroundName = nil}

  var variant: String {
    get {return _storage._variant ?? String()}
    set {_uniqueStorage()._variant = newValue}
  }
  /// Returns true if `variant` has been explicitly set.
  var hasVariant: Bool {return _storage._variant != nil}
  /// Clears the value of `variant`. Subsequent reads from it will return its default value.
  mutating func clearVariant() {_uniqueStorage()._variant = nil}

  var colorGradient: TSD_FillArchive {
    get {return _storage._colorGradient ?? TSD_FillArchive()}
    set {_uniqueStorage()._colorGradient = newValue}
  }
  /// Returns true if `colorGradient` has been explicitly set.
  var hasColorGradient: Bool {return _storage._colorGradient != nil}
  /// Clears the value of `colorGradient`. Subsequent reads from it will return its default value.
  mutating func clearColorGradient() {_uniqueStorage()._colorGradient = nil}

  var randomNumberSeed: Int32 {
    get {return _storage._randomNumberSeed ?? 0}
    set {_uniqueStorage()._randomNumberSeed = newValue}
  }
  /// Returns true if `randomNumberSeed` has been explicitly set.
  var hasRandomNumberSeed: Bool {return _storage._randomNumberSeed != nil}
  /// Clears the value of `randomNumberSeed`. Subsequent reads from it will return its default value.
  mutating func clearRandomNumberSeed() {_uniqueStorage()._randomNumberSeed = nil}

  var colorBlurSigma: Double {
    get {return _storage._colorBlurSigma ?? 0}
    set {_uniqueStorage()._colorBlurSigma = newValue}
  }
  /// Returns true if `colorBlurSigma` has been explicitly set.
  var hasColorBlurSigma: Bool {return _storage._colorBlurSigma != nil}
  /// Clears the value of `colorBlurSigma`. Subsequent reads from it will return its default value.
  mutating func clearColorBlurSigma() {_uniqueStorage()._colorBlurSigma = nil}

  var noiseAmplitude: Double {
    get {return _storage._noiseAmplitude ?? 0}
    set {_uniqueStorage()._noiseAmplitude = newValue}
  }
  /// Returns true if `noiseAmplitude` has been explicitly set.
  var hasNoiseAmplitude: Bool {return _storage._noiseAmplitude != nil}
  /// Clears the value of `noiseAmplitude`. Subsequent reads from it will return its default value.
  mutating func clearNoiseAmplitude() {_uniqueStorage()._noiseAmplitude = nil}

  var noiseOctaves: Double {
    get {return _storage._noiseOctaves ?? 0}
    set {_uniqueStorage()._noiseOctaves = newValue}
  }
  /// Returns true if `noiseOctaves` has been explicitly set.
  var hasNoiseOctaves: Bool {return _storage._noiseOctaves != nil}
  /// Clears the value of `noiseOctaves`. Subsequent reads from it will return its default value.
  mutating func clearNoiseOctaves() {_uniqueStorage()._noiseOctaves = nil}

  var noiseScale: Double {
    get {return _storage._noiseScale ?? 0}
    set {_uniqueStorage()._noiseScale = newValue}
  }
  /// Returns true if `noiseScale` has been explicitly set.
  var hasNoiseScale: Bool {return _storage._noiseScale != nil}
  /// Clears the value of `noiseScale`. Subsequent reads from it will return its default value.
  mutating func clearNoiseScale() {_uniqueStorage()._noiseScale = nil}

  var noiseSpeed: Double {
    get {return _storage._noiseSpeed ?? 0}
    set {_uniqueStorage()._noiseSpeed = newValue}
  }
  /// Returns true if `noiseSpeed` has been explicitly set.
  var hasNoiseSpeed: Bool {return _storage._noiseSpeed != nil}
  /// Clears the value of `noiseSpeed`. Subsequent reads from it will return its default value.
  mutating func clearNoiseSpeed() {_uniqueStorage()._noiseSpeed = nil}

  var colorPaletteOffset: Double {
    get {return _storage._colorPaletteOffset ?? 0}
    set {_uniqueStorage()._colorPaletteOffset = newValue}
  }
  /// Returns true if `colorPaletteOffset` has been explicitly set.
  var hasColorPaletteOffset: Bool {return _storage._colorPaletteOffset != nil}
  /// Clears the value of `colorPaletteOffset`. Subsequent reads from it will return its default value.
  mutating func clearColorPaletteOffset() {_uniqueStorage()._colorPaletteOffset = nil}

  var zoom: Double {
    get {return _storage._zoom ?? 0}
    set {_uniqueStorage()._zoom = newValue}
  }
  /// Returns true if `zoom` has been explicitly set.
  var hasZoom: Bool {return _storage._zoom != nil}
  /// Clears the value of `zoom`. Subsequent reads from it will return its default value.
  mutating func clearZoom() {_uniqueStorage()._zoom = nil}

  var invert: Bool {
    get {return _storage._invert ?? false}
    set {_uniqueStorage()._invert = newValue}
  }
  /// Returns true if `invert` has been explicitly set.
  var hasInvert: Bool {return _storage._invert != nil}
  /// Clears the value of `invert`. Subsequent reads from it will return its default value.
  mutating func clearInvert() {_uniqueStorage()._invert = nil}

  var blendMode: String {
    get {return _storage._blendMode ?? String()}
    set {_uniqueStorage()._blendMode = newValue}
  }
  /// Returns true if `blendMode` has been explicitly set.
  var hasBlendMode: Bool {return _storage._blendMode != nil}
  /// Clears the value of `blendMode`. Subsequent reads from it will return its default value.
  mutating func clearBlendMode() {_uniqueStorage()._blendMode = nil}

  var sourceBlendFactor: String {
    get {return _storage._sourceBlendFactor ?? String()}
    set {_uniqueStorage()._sourceBlendFactor = newValue}
  }
  /// Returns true if `sourceBlendFactor` has been explicitly set.
  var hasSourceBlendFactor: Bool {return _storage._sourceBlendFactor != nil}
  /// Clears the value of `sourceBlendFactor`. Subsequent reads from it will return its default value.
  mutating func clearSourceBlendFactor() {_uniqueStorage()._sourceBlendFactor = nil}

  var destBlendFactor: String {
    get {return _storage._destBlendFactor ?? String()}
    set {_uniqueStorage()._destBlendFactor = newValue}
  }
  /// Returns true if `destBlendFactor` has been explicitly set.
  var hasDestBlendFactor: Bool {return _storage._destBlendFactor != nil}
  /// Clears the value of `destBlendFactor`. Subsequent reads from it will return its default value.
  mutating func clearDestBlendFactor() {_uniqueStorage()._destBlendFactor = nil}

  var motion: String {
    get {return _storage._motion ?? String()}
    set {_uniqueStorage()._motion = newValue}
  }
  /// Returns true if `motion` has been explicitly set.
  var hasMotion: Bool {return _storage._motion != nil}
  /// Clears the value of `motion`. Subsequent reads from it will return its default value.
  mutating func clearMotion() {_uniqueStorage()._motion = nil}

  var backgroundColor: TSP_Color {
    get {return _storage._backgroundColor ?? TSP_Color()}
    set {_uniqueStorage()._backgroundColor = newValue}
  }
  /// Returns true if `backgroundColor` has been explicitly set.
  var hasBackgroundColor: Bool {return _storage._backgroundColor != nil}
  /// Clears the value of `backgroundColor`. Subsequent reads from it will return its default value.
  mutating func clearBackgroundColor() {_uniqueStorage()._backgroundColor = nil}

  var foregroundColor: TSP_Color {
    get {return _storage._foregroundColor ?? TSP_Color()}
    set {_uniqueStorage()._foregroundColor = newValue}
  }
  /// Returns true if `foregroundColor` has been explicitly set.
  var hasForegroundColor: Bool {return _storage._foregroundColor != nil}
  /// Clears the value of `foregroundColor`. Subsequent reads from it will return its default value.
  mutating func clearForegroundColor() {_uniqueStorage()._foregroundColor = nil}

  var lineColor: TSP_Color {
    get {return _storage._lineColor ?? TSP_Color()}
    set {_uniqueStorage()._lineColor = newValue}
  }
  /// Returns true if `lineColor` has been explicitly set.
  var hasLineColor: Bool {return _storage._lineColor != nil}
  /// Clears the value of `lineColor`. Subsequent reads from it will return its default value.
  mutating func clearLineColor() {_uniqueStorage()._lineColor = nil}

  var pointColor: TSP_Color {
    get {return _storage._pointColor ?? TSP_Color()}
    set {_uniqueStorage()._pointColor = newValue}
  }
  /// Returns true if `pointColor` has been explicitly set.
  var hasPointColor: Bool {return _storage._pointColor != nil}
  /// Clears the value of `pointColor`. Subsequent reads from it will return its default value.
  mutating func clearPointColor() {_uniqueStorage()._pointColor = nil}

  var alpha: Double {
    get {return _storage._alpha ?? 0}
    set {_uniqueStorage()._alpha = newValue}
  }
  /// Returns true if `alpha` has been explicitly set.
  var hasAlpha: Bool {return _storage._alpha != nil}
  /// Clears the value of `alpha`. Subsequent reads from it will return its default value.
  mutating func clearAlpha() {_uniqueStorage()._alpha = nil}

  var border: Double {
    get {return _storage._border ?? 0}
    set {_uniqueStorage()._border = newValue}
  }
  /// Returns true if `border` has been explicitly set.
  var hasBorder: Bool {return _storage._border != nil}
  /// Clears the value of `border`. Subsequent reads from it will return its default value.
  mutating func clearBorder() {_uniqueStorage()._border = nil}

  var blend: Double {
    get {return _storage._blend ?? 0}
    set {_uniqueStorage()._blend = newValue}
  }
  /// Returns true if `blend` has been explicitly set.
  var hasBlend: Bool {return _storage._blend != nil}
  /// Clears the value of `blend`. Subsequent reads from it will return its default value.
  mutating func clearBlend() {_uniqueStorage()._blend = nil}

  var brightness: Double {
    get {return _storage._brightness ?? 0}
    set {_uniqueStorage()._brightness = newValue}
  }
  /// Returns true if `brightness` has been explicitly set.
  var hasBrightness: Bool {return _storage._brightness != nil}
  /// Clears the value of `brightness`. Subsequent reads from it will return its default value.
  mutating func clearBrightness() {_uniqueStorage()._brightness = nil}

  var borderLightness: Double {
    get {return _storage._borderLightness ?? 0}
    set {_uniqueStorage()._borderLightness = newValue}
  }
  /// Returns true if `borderLightness` has been explicitly set.
  var hasBorderLightness: Bool {return _storage._borderLightness != nil}
  /// Clears the value of `borderLightness`. Subsequent reads from it will return its default value.
  mutating func clearBorderLightness() {_uniqueStorage()._borderLightness = nil}

  var contrast: Double {
    get {return _storage._contrast ?? 0}
    set {_uniqueStorage()._contrast = newValue}
  }
  /// Returns true if `contrast` has been explicitly set.
  var hasContrast: Bool {return _storage._contrast != nil}
  /// Clears the value of `contrast`. Subsequent reads from it will return its default value.
  mutating func clearContrast() {_uniqueStorage()._contrast = nil}

  var damping: Double {
    get {return _storage._damping ?? 0}
    set {_uniqueStorage()._damping = newValue}
  }
  /// Returns true if `damping` has been explicitly set.
  var hasDamping: Bool {return _storage._damping != nil}
  /// Clears the value of `damping`. Subsequent reads from it will return its default value.
  mutating func clearDamping() {_uniqueStorage()._damping = nil}

  var density: Double {
    get {return _storage._density ?? 0}
    set {_uniqueStorage()._density = newValue}
  }
  /// Returns true if `density` has been explicitly set.
  var hasDensity: Bool {return _storage._density != nil}
  /// Clears the value of `density`. Subsequent reads from it will return its default value.
  mutating func clearDensity() {_uniqueStorage()._density = nil}

  var diffusePower: Double {
    get {return _storage._diffusePower ?? 0}
    set {_uniqueStorage()._diffusePower = newValue}
  }
  /// Returns true if `diffusePower` has been explicitly set.
  var hasDiffusePower: Bool {return _storage._diffusePower != nil}
  /// Clears the value of `diffusePower`. Subsequent reads from it will return its default value.
  mutating func clearDiffusePower() {_uniqueStorage()._diffusePower = nil}

  var distortion: Double {
    get {return _storage._distortion ?? 0}
    set {_uniqueStorage()._distortion = newValue}
  }
  /// Returns true if `distortion` has been explicitly set.
  var hasDistortion: Bool {return _storage._distortion != nil}
  /// Clears the value of `distortion`. Subsequent reads from it will return its default value.
  mutating func clearDistortion() {_uniqueStorage()._distortion = nil}

  var entropy: Double {
    get {return _storage._entropy ?? 0}
    set {_uniqueStorage()._entropy = newValue}
  }
  /// Returns true if `entropy` has been explicitly set.
  var hasEntropy: Bool {return _storage._entropy != nil}
  /// Clears the value of `entropy`. Subsequent reads from it will return its default value.
  mutating func clearEntropy() {_uniqueStorage()._entropy = nil}

  var exposure: Double {
    get {return _storage._exposure ?? 0}
    set {_uniqueStorage()._exposure = newValue}
  }
  /// Returns true if `exposure` has been explicitly set.
  var hasExposure: Bool {return _storage._exposure != nil}
  /// Clears the value of `exposure`. Subsequent reads from it will return its default value.
  mutating func clearExposure() {_uniqueStorage()._exposure = nil}

  var filter: Double {
    get {return _storage._filter ?? 0}
    set {_uniqueStorage()._filter = newValue}
  }
  /// Returns true if `filter` has been explicitly set.
  var hasFilter: Bool {return _storage._filter != nil}
  /// Clears the value of `filter`. Subsequent reads from it will return its default value.
  mutating func clearFilter() {_uniqueStorage()._filter = nil}

  var fogDistance: Double {
    get {return _storage._fogDistance ?? 0}
    set {_uniqueStorage()._fogDistance = newValue}
  }
  /// Returns true if `fogDistance` has been explicitly set.
  var hasFogDistance: Bool {return _storage._fogDistance != nil}
  /// Clears the value of `fogDistance`. Subsequent reads from it will return its default value.
  mutating func clearFogDistance() {_uniqueStorage()._fogDistance = nil}

  var fogPower: Double {
    get {return _storage._fogPower ?? 0}
    set {_uniqueStorage()._fogPower = newValue}
  }
  /// Returns true if `fogPower` has been explicitly set.
  var hasFogPower: Bool {return _storage._fogPower != nil}
  /// Clears the value of `fogPower`. Subsequent reads from it will return its default value.
  mutating func clearFogPower() {_uniqueStorage()._fogPower = nil}

  var gamma: Double {
    get {return _storage._gamma ?? 0}
    set {_uniqueStorage()._gamma = newValue}
  }
  /// Returns true if `gamma` has been explicitly set.
  var hasGamma: Bool {return _storage._gamma != nil}
  /// Clears the value of `gamma`. Subsequent reads from it will return its default value.
  mutating func clearGamma() {_uniqueStorage()._gamma = nil}

  var grainAmount: Double {
    get {return _storage._grainAmount ?? 0}
    set {_uniqueStorage()._grainAmount = newValue}
  }
  /// Returns true if `grainAmount` has been explicitly set.
  var hasGrainAmount: Bool {return _storage._grainAmount != nil}
  /// Clears the value of `grainAmount`. Subsequent reads from it will return its default value.
  mutating func clearGrainAmount() {_uniqueStorage()._grainAmount = nil}

  var grainIntensity: Double {
    get {return _storage._grainIntensity ?? 0}
    set {_uniqueStorage()._grainIntensity = newValue}
  }
  /// Returns true if `grainIntensity` has been explicitly set.
  var hasGrainIntensity: Bool {return _storage._grainIntensity != nil}
  /// Clears the value of `grainIntensity`. Subsequent reads from it will return its default value.
  mutating func clearGrainIntensity() {_uniqueStorage()._grainIntensity = nil}

  var hue: Double {
    get {return _storage._hue ?? 0}
    set {_uniqueStorage()._hue = newValue}
  }
  /// Returns true if `hue` has been explicitly set.
  var hasHue: Bool {return _storage._hue != nil}
  /// Clears the value of `hue`. Subsequent reads from it will return its default value.
  mutating func clearHue() {_uniqueStorage()._hue = nil}

  var lightness: Double {
    get {return _storage._lightness ?? 0}
    set {_uniqueStorage()._lightness = newValue}
  }
  /// Returns true if `lightness` has been explicitly set.
  var hasLightness: Bool {return _storage._lightness != nil}
  /// Clears the value of `lightness`. Subsequent reads from it will return its default value.
  mutating func clearLightness() {_uniqueStorage()._lightness = nil}

  var lineAlpha: Double {
    get {return _storage._lineAlpha ?? 0}
    set {_uniqueStorage()._lineAlpha = newValue}
  }
  /// Returns true if `lineAlpha` has been explicitly set.
  var hasLineAlpha: Bool {return _storage._lineAlpha != nil}
  /// Clears the value of `lineAlpha`. Subsequent reads from it will return its default value.
  mutating func clearLineAlpha() {_uniqueStorage()._lineAlpha = nil}

  var lineCenter: Double {
    get {return _storage._lineCenter ?? 0}
    set {_uniqueStorage()._lineCenter = newValue}
  }
  /// Returns true if `lineCenter` has been explicitly set.
  var hasLineCenter: Bool {return _storage._lineCenter != nil}
  /// Clears the value of `lineCenter`. Subsequent reads from it will return its default value.
  mutating func clearLineCenter() {_uniqueStorage()._lineCenter = nil}

  var lineFade: Double {
    get {return _storage._lineFade ?? 0}
    set {_uniqueStorage()._lineFade = newValue}
  }
  /// Returns true if `lineFade` has been explicitly set.
  var hasLineFade: Bool {return _storage._lineFade != nil}
  /// Clears the value of `lineFade`. Subsequent reads from it will return its default value.
  mutating func clearLineFade() {_uniqueStorage()._lineFade = nil}

  var lineFadePower: Double {
    get {return _storage._lineFadePower ?? 0}
    set {_uniqueStorage()._lineFadePower = newValue}
  }
  /// Returns true if `lineFadePower` has been explicitly set.
  var hasLineFadePower: Bool {return _storage._lineFadePower != nil}
  /// Clears the value of `lineFadePower`. Subsequent reads from it will return its default value.
  mutating func clearLineFadePower() {_uniqueStorage()._lineFadePower = nil}

  var lineLength: Double {
    get {return _storage._lineLength ?? 0}
    set {_uniqueStorage()._lineLength = newValue}
  }
  /// Returns true if `lineLength` has been explicitly set.
  var hasLineLength: Bool {return _storage._lineLength != nil}
  /// Clears the value of `lineLength`. Subsequent reads from it will return its default value.
  mutating func clearLineLength() {_uniqueStorage()._lineLength = nil}

  var lineWidth: Double {
    get {return _storage._lineWidth ?? 0}
    set {_uniqueStorage()._lineWidth = newValue}
  }
  /// Returns true if `lineWidth` has been explicitly set.
  var hasLineWidth: Bool {return _storage._lineWidth != nil}
  /// Clears the value of `lineWidth`. Subsequent reads from it will return its default value.
  mutating func clearLineWidth() {_uniqueStorage()._lineWidth = nil}

  var noiseSizeScale: Double {
    get {return _storage._noiseSizeScale ?? 0}
    set {_uniqueStorage()._noiseSizeScale = newValue}
  }
  /// Returns true if `noiseSizeScale` has been explicitly set.
  var hasNoiseSizeScale: Bool {return _storage._noiseSizeScale != nil}
  /// Clears the value of `noiseSizeScale`. Subsequent reads from it will return its default value.
  mutating func clearNoiseSizeScale() {_uniqueStorage()._noiseSizeScale = nil}

  var noiseSizeWeight: Double {
    get {return _storage._noiseSizeWeight ?? 0}
    set {_uniqueStorage()._noiseSizeWeight = newValue}
  }
  /// Returns true if `noiseSizeWeight` has been explicitly set.
  var hasNoiseSizeWeight: Bool {return _storage._noiseSizeWeight != nil}
  /// Clears the value of `noiseSizeWeight`. Subsequent reads from it will return its default value.
  mutating func clearNoiseSizeWeight() {_uniqueStorage()._noiseSizeWeight = nil}

  var noiseVariance: Double {
    get {return _storage._noiseVariance ?? 0}
    set {_uniqueStorage()._noiseVariance = newValue}
  }
  /// Returns true if `noiseVariance` has been explicitly set.
  var hasNoiseVariance: Bool {return _storage._noiseVariance != nil}
  /// Clears the value of `noiseVariance`. Subsequent reads from it will return its default value.
  mutating func clearNoiseVariance() {_uniqueStorage()._noiseVariance = nil}

  var offset: Double {
    get {return _storage._offset ?? 0}
    set {_uniqueStorage()._offset = newValue}
  }
  /// Returns true if `offset` has been explicitly set.
  var hasOffset: Bool {return _storage._offset != nil}
  /// Clears the value of `offset`. Subsequent reads from it will return its default value.
  mutating func clearOffset() {_uniqueStorage()._offset = nil}

  var motionBackgroundOpacity: Double {
    get {return _storage._motionBackgroundOpacity ?? 0}
    set {_uniqueStorage()._motionBackgroundOpacity = newValue}
  }
  /// Returns true if `motionBackgroundOpacity` has been explicitly set.
  var hasMotionBackgroundOpacity: Bool {return _storage._motionBackgroundOpacity != nil}
  /// Clears the value of `motionBackgroundOpacity`. Subsequent reads from it will return its default value.
  mutating func clearMotionBackgroundOpacity() {_uniqueStorage()._motionBackgroundOpacity = nil}

  var pointDepthAlpha: Double {
    get {return _storage._pointDepthAlpha ?? 0}
    set {_uniqueStorage()._pointDepthAlpha = newValue}
  }
  /// Returns true if `pointDepthAlpha` has been explicitly set.
  var hasPointDepthAlpha: Bool {return _storage._pointDepthAlpha != nil}
  /// Clears the value of `pointDepthAlpha`. Subsequent reads from it will return its default value.
  mutating func clearPointDepthAlpha() {_uniqueStorage()._pointDepthAlpha = nil}

  var pointSize: Double {
    get {return _storage._pointSize ?? 0}
    set {_uniqueStorage()._pointSize = newValue}
  }
  /// Returns true if `pointSize` has been explicitly set.
  var hasPointSize: Bool {return _storage._pointSize != nil}
  /// Clears the value of `pointSize`. Subsequent reads from it will return its default value.
  mutating func clearPointSize() {_uniqueStorage()._pointSize = nil}

  var radius: Double {
    get {return _storage._radius ?? 0}
    set {_uniqueStorage()._radius = newValue}
  }
  /// Returns true if `radius` has been explicitly set.
  var hasRadius: Bool {return _storage._radius != nil}
  /// Clears the value of `radius`. Subsequent reads from it will return its default value.
  mutating func clearRadius() {_uniqueStorage()._radius = nil}

  var refraction: Double {
    get {return _storage._refraction ?? 0}
    set {_uniqueStorage()._refraction = newValue}
  }
  /// Returns true if `refraction` has been explicitly set.
  var hasRefraction: Bool {return _storage._refraction != nil}
  /// Clears the value of `refraction`. Subsequent reads from it will return its default value.
  mutating func clearRefraction() {_uniqueStorage()._refraction = nil}

  var resolution: Double {
    get {return _storage._resolution ?? 0}
    set {_uniqueStorage()._resolution = newValue}
  }
  /// Returns true if `resolution` has been explicitly set.
  var hasResolution: Bool {return _storage._resolution != nil}
  /// Clears the value of `resolution`. Subsequent reads from it will return its default value.
  mutating func clearResolution() {_uniqueStorage()._resolution = nil}

  var saturation: Double {
    get {return _storage._saturation ?? 0}
    set {_uniqueStorage()._saturation = newValue}
  }
  /// Returns true if `saturation` has been explicitly set.
  var hasSaturation: Bool {return _storage._saturation != nil}
  /// Clears the value of `saturation`. Subsequent reads from it will return its default value.
  mutating func clearSaturation() {_uniqueStorage()._saturation = nil}

  var scale: Double {
    get {return _storage._scale ?? 0}
    set {_uniqueStorage()._scale = newValue}
  }
  /// Returns true if `scale` has been explicitly set.
  var hasScale: Bool {return _storage._scale != nil}
  /// Clears the value of `scale`. Subsequent reads from it will return its default value.
  mutating func clearScale() {_uniqueStorage()._scale = nil}

  var shadowAlpha: Double {
    get {return _storage._shadowAlpha ?? 0}
    set {_uniqueStorage()._shadowAlpha = newValue}
  }
  /// Returns true if `shadowAlpha` has been explicitly set.
  var hasShadowAlpha: Bool {return _storage._shadowAlpha != nil}
  /// Clears the value of `shadowAlpha`. Subsequent reads from it will return its default value.
  mutating func clearShadowAlpha() {_uniqueStorage()._shadowAlpha = nil}

  var shadowAngle: Double {
    get {return _storage._shadowAngle ?? 0}
    set {_uniqueStorage()._shadowAngle = newValue}
  }
  /// Returns true if `shadowAngle` has been explicitly set.
  var hasShadowAngle: Bool {return _storage._shadowAngle != nil}
  /// Clears the value of `shadowAngle`. Subsequent reads from it will return its default value.
  mutating func clearShadowAngle() {_uniqueStorage()._shadowAngle = nil}

  var shadowOffset: Double {
    get {return _storage._shadowOffset ?? 0}
    set {_uniqueStorage()._shadowOffset = newValue}
  }
  /// Returns true if `shadowOffset` has been explicitly set.
  var hasShadowOffset: Bool {return _storage._shadowOffset != nil}
  /// Clears the value of `shadowOffset`. Subsequent reads from it will return its default value.
  mutating func clearShadowOffset() {_uniqueStorage()._shadowOffset = nil}

  var shadowScale: Double {
    get {return _storage._shadowScale ?? 0}
    set {_uniqueStorage()._shadowScale = newValue}
  }
  /// Returns true if `shadowScale` has been explicitly set.
  var hasShadowScale: Bool {return _storage._shadowScale != nil}
  /// Clears the value of `shadowScale`. Subsequent reads from it will return its default value.
  mutating func clearShadowScale() {_uniqueStorage()._shadowScale = nil}

  var shadowValue: Double {
    get {return _storage._shadowValue ?? 0}
    set {_uniqueStorage()._shadowValue = newValue}
  }
  /// Returns true if `shadowValue` has been explicitly set.
  var hasShadowValue: Bool {return _storage._shadowValue != nil}
  /// Clears the value of `shadowValue`. Subsequent reads from it will return its default value.
  mutating func clearShadowValue() {_uniqueStorage()._shadowValue = nil}

  var speed: Double {
    get {return _storage._speed ?? 0}
    set {_uniqueStorage()._speed = newValue}
  }
  /// Returns true if `speed` has been explicitly set.
  var hasSpeed: Bool {return _storage._speed != nil}
  /// Clears the value of `speed`. Subsequent reads from it will return its default value.
  mutating func clearSpeed() {_uniqueStorage()._speed = nil}

  var texturePower: Double {
    get {return _storage._texturePower ?? 0}
    set {_uniqueStorage()._texturePower = newValue}
  }
  /// Returns true if `texturePower` has been explicitly set.
  var hasTexturePower: Bool {return _storage._texturePower != nil}
  /// Clears the value of `texturePower`. Subsequent reads from it will return its default value.
  mutating func clearTexturePower() {_uniqueStorage()._texturePower = nil}

  var time: Double {
    get {return _storage._time ?? 0}
    set {_uniqueStorage()._time = newValue}
  }
  /// Returns true if `time` has been explicitly set.
  var hasTime: Bool {return _storage._time != nil}
  /// Clears the value of `time`. Subsequent reads from it will return its default value.
  mutating func clearTime() {_uniqueStorage()._time = nil}

  var drawPoints: Bool {
    get {return _storage._drawPoints ?? false}
    set {_uniqueStorage()._drawPoints = newValue}
  }
  /// Returns true if `drawPoints` has been explicitly set.
  var hasDrawPoints: Bool {return _storage._drawPoints != nil}
  /// Clears the value of `drawPoints`. Subsequent reads from it will return its default value.
  mutating func clearDrawPoints() {_uniqueStorage()._drawPoints = nil}

  var drawLines: Bool {
    get {return _storage._drawLines ?? false}
    set {_uniqueStorage()._drawLines = newValue}
  }
  /// Returns true if `drawLines` has been explicitly set.
  var hasDrawLines: Bool {return _storage._drawLines != nil}
  /// Clears the value of `drawLines`. Subsequent reads from it will return its default value.
  mutating func clearDrawLines() {_uniqueStorage()._drawLines = nil}

  var drawShadows: Bool {
    get {return _storage._drawShadows ?? false}
    set {_uniqueStorage()._drawShadows = newValue}
  }
  /// Returns true if `drawShadows` has been explicitly set.
  var hasDrawShadows: Bool {return _storage._drawShadows != nil}
  /// Clears the value of `drawShadows`. Subsequent reads from it will return its default value.
  mutating func clearDrawShadows() {_uniqueStorage()._drawShadows = nil}

  var pixelsPerDivision: UInt32 {
    get {return _storage._pixelsPerDivision ?? 0}
    set {_uniqueStorage()._pixelsPerDivision = newValue}
  }
  /// Returns true if `pixelsPerDivision` has been explicitly set.
  var hasPixelsPerDivision: Bool {return _storage._pixelsPerDivision != nil}
  /// Clears the value of `pixelsPerDivision`. Subsequent reads from it will return its default value.
  mutating func clearPixelsPerDivision() {_uniqueStorage()._pixelsPerDivision = nil}

  var symmetry: Bool {
    get {return _storage._symmetry ?? false}
    set {_uniqueStorage()._symmetry = newValue}
  }
  /// Returns true if `symmetry` has been explicitly set.
  var hasSymmetry: Bool {return _storage._symmetry != nil}
  /// Clears the value of `symmetry`. Subsequent reads from it will return its default value.
  mutating func clearSymmetry() {_uniqueStorage()._symmetry = nil}

  var lockFocus: Bool {
    get {return _storage._lockFocus ?? false}
    set {_uniqueStorage()._lockFocus = newValue}
  }
  /// Returns true if `lockFocus` has been explicitly set.
  var hasLockFocus: Bool {return _storage._lockFocus != nil}
  /// Clears the value of `lockFocus`. Subsequent reads from it will return its default value.
  mutating func clearLockFocus() {_uniqueStorage()._lockFocus = nil}

  var amplitude: Double {
    get {return _storage._amplitude ?? 0}
    set {_uniqueStorage()._amplitude = newValue}
  }
  /// Returns true if `amplitude` has been explicitly set.
  var hasAmplitude: Bool {return _storage._amplitude != nil}
  /// Clears the value of `amplitude`. Subsequent reads from it will return its default value.
  mutating func clearAmplitude() {_uniqueStorage()._amplitude = nil}

  var envelope: Double {
    get {return _storage._envelope ?? 0}
    set {_uniqueStorage()._envelope = newValue}
  }
  /// Returns true if `envelope` has been explicitly set.
  var hasEnvelope: Bool {return _storage._envelope != nil}
  /// Clears the value of `envelope`. Subsequent reads from it will return its default value.
  mutating func clearEnvelope() {_uniqueStorage()._envelope = nil}

  var yOffset: Double {
    get {return _storage._yOffset ?? 0}
    set {_uniqueStorage()._yOffset = newValue}
  }
  /// Returns true if `yOffset` has been explicitly set.
  var hasYOffset: Bool {return _storage._yOffset != nil}
  /// Clears the value of `yOffset`. Subsequent reads from it will return its default value.
  mutating func clearYOffset() {_uniqueStorage()._yOffset = nil}

  var focus: Double {
    get {return _storage._focus ?? 0}
    set {_uniqueStorage()._focus = newValue}
  }
  /// Returns true if `focus` has been explicitly set.
  var hasFocus: Bool {return _storage._focus != nil}
  /// Clears the value of `focus`. Subsequent reads from it will return its default value.
  mutating func clearFocus() {_uniqueStorage()._focus = nil}

  var blur: Double {
    get {return _storage._blur ?? 0}
    set {_uniqueStorage()._blur = newValue}
  }
  /// Returns true if `blur` has been explicitly set.
  var hasBlur: Bool {return _storage._blur != nil}
  /// Clears the value of `blur`. Subsequent reads from it will return its default value.
  mutating func clearBlur() {_uniqueStorage()._blur = nil}

  var grainSpeed: Double {
    get {return _storage._grainSpeed ?? 0}
    set {_uniqueStorage()._grainSpeed = newValue}
  }
  /// Returns true if `grainSpeed` has been explicitly set.
  var hasGrainSpeed: Bool {return _storage._grainSpeed != nil}
  /// Clears the value of `grainSpeed`. Subsequent reads from it will return its default value.
  mutating func clearGrainSpeed() {_uniqueStorage()._grainSpeed = nil}

  var meshColor: TSP_Color {
    get {return _storage._meshColor ?? TSP_Color()}
    set {_uniqueStorage()._meshColor = newValue}
  }
  /// Returns true if `meshColor` has been explicitly set.
  var hasMeshColor: Bool {return _storage._meshColor != nil}
  /// Clears the value of `meshColor`. Subsequent reads from it will return its default value.
  mutating func clearMeshColor() {_uniqueStorage()._meshColor = nil}

  var angle: Double {
    get {return _storage._angle ?? 0}
    set {_uniqueStorage()._angle = newValue}
  }
  /// Returns true if `angle` has been explicitly set.
  var hasAngle: Bool {return _storage._angle != nil}
  /// Clears the value of `angle`. Subsequent reads from it will return its default value.
  mutating func clearAngle() {_uniqueStorage()._angle = nil}

  var meshLineWidth: Double {
    get {return _storage._meshLineWidth ?? 0}
    set {_uniqueStorage()._meshLineWidth = newValue}
  }
  /// Returns true if `meshLineWidth` has been explicitly set.
  var hasMeshLineWidth: Bool {return _storage._meshLineWidth != nil}
  /// Clears the value of `meshLineWidth`. Subsequent reads from it will return its default value.
  mutating func clearMeshLineWidth() {_uniqueStorage()._meshLineWidth = nil}

  var deltaTime: Double {
    get {return _storage._deltaTime ?? 0}
    set {_uniqueStorage()._deltaTime = newValue}
  }
  /// Returns true if `deltaTime` has been explicitly set.
  var hasDeltaTime: Bool {return _storage._deltaTime != nil}
  /// Clears the value of `deltaTime`. Subsequent reads from it will return its default value.
  mutating func clearDeltaTime() {_uniqueStorage()._deltaTime = nil}

  var timeStart: Double {
    get {return _storage._timeStart ?? 0}
    set {_uniqueStorage()._timeStart = newValue}
  }
  /// Returns true if `timeStart` has been explicitly set.
  var hasTimeStart: Bool {return _storage._timeStart != nil}
  /// Clears the value of `timeStart`. Subsequent reads from it will return its default value.
  mutating func clearTimeStart() {_uniqueStorage()._timeStart = nil}

  var colorContrast: Double {
    get {return _storage._colorContrast ?? 0}
    set {_uniqueStorage()._colorContrast = newValue}
  }
  /// Returns true if `colorContrast` has been explicitly set.
  var hasColorContrast: Bool {return _storage._colorContrast != nil}
  /// Clears the value of `colorContrast`. Subsequent reads from it will return its default value.
  mutating func clearColorContrast() {_uniqueStorage()._colorContrast = nil}

  var colorGamma: Double {
    get {return _storage._colorGamma ?? 0}
    set {_uniqueStorage()._colorGamma = newValue}
  }
  /// Returns true if `colorGamma` has been explicitly set.
  var hasColorGamma: Bool {return _storage._colorGamma != nil}
  /// Clears the value of `colorGamma`. Subsequent reads from it will return its default value.
  mutating func clearColorGamma() {_uniqueStorage()._colorGamma = nil}

  var colorSaturation: Double {
    get {return _storage._colorSaturation ?? 0}
    set {_uniqueStorage()._colorSaturation = newValue}
  }
  /// Returns true if `colorSaturation` has been explicitly set.
  var hasColorSaturation: Bool {return _storage._colorSaturation != nil}
  /// Clears the value of `colorSaturation`. Subsequent reads from it will return its default value.
  mutating func clearColorSaturation() {_uniqueStorage()._colorSaturation = nil}

  var colorBrightness: Double {
    get {return _storage._colorBrightness ?? 0}
    set {_uniqueStorage()._colorBrightness = newValue}
  }
  /// Returns true if `colorBrightness` has been explicitly set.
  var hasColorBrightness: Bool {return _storage._colorBrightness != nil}
  /// Clears the value of `colorBrightness`. Subsequent reads from it will return its default value.
  mutating func clearColorBrightness() {_uniqueStorage()._colorBrightness = nil}

  var colorHue: Double {
    get {return _storage._colorHue ?? 0}
    set {_uniqueStorage()._colorHue = newValue}
  }
  /// Returns true if `colorHue` has been explicitly set.
  var hasColorHue: Bool {return _storage._colorHue != nil}
  /// Clears the value of `colorHue`. Subsequent reads from it will return its default value.
  mutating func clearColorHue() {_uniqueStorage()._colorHue = nil}

  var colorVibrance: Double {
    get {return _storage._colorVibrance ?? 0}
    set {_uniqueStorage()._colorVibrance = newValue}
  }
  /// Returns true if `colorVibrance` has been explicitly set.
  var hasColorVibrance: Bool {return _storage._colorVibrance != nil}
  /// Clears the value of `colorVibrance`. Subsequent reads from it will return its default value.
  mutating func clearColorVibrance() {_uniqueStorage()._colorVibrance = nil}

  var noiseMovement: Double {
    get {return _storage._noiseMovement ?? 0}
    set {_uniqueStorage()._noiseMovement = newValue}
  }
  /// Returns true if `noiseMovement` has been explicitly set.
  var hasNoiseMovement: Bool {return _storage._noiseMovement != nil}
  /// Clears the value of `noiseMovement`. Subsequent reads from it will return its default value.
  mutating func clearNoiseMovement() {_uniqueStorage()._noiseMovement = nil}

  var power: Double {
    get {return _storage._power ?? 0}
    set {_uniqueStorage()._power = newValue}
  }
  /// Returns true if `power` has been explicitly set.
  var hasPower: Bool {return _storage._power != nil}
  /// Clears the value of `power`. Subsequent reads from it will return its default value.
  mutating func clearPower() {_uniqueStorage()._power = nil}

  var threshold: Double {
    get {return _storage._threshold ?? 0}
    set {_uniqueStorage()._threshold = newValue}
  }
  /// Returns true if `threshold` has been explicitly set.
  var hasThreshold: Bool {return _storage._threshold != nil}
  /// Clears the value of `threshold`. Subsequent reads from it will return its default value.
  mutating func clearThreshold() {_uniqueStorage()._threshold = nil}

  var noiseScaleHorizontal: Double {
    get {return _storage._noiseScaleHorizontal ?? 0}
    set {_uniqueStorage()._noiseScaleHorizontal = newValue}
  }
  /// Returns true if `noiseScaleHorizontal` has been explicitly set.
  var hasNoiseScaleHorizontal: Bool {return _storage._noiseScaleHorizontal != nil}
  /// Clears the value of `noiseScaleHorizontal`. Subsequent reads from it will return its default value.
  mutating func clearNoiseScaleHorizontal() {_uniqueStorage()._noiseScaleHorizontal = nil}

  var noiseScaleVertical: Double {
    get {return _storage._noiseScaleVertical ?? 0}
    set {_uniqueStorage()._noiseScaleVertical = newValue}
  }
  /// Returns true if `noiseScaleVertical` has been explicitly set.
  var hasNoiseScaleVertical: Bool {return _storage._noiseScaleVertical != nil}
  /// Clears the value of `noiseScaleVertical`. Subsequent reads from it will return its default value.
  mutating func clearNoiseScaleVertical() {_uniqueStorage()._noiseScaleVertical = nil}

  var noiseGain: Double {
    get {return _storage._noiseGain ?? 0}
    set {_uniqueStorage()._noiseGain = newValue}
  }
  /// Returns true if `noiseGain` has been explicitly set.
  var hasNoiseGain: Bool {return _storage._noiseGain != nil}
  /// Clears the value of `noiseGain`. Subsequent reads from it will return its default value.
  mutating func clearNoiseGain() {_uniqueStorage()._noiseGain = nil}

  var noiseLacunarity: Double {
    get {return _storage._noiseLacunarity ?? 0}
    set {_uniqueStorage()._noiseLacunarity = newValue}
  }
  /// Returns true if `noiseLacunarity` has been explicitly set.
  var hasNoiseLacunarity: Bool {return _storage._noiseLacunarity != nil}
  /// Clears the value of `noiseLacunarity`. Subsequent reads from it will return its default value.
  mutating func clearNoiseLacunarity() {_uniqueStorage()._noiseLacunarity = nil}

  var instanceCount: Int32 {
    get {return _storage._instanceCount ?? 0}
    set {_uniqueStorage()._instanceCount = newValue}
  }
  /// Returns true if `instanceCount` has been explicitly set.
  var hasInstanceCount: Bool {return _storage._instanceCount != nil}
  /// Clears the value of `instanceCount`. Subsequent reads from it will return its default value.
  mutating func clearInstanceCount() {_uniqueStorage()._instanceCount = nil}

  var extrusion: Double {
    get {return _storage._extrusion ?? 0}
    set {_uniqueStorage()._extrusion = newValue}
  }
  /// Returns true if `extrusion` has been explicitly set.
  var hasExtrusion: Bool {return _storage._extrusion != nil}
  /// Clears the value of `extrusion`. Subsequent reads from it will return its default value.
  mutating func clearExtrusion() {_uniqueStorage()._extrusion = nil}

  var noiseOffset: Double {
    get {return _storage._noiseOffset ?? 0}
    set {_uniqueStorage()._noiseOffset = newValue}
  }
  /// Returns true if `noiseOffset` has been explicitly set.
  var hasNoiseOffset: Bool {return _storage._noiseOffset != nil}
  /// Clears the value of `noiseOffset`. Subsequent reads from it will return its default value.
  mutating func clearNoiseOffset() {_uniqueStorage()._noiseOffset = nil}

  var colorHueOffset: Double {
    get {return _storage._colorHueOffset ?? 0}
    set {_uniqueStorage()._colorHueOffset = newValue}
  }
  /// Returns true if `colorHueOffset` has been explicitly set.
  var hasColorHueOffset: Bool {return _storage._colorHueOffset != nil}
  /// Clears the value of `colorHueOffset`. Subsequent reads from it will return its default value.
  mutating func clearColorHueOffset() {_uniqueStorage()._colorHueOffset = nil}

  var shadowHue: Double {
    get {return _storage._shadowHue ?? 0}
    set {_uniqueStorage()._shadowHue = newValue}
  }
  /// Returns true if `shadowHue` has been explicitly set.
  var hasShadowHue: Bool {return _storage._shadowHue != nil}
  /// Clears the value of `shadowHue`. Subsequent reads from it will return its default value.
  mutating func clearShadowHue() {_uniqueStorage()._shadowHue = nil}

  var shadowHueOffset: Double {
    get {return _storage._shadowHueOffset ?? 0}
    set {_uniqueStorage()._shadowHueOffset = newValue}
  }
  /// Returns true if `shadowHueOffset` has been explicitly set.
  var hasShadowHueOffset: Bool {return _storage._shadowHueOffset != nil}
  /// Clears the value of `shadowHueOffset`. Subsequent reads from it will return its default value.
  mutating func clearShadowHueOffset() {_uniqueStorage()._shadowHueOffset = nil}

  var shadowSaturation: Double {
    get {return _storage._shadowSaturation ?? 0}
    set {_uniqueStorage()._shadowSaturation = newValue}
  }
  /// Returns true if `shadowSaturation` has been explicitly set.
  var hasShadowSaturation: Bool {return _storage._shadowSaturation != nil}
  /// Clears the value of `shadowSaturation`. Subsequent reads from it will return its default value.
  mutating func clearShadowSaturation() {_uniqueStorage()._shadowSaturation = nil}

  var shadowBrightness: Double {
    get {return _storage._shadowBrightness ?? 0}
    set {_uniqueStorage()._shadowBrightness = newValue}
  }
  /// Returns true if `shadowBrightness` has been explicitly set.
  var hasShadowBrightness: Bool {return _storage._shadowBrightness != nil}
  /// Clears the value of `shadowBrightness`. Subsequent reads from it will return its default value.
  mutating func clearShadowBrightness() {_uniqueStorage()._shadowBrightness = nil}

  var shadowIntensity: Double {
    get {return _storage._shadowIntensity ?? 0}
    set {_uniqueStorage()._shadowIntensity = newValue}
  }
  /// Returns true if `shadowIntensity` has been explicitly set.
  var hasShadowIntensity: Bool {return _storage._shadowIntensity != nil}
  /// Clears the value of `shadowIntensity`. Subsequent reads from it will return its default value.
  mutating func clearShadowIntensity() {_uniqueStorage()._shadowIntensity = nil}

  var shadowPower: Double {
    get {return _storage._shadowPower ?? 0}
    set {_uniqueStorage()._shadowPower = newValue}
  }
  /// Returns true if `shadowPower` has been explicitly set.
  var hasShadowPower: Bool {return _storage._shadowPower != nil}
  /// Clears the value of `shadowPower`. Subsequent reads from it will return its default value.
  mutating func clearShadowPower() {_uniqueStorage()._shadowPower = nil}

  var noiseOctavesIterations: Int32 {
    get {return _storage._noiseOctavesIterations ?? 0}
    set {_uniqueStorage()._noiseOctavesIterations = newValue}
  }
  /// Returns true if `noiseOctavesIterations` has been explicitly set.
  var hasNoiseOctavesIterations: Bool {return _storage._noiseOctavesIterations != nil}
  /// Clears the value of `noiseOctavesIterations`. Subsequent reads from it will return its default value.
  mutating func clearNoiseOctavesIterations() {_uniqueStorage()._noiseOctavesIterations = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct KN_MotionBackgroundStyleArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSS_StyleArchive {
    get {return _super ?? TSS_StyleArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var overrideCount: UInt32 {
    get {return _overrideCount ?? 0}
    set {_overrideCount = newValue}
  }
  /// Returns true if `overrideCount` has been explicitly set.
  var hasOverrideCount: Bool {return self._overrideCount != nil}
  /// Clears the value of `overrideCount`. Subsequent reads from it will return its default value.
  mutating func clearOverrideCount() {self._overrideCount = nil}

  var slideProperties: KN_MotionBackgroundStylePropertiesArchive {
    get {return _slideProperties ?? KN_MotionBackgroundStylePropertiesArchive()}
    set {_slideProperties = newValue}
  }
  /// Returns true if `slideProperties` has been explicitly set.
  var hasSlideProperties: Bool {return self._slideProperties != nil}
  /// Clears the value of `slideProperties`. Subsequent reads from it will return its default value.
  mutating func clearSlideProperties() {self._slideProperties = nil}

  var posterFrameData: TSP_DataReference {
    get {return _posterFrameData ?? TSP_DataReference()}
    set {_posterFrameData = newValue}
  }
  /// Returns true if `posterFrameData` has been explicitly set.
  var hasPosterFrameData: Bool {return self._posterFrameData != nil}
  /// Clears the value of `posterFrameData`. Subsequent reads from it will return its default value.
  mutating func clearPosterFrameData() {self._posterFrameData = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSS_StyleArchive? = nil
  fileprivate var _overrideCount: UInt32? = nil
  fileprivate var _slideProperties: KN_MotionBackgroundStylePropertiesArchive? = nil
  fileprivate var _posterFrameData: TSP_DataReference? = nil
}

struct KN_MotionBackgroundFillArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var motionBackgroundStyle: TSP_Reference {
    get {return _motionBackgroundStyle ?? TSP_Reference()}
    set {_motionBackgroundStyle = newValue}
  }
  /// Returns true if `motionBackgroundStyle` has been explicitly set.
  var hasMotionBackgroundStyle: Bool {return self._motionBackgroundStyle != nil}
  /// Clears the value of `motionBackgroundStyle`. Subsequent reads from it will return its default value.
  mutating func clearMotionBackgroundStyle() {self._motionBackgroundStyle = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _motionBackgroundStyle: TSP_Reference? = nil
}

// MARK: - Extension support defined in KNArchives.proto.

// MARK: - Extension Properties

// Swift Extensions on the extended Messages to add easy access to the declared
// extension fields. The names are based on the extension field name from the proto
// declaration. To avoid naming collisions, the names are prefixed with the name of
// the scope where the extend directive occurs.

extension TSD_FillArchive {

  var KN_motionBackgroundFill: KN_MotionBackgroundFillArchive {
    get {return getExtensionValue(ext: KN_Extensions_motionBackgroundFill) ?? KN_MotionBackgroundFillArchive()}
    set {setExtensionValue(ext: KN_Extensions_motionBackgroundFill, value: newValue)}
  }
  /// Returns true if extension `KN_Extensions_motionBackgroundFill`
  /// has been explicitly set.
  var hasKN_motionBackgroundFill: Bool {
    return hasExtensionValue(ext: KN_Extensions_motionBackgroundFill)
  }
  /// Clears the value of extension `KN_Extensions_motionBackgroundFill`.
  /// Subsequent reads from it will return its default value.
  mutating func clearKN_motionBackgroundFill() {
    clearExtensionValue(ext: KN_Extensions_motionBackgroundFill)
  }
}

extension TSD_MovieArchive {

  var KN_LiveVideoInfo_liveVideoInfo: KN_LiveVideoInfo {
    get {return getExtensionValue(ext: KN_LiveVideoInfo.Extensions.live_video_info) ?? KN_LiveVideoInfo()}
    set {setExtensionValue(ext: KN_LiveVideoInfo.Extensions.live_video_info, value: newValue)}
  }
  /// Returns true if extension `KN_LiveVideoInfo.Extensions.live_video_info`
  /// has been explicitly set.
  var hasKN_LiveVideoInfo_liveVideoInfo: Bool {
    return hasExtensionValue(ext: KN_LiveVideoInfo.Extensions.live_video_info)
  }
  /// Clears the value of extension `KN_LiveVideoInfo.Extensions.live_video_info`.
  /// Subsequent reads from it will return its default value.
  mutating func clearKN_LiveVideoInfo_liveVideoInfo() {
    clearExtensionValue(ext: KN_LiveVideoInfo.Extensions.live_video_info)
  }

}

// MARK: - File's ExtensionMap: KN_Knarchives_Extensions

/// A `SwiftProtobuf.SimpleExtensionMap` that includes all of the extensions defined by
/// this .proto file. It can be used any place an `SwiftProtobuf.ExtensionMap` is needed
/// in parsing, or it can be combined with other `SwiftProtobuf.SimpleExtensionMap`s to create
/// a larger `SwiftProtobuf.SimpleExtensionMap`.
let KN_Knarchives_Extensions: SwiftProtobuf.SimpleExtensionMap = [
  KN_Extensions_motionBackgroundFill,
  KN_LiveVideoInfo.Extensions.live_video_info
]

// Extension Objects - The only reason these might be needed is when manually
// constructing a `SimpleExtensionMap`, otherwise, use the above _Extension Properties_
// accessors for the extension fields on the messages directly.

let KN_Extensions_motionBackgroundFill = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<KN_MotionBackgroundFillArchive>, TSD_FillArchive>(
  _protobuf_fieldNumber: 200,
  fieldName: "KN.motionBackgroundFill"
)

extension KN_LiveVideoInfo {
  enum Extensions {
    static let live_video_info = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<KN_LiveVideoInfo>, TSD_MovieArchive>(
      _protobuf_fieldNumber: 100,
      fieldName: "KN.LiveVideoInfo.live_video_info"
    )
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "KN"

extension KN_AnimationAttributesArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AnimationAttributesArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}animation_type\0\u{1}effect\0\u{1}duration\0\u{1}direction\0\u{1}delay\0\u{3}is_automatic\0\u{1}color\0\u{3}custom_effect_timing_curve_1\0\u{3}custom_effect_timing_curve_2\0\u{3}custom_effect_timing_curve_3\0\u{3}random_number_seed\0\u{3}custom_detail\0\u{3}custom_effect_timing_curve_theme_name_1\0\u{3}custom_effect_timing_curve_theme_name_2\0\u{3}custom_effect_timing_curve_theme_name_3\0\u{3}writing_direction_is_rtl\0")

  fileprivate class _StorageClass {
    var _animationType: String? = nil
    var _effect: String? = nil
    var _duration: Double? = nil
    var _direction: UInt32? = nil
    var _delay: Double? = nil
    var _isAutomatic: Bool? = nil
    var _color: TSP_Color? = nil
    var _customEffectTimingCurve1: TSD_PathSourceArchive? = nil
    var _customEffectTimingCurve2: TSD_PathSourceArchive? = nil
    var _customEffectTimingCurve3: TSD_PathSourceArchive? = nil
    var _randomNumberSeed: UInt32? = nil
    var _customDetail: Double? = nil
    var _customEffectTimingCurveThemeName1: String? = nil
    var _customEffectTimingCurveThemeName2: String? = nil
    var _customEffectTimingCurveThemeName3: String? = nil
    var _writingDirectionIsRtl: Bool? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _animationType = source._animationType
      _effect = source._effect
      _duration = source._duration
      _direction = source._direction
      _delay = source._delay
      _isAutomatic = source._isAutomatic
      _color = source._color
      _customEffectTimingCurve1 = source._customEffectTimingCurve1
      _customEffectTimingCurve2 = source._customEffectTimingCurve2
      _customEffectTimingCurve3 = source._customEffectTimingCurve3
      _randomNumberSeed = source._randomNumberSeed
      _customDetail = source._customDetail
      _customEffectTimingCurveThemeName1 = source._customEffectTimingCurveThemeName1
      _customEffectTimingCurveThemeName2 = source._customEffectTimingCurveThemeName2
      _customEffectTimingCurveThemeName3 = source._customEffectTimingCurveThemeName3
      _writingDirectionIsRtl = source._writingDirectionIsRtl
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._color, !v.isInitialized {return false}
      if let v = _storage._customEffectTimingCurve1, !v.isInitialized {return false}
      if let v = _storage._customEffectTimingCurve2, !v.isInitialized {return false}
      if let v = _storage._customEffectTimingCurve3, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._animationType) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._effect) }()
        case 3: try { try decoder.decodeSingularDoubleField(value: &_storage._duration) }()
        case 4: try { try decoder.decodeSingularUInt32Field(value: &_storage._direction) }()
        case 5: try { try decoder.decodeSingularDoubleField(value: &_storage._delay) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._isAutomatic) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._color) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._customEffectTimingCurve1) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._customEffectTimingCurve2) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._customEffectTimingCurve3) }()
        case 11: try { try decoder.decodeSingularUInt32Field(value: &_storage._randomNumberSeed) }()
        case 12: try { try decoder.decodeSingularDoubleField(value: &_storage._customDetail) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._customEffectTimingCurveThemeName1) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._customEffectTimingCurveThemeName2) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._customEffectTimingCurveThemeName3) }()
        case 16: try { try decoder.decodeSingularBoolField(value: &_storage._writingDirectionIsRtl) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._animationType {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._effect {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._duration {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._direction {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._delay {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._isAutomatic {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._color {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._customEffectTimingCurve1 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._customEffectTimingCurve2 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._customEffectTimingCurve3 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._randomNumberSeed {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._customDetail {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._customEffectTimingCurveThemeName1 {
        try visitor.visitSingularStringField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._customEffectTimingCurveThemeName2 {
        try visitor.visitSingularStringField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._customEffectTimingCurveThemeName3 {
        try visitor.visitSingularStringField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._writingDirectionIsRtl {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 16)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_AnimationAttributesArchive, rhs: KN_AnimationAttributesArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._animationType != rhs_storage._animationType {return false}
        if _storage._effect != rhs_storage._effect {return false}
        if _storage._duration != rhs_storage._duration {return false}
        if _storage._direction != rhs_storage._direction {return false}
        if _storage._delay != rhs_storage._delay {return false}
        if _storage._isAutomatic != rhs_storage._isAutomatic {return false}
        if _storage._color != rhs_storage._color {return false}
        if _storage._customEffectTimingCurve1 != rhs_storage._customEffectTimingCurve1 {return false}
        if _storage._customEffectTimingCurve2 != rhs_storage._customEffectTimingCurve2 {return false}
        if _storage._customEffectTimingCurve3 != rhs_storage._customEffectTimingCurve3 {return false}
        if _storage._randomNumberSeed != rhs_storage._randomNumberSeed {return false}
        if _storage._customDetail != rhs_storage._customDetail {return false}
        if _storage._customEffectTimingCurveThemeName1 != rhs_storage._customEffectTimingCurveThemeName1 {return false}
        if _storage._customEffectTimingCurveThemeName2 != rhs_storage._customEffectTimingCurveThemeName2 {return false}
        if _storage._customEffectTimingCurveThemeName3 != rhs_storage._customEffectTimingCurveThemeName3 {return false}
        if _storage._writingDirectionIsRtl != rhs_storage._writingDirectionIsRtl {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_TransitionAttributesArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TransitionAttributesArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}database_animation_type\0\u{3}database_effect\0\u{3}database_duration\0\u{3}database_direction\0\u{3}database_delay\0\u{3}database_is_automatic\0\u{3}database_color\0\u{1}animationAttributes\0\u{3}custom_twist\0\u{3}custom_mosaic_size\0\u{3}custom_mosaic_type\0\u{3}custom_bounce\0\u{3}custom_magic_move_fade_unmatched_objects\0\u{4}\u{2}custom_timing_curve\0\u{3}custom_text_delivery_type\0\u{3}custom_motion_blur\0\u{3}custom_travel_distance\0")

  fileprivate class _StorageClass {
    var _animationAttributes: KN_AnimationAttributesArchive? = nil
    var _customTwist: Float? = nil
    var _customMosaicSize: UInt32? = nil
    var _customMosaicType: UInt32? = nil
    var _customBounce: Bool? = nil
    var _customMagicMoveFadeUnmatchedObjects: Bool? = nil
    var _customTimingCurve: KN_TransitionAttributesArchive.TransitionCustomAttributesTimingCurveType? = nil
    var _customTextDeliveryType: KN_TransitionAttributesArchive.TransitionCustomAttributesTextDeliveryType? = nil
    var _customMotionBlur: Bool? = nil
    var _customTravelDistance: Float? = nil
    var _databaseAnimationType: String? = nil
    var _databaseEffect: String? = nil
    var _databaseDuration: Double? = nil
    var _databaseDirection: UInt32? = nil
    var _databaseDelay: Float? = nil
    var _databaseIsAutomatic: Bool? = nil
    var _databaseColor: TSP_Color? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _animationAttributes = source._animationAttributes
      _customTwist = source._customTwist
      _customMosaicSize = source._customMosaicSize
      _customMosaicType = source._customMosaicType
      _customBounce = source._customBounce
      _customMagicMoveFadeUnmatchedObjects = source._customMagicMoveFadeUnmatchedObjects
      _customTimingCurve = source._customTimingCurve
      _customTextDeliveryType = source._customTextDeliveryType
      _customMotionBlur = source._customMotionBlur
      _customTravelDistance = source._customTravelDistance
      _databaseAnimationType = source._databaseAnimationType
      _databaseEffect = source._databaseEffect
      _databaseDuration = source._databaseDuration
      _databaseDirection = source._databaseDirection
      _databaseDelay = source._databaseDelay
      _databaseIsAutomatic = source._databaseIsAutomatic
      _databaseColor = source._databaseColor
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._animationAttributes, !v.isInitialized {return false}
      if let v = _storage._databaseColor, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._databaseAnimationType) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._databaseEffect) }()
        case 3: try { try decoder.decodeSingularDoubleField(value: &_storage._databaseDuration) }()
        case 4: try { try decoder.decodeSingularUInt32Field(value: &_storage._databaseDirection) }()
        case 5: try { try decoder.decodeSingularFloatField(value: &_storage._databaseDelay) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._databaseIsAutomatic) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._databaseColor) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._animationAttributes) }()
        case 9: try { try decoder.decodeSingularFloatField(value: &_storage._customTwist) }()
        case 10: try { try decoder.decodeSingularUInt32Field(value: &_storage._customMosaicSize) }()
        case 11: try { try decoder.decodeSingularUInt32Field(value: &_storage._customMosaicType) }()
        case 12: try { try decoder.decodeSingularBoolField(value: &_storage._customBounce) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._customMagicMoveFadeUnmatchedObjects) }()
        case 15: try { try decoder.decodeSingularEnumField(value: &_storage._customTimingCurve) }()
        case 16: try { try decoder.decodeSingularEnumField(value: &_storage._customTextDeliveryType) }()
        case 17: try { try decoder.decodeSingularBoolField(value: &_storage._customMotionBlur) }()
        case 18: try { try decoder.decodeSingularFloatField(value: &_storage._customTravelDistance) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._databaseAnimationType {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._databaseEffect {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._databaseDuration {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._databaseDirection {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._databaseDelay {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._databaseIsAutomatic {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._databaseColor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._animationAttributes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._customTwist {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._customMosaicSize {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._customMosaicType {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._customBounce {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._customMagicMoveFadeUnmatchedObjects {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._customTimingCurve {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._customTextDeliveryType {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._customMotionBlur {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._customTravelDistance {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 18)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_TransitionAttributesArchive, rhs: KN_TransitionAttributesArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._animationAttributes != rhs_storage._animationAttributes {return false}
        if _storage._customTwist != rhs_storage._customTwist {return false}
        if _storage._customMosaicSize != rhs_storage._customMosaicSize {return false}
        if _storage._customMosaicType != rhs_storage._customMosaicType {return false}
        if _storage._customBounce != rhs_storage._customBounce {return false}
        if _storage._customMagicMoveFadeUnmatchedObjects != rhs_storage._customMagicMoveFadeUnmatchedObjects {return false}
        if _storage._customTimingCurve != rhs_storage._customTimingCurve {return false}
        if _storage._customTextDeliveryType != rhs_storage._customTextDeliveryType {return false}
        if _storage._customMotionBlur != rhs_storage._customMotionBlur {return false}
        if _storage._customTravelDistance != rhs_storage._customTravelDistance {return false}
        if _storage._databaseAnimationType != rhs_storage._databaseAnimationType {return false}
        if _storage._databaseEffect != rhs_storage._databaseEffect {return false}
        if _storage._databaseDuration != rhs_storage._databaseDuration {return false}
        if _storage._databaseDirection != rhs_storage._databaseDirection {return false}
        if _storage._databaseDelay != rhs_storage._databaseDelay {return false}
        if _storage._databaseIsAutomatic != rhs_storage._databaseIsAutomatic {return false}
        if _storage._databaseColor != rhs_storage._databaseColor {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_TransitionAttributesArchive.TransitionCustomAttributesTimingCurveType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}TransitionCustomAttributesTimingCurveTypeLinear\0\u{1}TransitionCustomAttributesTimingCurveTypeEaseIn\0\u{1}TransitionCustomAttributesTimingCurveTypeEaseOut\0\u{1}TransitionCustomAttributesTimingCurveTypeEaseInEaseOut\0\u{1}TransitionCustomAttributesTimingCurveTypeCustom\0")
}

extension KN_TransitionAttributesArchive.TransitionCustomAttributesTextDeliveryType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}TransitionCustomAttributesTextDeliveryTypeByObject\0\u{1}TransitionCustomAttributesTextDeliveryTypeByWord\0\u{1}TransitionCustomAttributesTextDeliveryTypeByCharacter\0\u{1}TransitionCustomAttributesTextDeliveryTypeByLine\0")
}

extension KN_TransitionArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TransitionArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\u{2}attributes\0")

  public var isInitialized: Bool {
    if self._attributes == nil {return false}
    if let v = self._attributes, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularMessageField(value: &self._attributes) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._attributes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_TransitionArchive, rhs: KN_TransitionArchive) -> Bool {
    if lhs._attributes != rhs._attributes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_BuildChunkArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BuildChunkArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}build\0\u{1}index\0\u{1}delay\0\u{1}duration\0\u{1}automatic\0\u{1}referent\0\u{3}build_chunk_identifier\0\u{3}build_id\0")

  public var isInitialized: Bool {
    if let v = self._build, !v.isInitialized {return false}
    if let v = self._buildChunkIdentifier, !v.isInitialized {return false}
    if let v = self._buildID, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._build) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._index) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self._delay) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self._duration) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self._automatic) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self._referent) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._buildChunkIdentifier) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._buildID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._build {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._index {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._delay {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._duration {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._automatic {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._referent {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._buildChunkIdentifier {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._buildID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_BuildChunkArchive, rhs: KN_BuildChunkArchive) -> Bool {
    if lhs._build != rhs._build {return false}
    if lhs._index != rhs._index {return false}
    if lhs._delay != rhs._delay {return false}
    if lhs._duration != rhs._duration {return false}
    if lhs._automatic != rhs._automatic {return false}
    if lhs._referent != rhs._referent {return false}
    if lhs._buildChunkIdentifier != rhs._buildChunkIdentifier {return false}
    if lhs._buildID != rhs._buildID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_BuildChunkIdentifierArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BuildChunkIdentifierArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}build_id\0\u{3}build_chunk_id\0")

  public var isInitialized: Bool {
    if let v = self._buildID, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._buildID) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._buildChunkID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._buildID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._buildChunkID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_BuildChunkIdentifierArchive, rhs: KN_BuildChunkIdentifierArchive) -> Bool {
    if lhs._buildID != rhs._buildID {return false}
    if lhs._buildChunkID != rhs._buildChunkID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_BuildAttributeValueArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BuildAttributeValueArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}integer_value\0\u{3}double_value\0\u{3}bool_value\0\u{3}string_value\0\u{3}path_source_value\0\u{3}color_value\0\u{1}type\0")

  fileprivate class _StorageClass {
    var _integerValue: UInt32? = nil
    var _doubleValue: Double? = nil
    var _boolValue: Bool? = nil
    var _stringValue: String? = nil
    var _pathSourceValue: TSD_PathSourceArchive? = nil
    var _colorValue: TSP_Color? = nil
    var _type: KN_BuildAttributeValueArchive.BuildAttributeValueType? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _integerValue = source._integerValue
      _doubleValue = source._doubleValue
      _boolValue = source._boolValue
      _stringValue = source._stringValue
      _pathSourceValue = source._pathSourceValue
      _colorValue = source._colorValue
      _type = source._type
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._pathSourceValue, !v.isInitialized {return false}
      if let v = _storage._colorValue, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularUInt32Field(value: &_storage._integerValue) }()
        case 2: try { try decoder.decodeSingularDoubleField(value: &_storage._doubleValue) }()
        case 3: try { try decoder.decodeSingularBoolField(value: &_storage._boolValue) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._stringValue) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._pathSourceValue) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._colorValue) }()
        case 7: try { try decoder.decodeSingularEnumField(value: &_storage._type) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._integerValue {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._doubleValue {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._boolValue {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._stringValue {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._pathSourceValue {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._colorValue {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._type {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 7)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_BuildAttributeValueArchive, rhs: KN_BuildAttributeValueArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._integerValue != rhs_storage._integerValue {return false}
        if _storage._doubleValue != rhs_storage._doubleValue {return false}
        if _storage._boolValue != rhs_storage._boolValue {return false}
        if _storage._stringValue != rhs_storage._stringValue {return false}
        if _storage._pathSourceValue != rhs_storage._pathSourceValue {return false}
        if _storage._colorValue != rhs_storage._colorValue {return false}
        if _storage._type != rhs_storage._type {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_BuildAttributeValueArchive.BuildAttributeValueType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0k_integer\0\u{2}\u{2}k_double\0\u{1}k_bool\0\u{1}k_string\0\u{1}k_path_source\0\u{1}k_color\0")
}

extension KN_BuildAttributeTupleArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BuildAttributeTupleArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}property\0\u{1}value\0\u{3}build_id\0\u{3}build_chunk_identifier\0")

  public var isInitialized: Bool {
    if let v = self._value, !v.isInitialized {return false}
    if let v = self._buildID, !v.isInitialized {return false}
    if let v = self._buildChunkIdentifier, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._property) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._value) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._buildID) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._buildChunkIdentifier) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._property {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._buildID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._buildChunkIdentifier {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_BuildAttributeTupleArchive, rhs: KN_BuildAttributeTupleArchive) -> Bool {
    if lhs._property != rhs._property {return false}
    if lhs._value != rhs._value {return false}
    if lhs._buildID != rhs._buildID {return false}
    if lhs._buildChunkIdentifier != rhs._buildChunkIdentifier {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_BuildAttributesArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BuildAttributesArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}database_animationType\0\u{3}database_effect\0\u{3}database_direction\0\u{1}eventTrigger\0\u{3}database_delay\0\u{1}delayAutomaticAfter\0\u{1}delayAutomaticWith\0\u{3}database_duration\0\u{3}action_rotationAngle\0\u{3}action_rotationDirection\0\u{3}action_scaleSize\0\u{3}action_colorAlpha\0\u{3}action_acceleration\0\u{1}curveStyle\0\u{1}motionPathString\0\u{3}database_color\0\u{1}ChartRotation3D\0\u{1}animationAttributes\0\u{3}custom_bounce\0\u{3}custom_textDelivery\0\u{3}custom_deliveryOption\0\u{3}action_motionPathSource\0\u{3}custom_action_decay\0\u{3}custom_action_repeatCount\0\u{3}custom_action_scale\0\u{3}custom_action_jiggleIntensity\0\u{1}startOffset\0\u{1}endOffset\0\u{3}custom_motion_blur\0\u{3}custom_include_endpoints\0\u{4}\u{3}custom_shine\0\u{3}custom_scale_amount\0\u{3}custom_travel_distance\0\u{3}custom_cursor\0\u{3}custom_align_to_path\0")

  fileprivate class _StorageClass {
    var _animationAttributes: KN_AnimationAttributesArchive? = nil
    var _eventTrigger: UInt32? = nil
    var _delayAutomaticAfter: Double? = nil
    var _delayAutomaticWith: Double? = nil
    var _curveStyle: KN_BuildAttributesArchive.BuildAttributesCurveStyle? = nil
    var _chartRotation3D: Double? = nil
    var _startOffset: UInt32? = nil
    var _endOffset: UInt32? = nil
    var _actionRotationAngle: Double? = nil
    var _actionRotationDirection: KN_BuildAttributesArchive.BuildAttributesRotationDirection? = nil
    var _actionScaleSize: Double? = nil
    var _actionColorAlpha: Double? = nil
    var _actionAcceleration: KN_BuildAttributesArchive.BuildAttributesAcceleration? = nil
    var _actionMotionPathSource: TSD_PathSourceArchive? = nil
    var _customBounce: Bool? = nil
    var _customTextDelivery: KN_BuildAttributesArchive.BuildAttributesTextDelivery? = nil
    var _customDeliveryOption: KN_BuildAttributesArchive.BuildAttributesDeliveryOption? = nil
    var _customActionDecay: Bool? = nil
    var _customActionRepeatCount: UInt32? = nil
    var _customActionScale: Double? = nil
    var _customActionJiggleIntensity: KN_BuildAttributesArchive.ActionBuildAttributesJiggleIntensity? = nil
    var _customMotionBlur: Bool? = nil
    var _customIncludeEndpoints: Bool? = nil
    var _customShine: Bool? = nil
    var _customScaleAmount: Double? = nil
    var _customTravelDistance: Double? = nil
    var _customCursor: Bool? = nil
    var _customAlignToPath: Bool? = nil
    var _databaseAnimationType: String? = nil
    var _databaseEffect: String? = nil
    var _databaseDirection: UInt32? = nil
    var _databaseDelay: Double? = nil
    var _databaseDuration: Double? = nil
    var _databaseColor: TSP_Color? = nil
    var _motionPathString: String? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _animationAttributes = source._animationAttributes
      _eventTrigger = source._eventTrigger
      _delayAutomaticAfter = source._delayAutomaticAfter
      _delayAutomaticWith = source._delayAutomaticWith
      _curveStyle = source._curveStyle
      _chartRotation3D = source._chartRotation3D
      _startOffset = source._startOffset
      _endOffset = source._endOffset
      _actionRotationAngle = source._actionRotationAngle
      _actionRotationDirection = source._actionRotationDirection
      _actionScaleSize = source._actionScaleSize
      _actionColorAlpha = source._actionColorAlpha
      _actionAcceleration = source._actionAcceleration
      _actionMotionPathSource = source._actionMotionPathSource
      _customBounce = source._customBounce
      _customTextDelivery = source._customTextDelivery
      _customDeliveryOption = source._customDeliveryOption
      _customActionDecay = source._customActionDecay
      _customActionRepeatCount = source._customActionRepeatCount
      _customActionScale = source._customActionScale
      _customActionJiggleIntensity = source._customActionJiggleIntensity
      _customMotionBlur = source._customMotionBlur
      _customIncludeEndpoints = source._customIncludeEndpoints
      _customShine = source._customShine
      _customScaleAmount = source._customScaleAmount
      _customTravelDistance = source._customTravelDistance
      _customCursor = source._customCursor
      _customAlignToPath = source._customAlignToPath
      _databaseAnimationType = source._databaseAnimationType
      _databaseEffect = source._databaseEffect
      _databaseDirection = source._databaseDirection
      _databaseDelay = source._databaseDelay
      _databaseDuration = source._databaseDuration
      _databaseColor = source._databaseColor
      _motionPathString = source._motionPathString
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._animationAttributes, !v.isInitialized {return false}
      if let v = _storage._actionMotionPathSource, !v.isInitialized {return false}
      if let v = _storage._databaseColor, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._databaseAnimationType) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._databaseEffect) }()
        case 3: try { try decoder.decodeSingularUInt32Field(value: &_storage._databaseDirection) }()
        case 4: try { try decoder.decodeSingularUInt32Field(value: &_storage._eventTrigger) }()
        case 5: try { try decoder.decodeSingularDoubleField(value: &_storage._databaseDelay) }()
        case 6: try { try decoder.decodeSingularDoubleField(value: &_storage._delayAutomaticAfter) }()
        case 7: try { try decoder.decodeSingularDoubleField(value: &_storage._delayAutomaticWith) }()
        case 8: try { try decoder.decodeSingularDoubleField(value: &_storage._databaseDuration) }()
        case 9: try { try decoder.decodeSingularDoubleField(value: &_storage._actionRotationAngle) }()
        case 10: try { try decoder.decodeSingularEnumField(value: &_storage._actionRotationDirection) }()
        case 11: try { try decoder.decodeSingularDoubleField(value: &_storage._actionScaleSize) }()
        case 12: try { try decoder.decodeSingularDoubleField(value: &_storage._actionColorAlpha) }()
        case 13: try { try decoder.decodeSingularEnumField(value: &_storage._actionAcceleration) }()
        case 14: try { try decoder.decodeSingularEnumField(value: &_storage._curveStyle) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._motionPathString) }()
        case 16: try { try decoder.decodeSingularMessageField(value: &_storage._databaseColor) }()
        case 17: try { try decoder.decodeSingularDoubleField(value: &_storage._chartRotation3D) }()
        case 18: try { try decoder.decodeSingularMessageField(value: &_storage._animationAttributes) }()
        case 19: try { try decoder.decodeSingularBoolField(value: &_storage._customBounce) }()
        case 20: try { try decoder.decodeSingularEnumField(value: &_storage._customTextDelivery) }()
        case 21: try { try decoder.decodeSingularEnumField(value: &_storage._customDeliveryOption) }()
        case 22: try { try decoder.decodeSingularMessageField(value: &_storage._actionMotionPathSource) }()
        case 23: try { try decoder.decodeSingularBoolField(value: &_storage._customActionDecay) }()
        case 24: try { try decoder.decodeSingularUInt32Field(value: &_storage._customActionRepeatCount) }()
        case 25: try { try decoder.decodeSingularDoubleField(value: &_storage._customActionScale) }()
        case 26: try { try decoder.decodeSingularEnumField(value: &_storage._customActionJiggleIntensity) }()
        case 27: try { try decoder.decodeSingularUInt32Field(value: &_storage._startOffset) }()
        case 28: try { try decoder.decodeSingularUInt32Field(value: &_storage._endOffset) }()
        case 29: try { try decoder.decodeSingularBoolField(value: &_storage._customMotionBlur) }()
        case 30: try { try decoder.decodeSingularBoolField(value: &_storage._customIncludeEndpoints) }()
        case 33: try { try decoder.decodeSingularBoolField(value: &_storage._customShine) }()
        case 34: try { try decoder.decodeSingularDoubleField(value: &_storage._customScaleAmount) }()
        case 35: try { try decoder.decodeSingularDoubleField(value: &_storage._customTravelDistance) }()
        case 36: try { try decoder.decodeSingularBoolField(value: &_storage._customCursor) }()
        case 37: try { try decoder.decodeSingularBoolField(value: &_storage._customAlignToPath) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._databaseAnimationType {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._databaseEffect {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._databaseDirection {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._eventTrigger {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._databaseDelay {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._delayAutomaticAfter {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._delayAutomaticWith {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._databaseDuration {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._actionRotationAngle {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._actionRotationDirection {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._actionScaleSize {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._actionColorAlpha {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._actionAcceleration {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._curveStyle {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._motionPathString {
        try visitor.visitSingularStringField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._databaseColor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._chartRotation3D {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._animationAttributes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._customBounce {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._customTextDelivery {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._customDeliveryOption {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._actionMotionPathSource {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      } }()
      try { if let v = _storage._customActionDecay {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 23)
      } }()
      try { if let v = _storage._customActionRepeatCount {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 24)
      } }()
      try { if let v = _storage._customActionScale {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 25)
      } }()
      try { if let v = _storage._customActionJiggleIntensity {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 26)
      } }()
      try { if let v = _storage._startOffset {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 27)
      } }()
      try { if let v = _storage._endOffset {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 28)
      } }()
      try { if let v = _storage._customMotionBlur {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 29)
      } }()
      try { if let v = _storage._customIncludeEndpoints {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 30)
      } }()
      try { if let v = _storage._customShine {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 33)
      } }()
      try { if let v = _storage._customScaleAmount {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 34)
      } }()
      try { if let v = _storage._customTravelDistance {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 35)
      } }()
      try { if let v = _storage._customCursor {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 36)
      } }()
      try { if let v = _storage._customAlignToPath {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 37)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_BuildAttributesArchive, rhs: KN_BuildAttributesArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._animationAttributes != rhs_storage._animationAttributes {return false}
        if _storage._eventTrigger != rhs_storage._eventTrigger {return false}
        if _storage._delayAutomaticAfter != rhs_storage._delayAutomaticAfter {return false}
        if _storage._delayAutomaticWith != rhs_storage._delayAutomaticWith {return false}
        if _storage._curveStyle != rhs_storage._curveStyle {return false}
        if _storage._chartRotation3D != rhs_storage._chartRotation3D {return false}
        if _storage._startOffset != rhs_storage._startOffset {return false}
        if _storage._endOffset != rhs_storage._endOffset {return false}
        if _storage._actionRotationAngle != rhs_storage._actionRotationAngle {return false}
        if _storage._actionRotationDirection != rhs_storage._actionRotationDirection {return false}
        if _storage._actionScaleSize != rhs_storage._actionScaleSize {return false}
        if _storage._actionColorAlpha != rhs_storage._actionColorAlpha {return false}
        if _storage._actionAcceleration != rhs_storage._actionAcceleration {return false}
        if _storage._actionMotionPathSource != rhs_storage._actionMotionPathSource {return false}
        if _storage._customBounce != rhs_storage._customBounce {return false}
        if _storage._customTextDelivery != rhs_storage._customTextDelivery {return false}
        if _storage._customDeliveryOption != rhs_storage._customDeliveryOption {return false}
        if _storage._customActionDecay != rhs_storage._customActionDecay {return false}
        if _storage._customActionRepeatCount != rhs_storage._customActionRepeatCount {return false}
        if _storage._customActionScale != rhs_storage._customActionScale {return false}
        if _storage._customActionJiggleIntensity != rhs_storage._customActionJiggleIntensity {return false}
        if _storage._customMotionBlur != rhs_storage._customMotionBlur {return false}
        if _storage._customIncludeEndpoints != rhs_storage._customIncludeEndpoints {return false}
        if _storage._customShine != rhs_storage._customShine {return false}
        if _storage._customScaleAmount != rhs_storage._customScaleAmount {return false}
        if _storage._customTravelDistance != rhs_storage._customTravelDistance {return false}
        if _storage._customCursor != rhs_storage._customCursor {return false}
        if _storage._customAlignToPath != rhs_storage._customAlignToPath {return false}
        if _storage._databaseAnimationType != rhs_storage._databaseAnimationType {return false}
        if _storage._databaseEffect != rhs_storage._databaseEffect {return false}
        if _storage._databaseDirection != rhs_storage._databaseDirection {return false}
        if _storage._databaseDelay != rhs_storage._databaseDelay {return false}
        if _storage._databaseDuration != rhs_storage._databaseDuration {return false}
        if _storage._databaseColor != rhs_storage._databaseColor {return false}
        if _storage._motionPathString != rhs_storage._motionPathString {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_BuildAttributesArchive.BuildAttributesAcceleration: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0kNone\0\u{1}kEaseIn\0\u{1}kEaseOut\0\u{1}kEaseBoth\0\u{1}kCustom\0")
}

extension KN_BuildAttributesArchive.BuildAttributesRotationDirection: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\u{1f}kClockwise\0\u{1}kCounterclockwise\0")
}

extension KN_BuildAttributesArchive.BuildAttributesCurveStyle: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0kStraight\0\u{1}kCurved\0")
}

extension KN_BuildAttributesArchive.BuildAttributesTextDelivery: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0kTextDeliveryUndefined\0\u{1}kTextDeliveryByObject\0\u{1}kTextDeliveryByWord\0\u{1}kTextDeliveryByCharacter\0\u{1}kTextDeliveryByLine\0")
}

extension KN_BuildAttributesArchive.BuildAttributesDeliveryOption: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0kDeliveryOptionUndefined\0\u{1}kDeliveryOptionForward\0\u{1}kDeliveryOptionBackward\0\u{1}kDeliveryOptionFromCenter\0\u{1}kDeliveryOptionFromEdges\0\u{1}kDeliveryOptionRandom\0")
}

extension KN_BuildAttributesArchive.ActionBuildAttributesJiggleIntensity: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0kJiggleIntensitySmall\0\u{1}kJiggleIntensityMedium\0\u{1}kJiggleIntensityLarge\0")
}

extension KN_BuildArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BuildArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}drawable\0\u{1}delivery\0\u{1}duration\0\u{1}attributes\0\u{3}chunk_id_seed\0")

  public var isInitialized: Bool {
    if self._delivery == nil {return false}
    if self._attributes == nil {return false}
    if let v = self._drawable, !v.isInitialized {return false}
    if let v = self._attributes, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._drawable) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._delivery) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self._duration) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._attributes) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self._chunkIDSeed) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._drawable {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._delivery {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._duration {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._attributes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._chunkIDSeed {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_BuildArchive, rhs: KN_BuildArchive) -> Bool {
    if lhs._drawable != rhs._drawable {return false}
    if lhs._delivery != rhs._delivery {return false}
    if lhs._duration != rhs._duration {return false}
    if lhs._attributes != rhs._attributes {return false}
    if lhs._chunkIDSeed != rhs._chunkIDSeed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_PlaceholderArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PlaceholderArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}super\0\u{1}kind\0")

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._super) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self._kind) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._kind {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_PlaceholderArchive, rhs: KN_PlaceholderArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._kind != rhs._kind {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_PlaceholderArchive.Kind: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0kKindPlaceholder\0\u{1}kKindSlideNumberPlaceholder\0\u{1}kKindTitlePlaceholder\0\u{1}kKindBodyPlaceholder\0\u{1}kKindObjectPlaceholder\0")
}

extension KN_NoteArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NoteArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}containedStorage\0")

  public var isInitialized: Bool {
    if self._containedStorage == nil {return false}
    if let v = self._containedStorage, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._containedStorage) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._containedStorage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_NoteArchive, rhs: KN_NoteArchive) -> Bool {
    if lhs._containedStorage != rhs._containedStorage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_ClassicStylesheetRecordArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClassicStylesheetRecordArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}identifier_to_style_map\0\u{3}deprecated_theme\0")

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.identifierToStyleMap) {return false}
    if let v = self._deprecatedTheme, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.identifierToStyleMap) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._deprecatedTheme) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.identifierToStyleMap.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.identifierToStyleMap, fieldNumber: 1)
    }
    try { if let v = self._deprecatedTheme {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_ClassicStylesheetRecordArchive, rhs: KN_ClassicStylesheetRecordArchive) -> Bool {
    if lhs.identifierToStyleMap != rhs.identifierToStyleMap {return false}
    if lhs._deprecatedTheme != rhs._deprecatedTheme {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_ClassicThemeRecordArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClassicThemeRecordArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}uuid\0\u{1}stylesheetRecord\0\u{1}templates\0")

  public var isInitialized: Bool {
    if let v = self._stylesheetRecord, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.templates) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._uuid) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._stylesheetRecord) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.templates) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._uuid {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._stylesheetRecord {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.templates.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.templates, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_ClassicThemeRecordArchive, rhs: KN_ClassicThemeRecordArchive) -> Bool {
    if lhs._uuid != rhs._uuid {return false}
    if lhs._stylesheetRecord != rhs._stylesheetRecord {return false}
    if lhs.templates != rhs.templates {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_SlideArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SlideArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}style\0\u{1}builds\0\u{1}buildChunkArchives\0\u{1}transition\0\u{1}titlePlaceholder\0\u{1}bodyPlaceholder\0\u{3}owned_drawables\0\u{2}\u{3}name\0\u{1}titlePlaceholderGeometry\0\u{1}titlePlaceholderShapeStyleIndex\0\u{1}titlePlaceholderTextStyleIndex\0\u{1}bodyPlaceholderGeometry\0\u{1}bodyPlaceholderShapeStyleIndex\0\u{1}bodyPlaceholderTextStyleIndex\0\u{3}template_slide\0\u{1}staticGuides\0\u{1}inDocument\0\u{1}slideNumberPlaceholder\0\u{1}slideNumberPlaceholderGeometry\0\u{1}slideNumberPlaceholderShapeStyleIndex\0\u{1}slideNumberPlaceholderTextStyleIndex\0\u{1}titleLayoutProperties\0\u{1}bodyLayoutProperties\0\u{1}slideNumberLayoutProperties\0\u{1}note\0\u{3}sage_tag_to_info_map\0\u{1}classicStylesheetRecord\0\u{1}objectPlaceholder\0\u{1}bodyParagraphStyles\0\u{4}\u{3}deprecated_objectPlaceholderVisibleForExport\0\u{1}bodyListStyles\0\u{1}userDefinedGuideStorage\0\u{1}thumbnailTextForTitlePlaceholder\0\u{1}thumbnailTextForBodyPlaceholder\0\u{3}info_using_object_placeholder_geometry\0\u{3}info_using_object_placeholder_geometry_matches_object_placeholder_geometry\0\u{3}slide_objects_layer_with_template\0\u{3}drawables_z_order\0\u{1}buildChunks\0\u{3}infos_using_object_placeholder_geometry\0\u{3}instructional_text_map\0")

  fileprivate class _StorageClass {
    var _style: TSP_Reference? = nil
    var _builds: [TSP_Reference] = []
    var _buildChunkArchives: [KN_BuildChunkArchive] = []
    var _buildChunks: [TSP_Reference] = []
    var _transition: KN_TransitionArchive? = nil
    var _titlePlaceholder: TSP_Reference? = nil
    var _bodyPlaceholder: TSP_Reference? = nil
    var _objectPlaceholder: TSP_Reference? = nil
    var _slideNumberPlaceholder: TSP_Reference? = nil
    var _ownedDrawables: [TSP_Reference] = []
    var _drawablesZOrder: [TSP_Reference] = []
    var _sageTagToInfoMap: [KN_SlideArchive.SageTagMapEntry] = []
    var _instructionalTextMap: KN_SlideArchive.InstructionalTextMap? = nil
    var _name: String? = nil
    var _titlePlaceholderGeometry: TSD_GeometryArchive? = nil
    var _titlePlaceholderShapeStyleIndex: UInt32? = nil
    var _titlePlaceholderTextStyleIndex: UInt32? = nil
    var _titleLayoutProperties: TSWP_ShapeStylePropertiesArchive? = nil
    var _bodyPlaceholderGeometry: TSD_GeometryArchive? = nil
    var _bodyPlaceholderShapeStyleIndex: UInt32? = nil
    var _bodyPlaceholderTextStyleIndex: UInt32? = nil
    var _bodyLayoutProperties: TSWP_ShapeStylePropertiesArchive? = nil
    var _slideNumberPlaceholderGeometry: TSD_GeometryArchive? = nil
    var _slideNumberPlaceholderShapeStyleIndex: UInt32? = nil
    var _slideNumberPlaceholderTextStyleIndex: UInt32? = nil
    var _slideNumberLayoutProperties: TSWP_ShapeStylePropertiesArchive? = nil
    var _classicStylesheetRecord: TSP_Reference? = nil
    var _bodyParagraphStyles: [TSP_Reference] = []
    var _bodyListStyles: [TSP_Reference] = []
    var _thumbnailTextForTitlePlaceholder: String? = nil
    var _thumbnailTextForBodyPlaceholder: String? = nil
    var _slideObjectsLayerWithTemplate: Bool? = nil
    var _templateSlide: TSP_Reference? = nil
    var _staticGuides: [TSD_GuideArchive] = []
    var _userDefinedGuideStorage: TSP_Reference? = nil
    var _inDocument: Bool? = nil
    var _note: TSP_Reference? = nil
    var _infosUsingObjectPlaceholderGeometry: [TSP_Reference] = []
    var _deprecatedObjectPlaceholderVisibleForExport: Bool? = nil
    var _infoUsingObjectPlaceholderGeometry: TSP_Reference? = nil
    var _infoUsingObjectPlaceholderGeometryMatchesObjectPlaceholderGeometry: Bool? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _style = source._style
      _builds = source._builds
      _buildChunkArchives = source._buildChunkArchives
      _buildChunks = source._buildChunks
      _transition = source._transition
      _titlePlaceholder = source._titlePlaceholder
      _bodyPlaceholder = source._bodyPlaceholder
      _objectPlaceholder = source._objectPlaceholder
      _slideNumberPlaceholder = source._slideNumberPlaceholder
      _ownedDrawables = source._ownedDrawables
      _drawablesZOrder = source._drawablesZOrder
      _sageTagToInfoMap = source._sageTagToInfoMap
      _instructionalTextMap = source._instructionalTextMap
      _name = source._name
      _titlePlaceholderGeometry = source._titlePlaceholderGeometry
      _titlePlaceholderShapeStyleIndex = source._titlePlaceholderShapeStyleIndex
      _titlePlaceholderTextStyleIndex = source._titlePlaceholderTextStyleIndex
      _titleLayoutProperties = source._titleLayoutProperties
      _bodyPlaceholderGeometry = source._bodyPlaceholderGeometry
      _bodyPlaceholderShapeStyleIndex = source._bodyPlaceholderShapeStyleIndex
      _bodyPlaceholderTextStyleIndex = source._bodyPlaceholderTextStyleIndex
      _bodyLayoutProperties = source._bodyLayoutProperties
      _slideNumberPlaceholderGeometry = source._slideNumberPlaceholderGeometry
      _slideNumberPlaceholderShapeStyleIndex = source._slideNumberPlaceholderShapeStyleIndex
      _slideNumberPlaceholderTextStyleIndex = source._slideNumberPlaceholderTextStyleIndex
      _slideNumberLayoutProperties = source._slideNumberLayoutProperties
      _classicStylesheetRecord = source._classicStylesheetRecord
      _bodyParagraphStyles = source._bodyParagraphStyles
      _bodyListStyles = source._bodyListStyles
      _thumbnailTextForTitlePlaceholder = source._thumbnailTextForTitlePlaceholder
      _thumbnailTextForBodyPlaceholder = source._thumbnailTextForBodyPlaceholder
      _slideObjectsLayerWithTemplate = source._slideObjectsLayerWithTemplate
      _templateSlide = source._templateSlide
      _staticGuides = source._staticGuides
      _userDefinedGuideStorage = source._userDefinedGuideStorage
      _inDocument = source._inDocument
      _note = source._note
      _infosUsingObjectPlaceholderGeometry = source._infosUsingObjectPlaceholderGeometry
      _deprecatedObjectPlaceholderVisibleForExport = source._deprecatedObjectPlaceholderVisibleForExport
      _infoUsingObjectPlaceholderGeometry = source._infoUsingObjectPlaceholderGeometry
      _infoUsingObjectPlaceholderGeometryMatchesObjectPlaceholderGeometry = source._infoUsingObjectPlaceholderGeometryMatchesObjectPlaceholderGeometry
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._style == nil {return false}
      if _storage._transition == nil {return false}
      if _storage._inDocument == nil {return false}
      if let v = _storage._style, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._builds) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._buildChunkArchives) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._buildChunks) {return false}
      if let v = _storage._transition, !v.isInitialized {return false}
      if let v = _storage._titlePlaceholder, !v.isInitialized {return false}
      if let v = _storage._bodyPlaceholder, !v.isInitialized {return false}
      if let v = _storage._objectPlaceholder, !v.isInitialized {return false}
      if let v = _storage._slideNumberPlaceholder, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._ownedDrawables) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._drawablesZOrder) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._sageTagToInfoMap) {return false}
      if let v = _storage._instructionalTextMap, !v.isInitialized {return false}
      if let v = _storage._titlePlaceholderGeometry, !v.isInitialized {return false}
      if let v = _storage._titleLayoutProperties, !v.isInitialized {return false}
      if let v = _storage._bodyPlaceholderGeometry, !v.isInitialized {return false}
      if let v = _storage._bodyLayoutProperties, !v.isInitialized {return false}
      if let v = _storage._slideNumberPlaceholderGeometry, !v.isInitialized {return false}
      if let v = _storage._slideNumberLayoutProperties, !v.isInitialized {return false}
      if let v = _storage._classicStylesheetRecord, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._bodyParagraphStyles) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._bodyListStyles) {return false}
      if let v = _storage._templateSlide, !v.isInitialized {return false}
      if let v = _storage._userDefinedGuideStorage, !v.isInitialized {return false}
      if let v = _storage._note, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._infosUsingObjectPlaceholderGeometry) {return false}
      if let v = _storage._infoUsingObjectPlaceholderGeometry, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._style) }()
        case 2: try { try decoder.decodeRepeatedMessageField(value: &_storage._builds) }()
        case 3: try { try decoder.decodeRepeatedMessageField(value: &_storage._buildChunkArchives) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._transition) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._titlePlaceholder) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._bodyPlaceholder) }()
        case 7: try { try decoder.decodeRepeatedMessageField(value: &_storage._ownedDrawables) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._titlePlaceholderGeometry) }()
        case 12: try { try decoder.decodeSingularUInt32Field(value: &_storage._titlePlaceholderShapeStyleIndex) }()
        case 13: try { try decoder.decodeSingularUInt32Field(value: &_storage._titlePlaceholderTextStyleIndex) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._bodyPlaceholderGeometry) }()
        case 15: try { try decoder.decodeSingularUInt32Field(value: &_storage._bodyPlaceholderShapeStyleIndex) }()
        case 16: try { try decoder.decodeSingularUInt32Field(value: &_storage._bodyPlaceholderTextStyleIndex) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._templateSlide) }()
        case 18: try { try decoder.decodeRepeatedMessageField(value: &_storage._staticGuides) }()
        case 19: try { try decoder.decodeSingularBoolField(value: &_storage._inDocument) }()
        case 20: try { try decoder.decodeSingularMessageField(value: &_storage._slideNumberPlaceholder) }()
        case 21: try { try decoder.decodeSingularMessageField(value: &_storage._slideNumberPlaceholderGeometry) }()
        case 22: try { try decoder.decodeSingularUInt32Field(value: &_storage._slideNumberPlaceholderShapeStyleIndex) }()
        case 23: try { try decoder.decodeSingularUInt32Field(value: &_storage._slideNumberPlaceholderTextStyleIndex) }()
        case 24: try { try decoder.decodeSingularMessageField(value: &_storage._titleLayoutProperties) }()
        case 25: try { try decoder.decodeSingularMessageField(value: &_storage._bodyLayoutProperties) }()
        case 26: try { try decoder.decodeSingularMessageField(value: &_storage._slideNumberLayoutProperties) }()
        case 27: try { try decoder.decodeSingularMessageField(value: &_storage._note) }()
        case 28: try { try decoder.decodeRepeatedMessageField(value: &_storage._sageTagToInfoMap) }()
        case 29: try { try decoder.decodeSingularMessageField(value: &_storage._classicStylesheetRecord) }()
        case 30: try { try decoder.decodeSingularMessageField(value: &_storage._objectPlaceholder) }()
        case 31: try { try decoder.decodeRepeatedMessageField(value: &_storage._bodyParagraphStyles) }()
        case 34: try { try decoder.decodeSingularBoolField(value: &_storage._deprecatedObjectPlaceholderVisibleForExport) }()
        case 35: try { try decoder.decodeRepeatedMessageField(value: &_storage._bodyListStyles) }()
        case 36: try { try decoder.decodeSingularMessageField(value: &_storage._userDefinedGuideStorage) }()
        case 37: try { try decoder.decodeSingularStringField(value: &_storage._thumbnailTextForTitlePlaceholder) }()
        case 38: try { try decoder.decodeSingularStringField(value: &_storage._thumbnailTextForBodyPlaceholder) }()
        case 39: try { try decoder.decodeSingularMessageField(value: &_storage._infoUsingObjectPlaceholderGeometry) }()
        case 40: try { try decoder.decodeSingularBoolField(value: &_storage._infoUsingObjectPlaceholderGeometryMatchesObjectPlaceholderGeometry) }()
        case 41: try { try decoder.decodeSingularBoolField(value: &_storage._slideObjectsLayerWithTemplate) }()
        case 42: try { try decoder.decodeRepeatedMessageField(value: &_storage._drawablesZOrder) }()
        case 43: try { try decoder.decodeRepeatedMessageField(value: &_storage._buildChunks) }()
        case 44: try { try decoder.decodeRepeatedMessageField(value: &_storage._infosUsingObjectPlaceholderGeometry) }()
        case 45: try { try decoder.decodeSingularMessageField(value: &_storage._instructionalTextMap) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._style {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if !_storage._builds.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._builds, fieldNumber: 2)
      }
      if !_storage._buildChunkArchives.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._buildChunkArchives, fieldNumber: 3)
      }
      try { if let v = _storage._transition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._titlePlaceholder {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._bodyPlaceholder {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      if !_storage._ownedDrawables.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._ownedDrawables, fieldNumber: 7)
      }
      try { if let v = _storage._name {
        try visitor.visitSingularStringField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._titlePlaceholderGeometry {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._titlePlaceholderShapeStyleIndex {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._titlePlaceholderTextStyleIndex {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._bodyPlaceholderGeometry {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._bodyPlaceholderShapeStyleIndex {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._bodyPlaceholderTextStyleIndex {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._templateSlide {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      } }()
      if !_storage._staticGuides.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._staticGuides, fieldNumber: 18)
      }
      try { if let v = _storage._inDocument {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._slideNumberPlaceholder {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._slideNumberPlaceholderGeometry {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._slideNumberPlaceholderShapeStyleIndex {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 22)
      } }()
      try { if let v = _storage._slideNumberPlaceholderTextStyleIndex {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 23)
      } }()
      try { if let v = _storage._titleLayoutProperties {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
      } }()
      try { if let v = _storage._bodyLayoutProperties {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 25)
      } }()
      try { if let v = _storage._slideNumberLayoutProperties {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
      } }()
      try { if let v = _storage._note {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 27)
      } }()
      if !_storage._sageTagToInfoMap.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._sageTagToInfoMap, fieldNumber: 28)
      }
      try { if let v = _storage._classicStylesheetRecord {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 29)
      } }()
      try { if let v = _storage._objectPlaceholder {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 30)
      } }()
      if !_storage._bodyParagraphStyles.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._bodyParagraphStyles, fieldNumber: 31)
      }
      try { if let v = _storage._deprecatedObjectPlaceholderVisibleForExport {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 34)
      } }()
      if !_storage._bodyListStyles.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._bodyListStyles, fieldNumber: 35)
      }
      try { if let v = _storage._userDefinedGuideStorage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 36)
      } }()
      try { if let v = _storage._thumbnailTextForTitlePlaceholder {
        try visitor.visitSingularStringField(value: v, fieldNumber: 37)
      } }()
      try { if let v = _storage._thumbnailTextForBodyPlaceholder {
        try visitor.visitSingularStringField(value: v, fieldNumber: 38)
      } }()
      try { if let v = _storage._infoUsingObjectPlaceholderGeometry {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 39)
      } }()
      try { if let v = _storage._infoUsingObjectPlaceholderGeometryMatchesObjectPlaceholderGeometry {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 40)
      } }()
      try { if let v = _storage._slideObjectsLayerWithTemplate {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 41)
      } }()
      if !_storage._drawablesZOrder.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._drawablesZOrder, fieldNumber: 42)
      }
      if !_storage._buildChunks.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._buildChunks, fieldNumber: 43)
      }
      if !_storage._infosUsingObjectPlaceholderGeometry.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._infosUsingObjectPlaceholderGeometry, fieldNumber: 44)
      }
      try { if let v = _storage._instructionalTextMap {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 45)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_SlideArchive, rhs: KN_SlideArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._style != rhs_storage._style {return false}
        if _storage._builds != rhs_storage._builds {return false}
        if _storage._buildChunkArchives != rhs_storage._buildChunkArchives {return false}
        if _storage._buildChunks != rhs_storage._buildChunks {return false}
        if _storage._transition != rhs_storage._transition {return false}
        if _storage._titlePlaceholder != rhs_storage._titlePlaceholder {return false}
        if _storage._bodyPlaceholder != rhs_storage._bodyPlaceholder {return false}
        if _storage._objectPlaceholder != rhs_storage._objectPlaceholder {return false}
        if _storage._slideNumberPlaceholder != rhs_storage._slideNumberPlaceholder {return false}
        if _storage._ownedDrawables != rhs_storage._ownedDrawables {return false}
        if _storage._drawablesZOrder != rhs_storage._drawablesZOrder {return false}
        if _storage._sageTagToInfoMap != rhs_storage._sageTagToInfoMap {return false}
        if _storage._instructionalTextMap != rhs_storage._instructionalTextMap {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._titlePlaceholderGeometry != rhs_storage._titlePlaceholderGeometry {return false}
        if _storage._titlePlaceholderShapeStyleIndex != rhs_storage._titlePlaceholderShapeStyleIndex {return false}
        if _storage._titlePlaceholderTextStyleIndex != rhs_storage._titlePlaceholderTextStyleIndex {return false}
        if _storage._titleLayoutProperties != rhs_storage._titleLayoutProperties {return false}
        if _storage._bodyPlaceholderGeometry != rhs_storage._bodyPlaceholderGeometry {return false}
        if _storage._bodyPlaceholderShapeStyleIndex != rhs_storage._bodyPlaceholderShapeStyleIndex {return false}
        if _storage._bodyPlaceholderTextStyleIndex != rhs_storage._bodyPlaceholderTextStyleIndex {return false}
        if _storage._bodyLayoutProperties != rhs_storage._bodyLayoutProperties {return false}
        if _storage._slideNumberPlaceholderGeometry != rhs_storage._slideNumberPlaceholderGeometry {return false}
        if _storage._slideNumberPlaceholderShapeStyleIndex != rhs_storage._slideNumberPlaceholderShapeStyleIndex {return false}
        if _storage._slideNumberPlaceholderTextStyleIndex != rhs_storage._slideNumberPlaceholderTextStyleIndex {return false}
        if _storage._slideNumberLayoutProperties != rhs_storage._slideNumberLayoutProperties {return false}
        if _storage._classicStylesheetRecord != rhs_storage._classicStylesheetRecord {return false}
        if _storage._bodyParagraphStyles != rhs_storage._bodyParagraphStyles {return false}
        if _storage._bodyListStyles != rhs_storage._bodyListStyles {return false}
        if _storage._thumbnailTextForTitlePlaceholder != rhs_storage._thumbnailTextForTitlePlaceholder {return false}
        if _storage._thumbnailTextForBodyPlaceholder != rhs_storage._thumbnailTextForBodyPlaceholder {return false}
        if _storage._slideObjectsLayerWithTemplate != rhs_storage._slideObjectsLayerWithTemplate {return false}
        if _storage._templateSlide != rhs_storage._templateSlide {return false}
        if _storage._staticGuides != rhs_storage._staticGuides {return false}
        if _storage._userDefinedGuideStorage != rhs_storage._userDefinedGuideStorage {return false}
        if _storage._inDocument != rhs_storage._inDocument {return false}
        if _storage._note != rhs_storage._note {return false}
        if _storage._infosUsingObjectPlaceholderGeometry != rhs_storage._infosUsingObjectPlaceholderGeometry {return false}
        if _storage._deprecatedObjectPlaceholderVisibleForExport != rhs_storage._deprecatedObjectPlaceholderVisibleForExport {return false}
        if _storage._infoUsingObjectPlaceholderGeometry != rhs_storage._infoUsingObjectPlaceholderGeometry {return false}
        if _storage._infoUsingObjectPlaceholderGeometryMatchesObjectPlaceholderGeometry != rhs_storage._infoUsingObjectPlaceholderGeometryMatchesObjectPlaceholderGeometry {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_SlideArchive.SageTagMapEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = KN_SlideArchive.protoMessageName + ".SageTagMapEntry"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}tag\0\u{1}info\0")

  public var isInitialized: Bool {
    if self._tag == nil {return false}
    if self._info == nil {return false}
    if let v = self._info, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._tag) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._info) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._tag {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._info {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_SlideArchive.SageTagMapEntry, rhs: KN_SlideArchive.SageTagMapEntry) -> Bool {
    if lhs._tag != rhs._tag {return false}
    if lhs._info != rhs._info {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_SlideArchive.InstructionalTextMap: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = KN_SlideArchive.protoMessageName + ".InstructionalTextMap"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}instructional_text_for_infos\0")

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.instructionalTextForInfos) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.instructionalTextForInfos) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.instructionalTextForInfos.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.instructionalTextForInfos, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_SlideArchive.InstructionalTextMap, rhs: KN_SlideArchive.InstructionalTextMap) -> Bool {
    if lhs.instructionalTextForInfos != rhs.instructionalTextForInfos {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_SlideArchive.InstructionalTextMap.InstructionalTextMapEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = KN_SlideArchive.InstructionalTextMap.protoMessageName + ".InstructionalTextMapEntry"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}info\0\u{3}instructional_text\0")

  public var isInitialized: Bool {
    if self._instructionalText == nil {return false}
    if let v = self._info, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._info) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._instructionalText) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._info {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._instructionalText {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_SlideArchive.InstructionalTextMap.InstructionalTextMapEntry, rhs: KN_SlideArchive.InstructionalTextMap.InstructionalTextMapEntry) -> Bool {
    if lhs._info != rhs._info {return false}
    if lhs._instructionalText != rhs._instructionalText {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_SlideNodeArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SlideNodeArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}children\0\u{1}slide\0\u{3}database_thumbnail\0\u{1}isSkipped\0\u{1}isCollapsed\0\u{1}hasBuilds\0\u{1}hasTransition\0\u{1}hasNote\0\u{3}database_thumbnails\0\u{1}thumbnailSizes\0\u{1}uniqueIdentifier\0\u{1}copyFromSlideIdentifier\0\u{1}slideSpecificHyperlinkCount\0\u{1}thumbnailsAreDirty\0\u{3}build_event_count\0\u{1}thumbnails\0\u{1}isCollapsedInOutlineView\0\u{1}isSlideNumberVisible\0\u{1}hasBodyInOutlineView\0\u{3}has_explicit_builds\0\u{1}depth\0\u{3}build_event_count_is_up_to_date\0\u{3}has_explicit_builds_is_up_to_date\0\u{1}slideSpecificHyperlinkMap\0\u{3}digests_for_datas_needing_download_for_thumbnail\0\u{3}build_event_count_cache_version\0\u{3}has_explicit_builds_cache_version\0\u{3}background_is_no_fill_or_color_fill_with_alpha\0\u{3}template_slide_id\0\u{3}live_video_source_ids\0\u{3}live_video_source_usage_entries\0")

  fileprivate class _StorageClass {
    var _children: [TSP_Reference] = []
    var _slide: TSP_Reference? = nil
    var _depth: UInt32? = nil
    var _thumbnails: [TSP_DataReference] = []
    var _thumbnailSizes: [TSP_Size] = []
    var _thumbnailsAreDirty: Bool? = nil
    var _digestsForDatasNeedingDownloadForThumbnail: [String] = []
    var _isSkipped: Bool? = nil
    var _isCollapsed: Bool? = nil
    var _isCollapsedInOutlineView: Bool? = nil
    var _hasBodyInOutlineView_p: Bool? = nil
    var _hasBuilds_p: Bool? = nil
    var _hasTransition_p: Bool? = nil
    var _hasNote_p: Bool? = nil
    var _isSlideNumberVisible: Bool? = nil
    var _uniqueIdentifier: String? = nil
    var _copyFromSlideIdentifier: String? = nil
    var _slideSpecificHyperlinkCount: UInt32? = nil
    var _buildEventCount: UInt32? = nil
    var _buildEventCountCacheVersion: UInt32? = nil
    var _buildEventCountIsUpToDate: Bool? = nil
    var _hasExplicitBuilds_p: Bool? = nil
    var _hasExplicitBuildsCacheVersion_p: UInt32? = nil
    var _hasExplicitBuildsIsUpToDate_p: Bool? = nil
    var _slideSpecificHyperlinkMap: [KN_SlideNodeArchive.SlideSpecificHyperlinkMapEntry] = []
    var _backgroundIsNoFillOrColorFillWithAlpha: Bool? = nil
    var _templateSlideID: TSP_UUID? = nil
    var _liveVideoSourceIds: [TSP_UUID] = []
    var _liveVideoSourceUsageEntries: [KN_LiveVideoSourceUsageEntry] = []
    var _databaseThumbnail: TSP_Reference? = nil
    var _databaseThumbnails: [TSP_Reference] = []

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _children = source._children
      _slide = source._slide
      _depth = source._depth
      _thumbnails = source._thumbnails
      _thumbnailSizes = source._thumbnailSizes
      _thumbnailsAreDirty = source._thumbnailsAreDirty
      _digestsForDatasNeedingDownloadForThumbnail = source._digestsForDatasNeedingDownloadForThumbnail
      _isSkipped = source._isSkipped
      _isCollapsed = source._isCollapsed
      _isCollapsedInOutlineView = source._isCollapsedInOutlineView
      _hasBodyInOutlineView_p = source._hasBodyInOutlineView_p
      _hasBuilds_p = source._hasBuilds_p
      _hasTransition_p = source._hasTransition_p
      _hasNote_p = source._hasNote_p
      _isSlideNumberVisible = source._isSlideNumberVisible
      _uniqueIdentifier = source._uniqueIdentifier
      _copyFromSlideIdentifier = source._copyFromSlideIdentifier
      _slideSpecificHyperlinkCount = source._slideSpecificHyperlinkCount
      _buildEventCount = source._buildEventCount
      _buildEventCountCacheVersion = source._buildEventCountCacheVersion
      _buildEventCountIsUpToDate = source._buildEventCountIsUpToDate
      _hasExplicitBuilds_p = source._hasExplicitBuilds_p
      _hasExplicitBuildsCacheVersion_p = source._hasExplicitBuildsCacheVersion_p
      _hasExplicitBuildsIsUpToDate_p = source._hasExplicitBuildsIsUpToDate_p
      _slideSpecificHyperlinkMap = source._slideSpecificHyperlinkMap
      _backgroundIsNoFillOrColorFillWithAlpha = source._backgroundIsNoFillOrColorFillWithAlpha
      _templateSlideID = source._templateSlideID
      _liveVideoSourceIds = source._liveVideoSourceIds
      _liveVideoSourceUsageEntries = source._liveVideoSourceUsageEntries
      _databaseThumbnail = source._databaseThumbnail
      _databaseThumbnails = source._databaseThumbnails
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._isSkipped == nil {return false}
      if _storage._hasBuilds_p == nil {return false}
      if _storage._hasTransition_p == nil {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._children) {return false}
      if let v = _storage._slide, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._thumbnails) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._thumbnailSizes) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._slideSpecificHyperlinkMap) {return false}
      if let v = _storage._templateSlideID, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._liveVideoSourceIds) {return false}
      if let v = _storage._databaseThumbnail, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._databaseThumbnails) {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeRepeatedMessageField(value: &_storage._children) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._slide) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._databaseThumbnail) }()
        case 4: try { try decoder.decodeSingularBoolField(value: &_storage._isSkipped) }()
        case 5: try { try decoder.decodeSingularBoolField(value: &_storage._isCollapsed) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._hasBuilds_p) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._hasTransition_p) }()
        case 8: try { try decoder.decodeSingularBoolField(value: &_storage._hasNote_p) }()
        case 9: try { try decoder.decodeRepeatedMessageField(value: &_storage._databaseThumbnails) }()
        case 10: try { try decoder.decodeRepeatedMessageField(value: &_storage._thumbnailSizes) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._uniqueIdentifier) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._copyFromSlideIdentifier) }()
        case 13: try { try decoder.decodeSingularUInt32Field(value: &_storage._slideSpecificHyperlinkCount) }()
        case 14: try { try decoder.decodeSingularBoolField(value: &_storage._thumbnailsAreDirty) }()
        case 15: try { try decoder.decodeSingularUInt32Field(value: &_storage._buildEventCount) }()
        case 16: try { try decoder.decodeRepeatedMessageField(value: &_storage._thumbnails) }()
        case 17: try { try decoder.decodeSingularBoolField(value: &_storage._isCollapsedInOutlineView) }()
        case 18: try { try decoder.decodeSingularBoolField(value: &_storage._isSlideNumberVisible) }()
        case 19: try { try decoder.decodeSingularBoolField(value: &_storage._hasBodyInOutlineView_p) }()
        case 20: try { try decoder.decodeSingularBoolField(value: &_storage._hasExplicitBuilds_p) }()
        case 21: try { try decoder.decodeSingularUInt32Field(value: &_storage._depth) }()
        case 22: try { try decoder.decodeSingularBoolField(value: &_storage._buildEventCountIsUpToDate) }()
        case 23: try { try decoder.decodeSingularBoolField(value: &_storage._hasExplicitBuildsIsUpToDate_p) }()
        case 24: try { try decoder.decodeRepeatedMessageField(value: &_storage._slideSpecificHyperlinkMap) }()
        case 25: try { try decoder.decodeRepeatedStringField(value: &_storage._digestsForDatasNeedingDownloadForThumbnail) }()
        case 26: try { try decoder.decodeSingularUInt32Field(value: &_storage._buildEventCountCacheVersion) }()
        case 27: try { try decoder.decodeSingularUInt32Field(value: &_storage._hasExplicitBuildsCacheVersion_p) }()
        case 28: try { try decoder.decodeSingularBoolField(value: &_storage._backgroundIsNoFillOrColorFillWithAlpha) }()
        case 29: try { try decoder.decodeSingularMessageField(value: &_storage._templateSlideID) }()
        case 30: try { try decoder.decodeRepeatedMessageField(value: &_storage._liveVideoSourceIds) }()
        case 31: try { try decoder.decodeRepeatedMessageField(value: &_storage._liveVideoSourceUsageEntries) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._children.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._children, fieldNumber: 1)
      }
      try { if let v = _storage._slide {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._databaseThumbnail {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._isSkipped {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._isCollapsed {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._hasBuilds_p {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._hasTransition_p {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._hasNote_p {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
      } }()
      if !_storage._databaseThumbnails.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._databaseThumbnails, fieldNumber: 9)
      }
      if !_storage._thumbnailSizes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._thumbnailSizes, fieldNumber: 10)
      }
      try { if let v = _storage._uniqueIdentifier {
        try visitor.visitSingularStringField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._copyFromSlideIdentifier {
        try visitor.visitSingularStringField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._slideSpecificHyperlinkCount {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._thumbnailsAreDirty {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._buildEventCount {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 15)
      } }()
      if !_storage._thumbnails.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._thumbnails, fieldNumber: 16)
      }
      try { if let v = _storage._isCollapsedInOutlineView {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._isSlideNumberVisible {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._hasBodyInOutlineView_p {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._hasExplicitBuilds_p {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._depth {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._buildEventCountIsUpToDate {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 22)
      } }()
      try { if let v = _storage._hasExplicitBuildsIsUpToDate_p {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 23)
      } }()
      if !_storage._slideSpecificHyperlinkMap.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._slideSpecificHyperlinkMap, fieldNumber: 24)
      }
      if !_storage._digestsForDatasNeedingDownloadForThumbnail.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._digestsForDatasNeedingDownloadForThumbnail, fieldNumber: 25)
      }
      try { if let v = _storage._buildEventCountCacheVersion {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 26)
      } }()
      try { if let v = _storage._hasExplicitBuildsCacheVersion_p {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 27)
      } }()
      try { if let v = _storage._backgroundIsNoFillOrColorFillWithAlpha {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 28)
      } }()
      try { if let v = _storage._templateSlideID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 29)
      } }()
      if !_storage._liveVideoSourceIds.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._liveVideoSourceIds, fieldNumber: 30)
      }
      if !_storage._liveVideoSourceUsageEntries.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._liveVideoSourceUsageEntries, fieldNumber: 31)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_SlideNodeArchive, rhs: KN_SlideNodeArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._children != rhs_storage._children {return false}
        if _storage._slide != rhs_storage._slide {return false}
        if _storage._depth != rhs_storage._depth {return false}
        if _storage._thumbnails != rhs_storage._thumbnails {return false}
        if _storage._thumbnailSizes != rhs_storage._thumbnailSizes {return false}
        if _storage._thumbnailsAreDirty != rhs_storage._thumbnailsAreDirty {return false}
        if _storage._digestsForDatasNeedingDownloadForThumbnail != rhs_storage._digestsForDatasNeedingDownloadForThumbnail {return false}
        if _storage._isSkipped != rhs_storage._isSkipped {return false}
        if _storage._isCollapsed != rhs_storage._isCollapsed {return false}
        if _storage._isCollapsedInOutlineView != rhs_storage._isCollapsedInOutlineView {return false}
        if _storage._hasBodyInOutlineView_p != rhs_storage._hasBodyInOutlineView_p {return false}
        if _storage._hasBuilds_p != rhs_storage._hasBuilds_p {return false}
        if _storage._hasTransition_p != rhs_storage._hasTransition_p {return false}
        if _storage._hasNote_p != rhs_storage._hasNote_p {return false}
        if _storage._isSlideNumberVisible != rhs_storage._isSlideNumberVisible {return false}
        if _storage._uniqueIdentifier != rhs_storage._uniqueIdentifier {return false}
        if _storage._copyFromSlideIdentifier != rhs_storage._copyFromSlideIdentifier {return false}
        if _storage._slideSpecificHyperlinkCount != rhs_storage._slideSpecificHyperlinkCount {return false}
        if _storage._buildEventCount != rhs_storage._buildEventCount {return false}
        if _storage._buildEventCountCacheVersion != rhs_storage._buildEventCountCacheVersion {return false}
        if _storage._buildEventCountIsUpToDate != rhs_storage._buildEventCountIsUpToDate {return false}
        if _storage._hasExplicitBuilds_p != rhs_storage._hasExplicitBuilds_p {return false}
        if _storage._hasExplicitBuildsCacheVersion_p != rhs_storage._hasExplicitBuildsCacheVersion_p {return false}
        if _storage._hasExplicitBuildsIsUpToDate_p != rhs_storage._hasExplicitBuildsIsUpToDate_p {return false}
        if _storage._slideSpecificHyperlinkMap != rhs_storage._slideSpecificHyperlinkMap {return false}
        if _storage._backgroundIsNoFillOrColorFillWithAlpha != rhs_storage._backgroundIsNoFillOrColorFillWithAlpha {return false}
        if _storage._templateSlideID != rhs_storage._templateSlideID {return false}
        if _storage._liveVideoSourceIds != rhs_storage._liveVideoSourceIds {return false}
        if _storage._liveVideoSourceUsageEntries != rhs_storage._liveVideoSourceUsageEntries {return false}
        if _storage._databaseThumbnail != rhs_storage._databaseThumbnail {return false}
        if _storage._databaseThumbnails != rhs_storage._databaseThumbnails {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_SlideNodeArchive.SlideSpecificHyperlinkMapEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = KN_SlideNodeArchive.protoMessageName + ".SlideSpecificHyperlinkMapEntry"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}slideNodeIDString\0\u{1}infoOrStorageIDString\0")

  public var isInitialized: Bool {
    if self._slideNodeIdstring == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._slideNodeIdstring) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.infoOrStorageIdstring) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._slideNodeIdstring {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    if !self.infoOrStorageIdstring.isEmpty {
      try visitor.visitRepeatedStringField(value: self.infoOrStorageIdstring, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_SlideNodeArchive.SlideSpecificHyperlinkMapEntry, rhs: KN_SlideNodeArchive.SlideSpecificHyperlinkMapEntry) -> Bool {
    if lhs._slideNodeIdstring != rhs._slideNodeIdstring {return false}
    if lhs.infoOrStorageIdstring != rhs.infoOrStorageIdstring {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_DesktopUILayoutArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DesktopUILayoutArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}sidebar_visible\0\u{3}sidebar_view_mode\0\u{3}notes_visible\0\u{4}\u{2}light_table_visible\0\u{3}inspector_pane_visible\0\u{3}inspector_pane_view_mode\0\u{3}showing_template_slides\0\u{3}inspector_pane_autohidden\0\u{3}element_list_visible\0\u{3}activity_stream_visible\0\u{3}activity_stream_was_visible\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._sidebarVisible) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self._sidebarViewMode) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self._notesVisible) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self._lightTableVisible) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self._inspectorPaneVisible) }()
      case 7: try { try decoder.decodeSingularEnumField(value: &self._inspectorPaneViewMode) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self._showingTemplateSlides) }()
      case 9: try { try decoder.decodeSingularBoolField(value: &self._inspectorPaneAutohidden) }()
      case 10: try { try decoder.decodeSingularBoolField(value: &self._elementListVisible) }()
      case 11: try { try decoder.decodeSingularBoolField(value: &self._activityStreamVisible) }()
      case 12: try { try decoder.decodeSingularBoolField(value: &self._activityStreamWasVisible) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._sidebarVisible {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._sidebarViewMode {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._notesVisible {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._lightTableVisible {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._inspectorPaneVisible {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._inspectorPaneViewMode {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._showingTemplateSlides {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._inspectorPaneAutohidden {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
    } }()
    try { if let v = self._elementListVisible {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
    } }()
    try { if let v = self._activityStreamVisible {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 11)
    } }()
    try { if let v = self._activityStreamWasVisible {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 12)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_DesktopUILayoutArchive, rhs: KN_DesktopUILayoutArchive) -> Bool {
    if lhs._sidebarVisible != rhs._sidebarVisible {return false}
    if lhs._sidebarViewMode != rhs._sidebarViewMode {return false}
    if lhs._notesVisible != rhs._notesVisible {return false}
    if lhs._lightTableVisible != rhs._lightTableVisible {return false}
    if lhs._inspectorPaneVisible != rhs._inspectorPaneVisible {return false}
    if lhs._inspectorPaneViewMode != rhs._inspectorPaneViewMode {return false}
    if lhs._showingTemplateSlides != rhs._showingTemplateSlides {return false}
    if lhs._inspectorPaneAutohidden != rhs._inspectorPaneAutohidden {return false}
    if lhs._elementListVisible != rhs._elementListVisible {return false}
    if lhs._activityStreamVisible != rhs._activityStreamVisible {return false}
    if lhs._activityStreamWasVisible != rhs._activityStreamWasVisible {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_DesktopUILayoutArchive.SidebarViewMode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0kSidebarViewModeNavigator\0\u{1}kSidebarViewModeOutline\0")
}

extension KN_DesktopUILayoutArchive.InspectorPaneViewMode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0kInspectorPaneViewModeFormat\0\u{1}kInspectorPaneViewModeAnimate\0\u{1}kInspectorPaneViewModeSetup\0")
}

extension KN_UIStateArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UIStateArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}slideNodeToEdit\0\u{3}deprecated_template_slide_node_to_apply\0\u{3}deprecated_slideThumbnailSize\0\u{1}canvasViewScale\0\u{1}canvasOffset\0\u{1}selectedSlideNodes\0\u{1}iPhoneCanvasViewScale\0\u{1}iPhoneCanvasOffset\0\u{1}iPhone568CanvasViewScale\0\u{1}iPhone568CanvasOffset\0\u{3}desktop_ui_layout\0\u{3}desktop_slide_view_content_fits_window\0\u{3}desktop_canvas_view_scale\0\u{3}light_table_zoom_scale\0\u{3}chart_ui_state\0\u{3}show_slide_guides\0\u{3}show_template_guides\0\u{3}shows_comments\0\u{3}collapsed_slide_nodes\0\u{3}shows_ruler\0\u{3}desktop_canvas_offset\0\u{3}desktop_navigator_view_width\0\u{3}desktop_outline_view_width\0\u{3}desktop_main_content_size\0\u{3}desktop_presenter_notes_view_height\0\u{3}desktop_main_window_origin\0\u{3}light_table_hides_skipped_slides\0\u{3}outline_collapsed_slide_nodes\0\u{3}selection_path\0\u{3}outline_has_body_slide_nodes\0\u{3}desktop_outline_view_default_fixed\0\u{3}desktop_element_list_view_width\0\u{3}element_list_expanded_groups\0\u{3}shows_mobile_light_table\0\u{3}mobile_light_table_zoom_scale\0\u{3}mobile_light_table_hides_skipped_slides\0\u{3}freehand_drawing_toolkit_state\0\u{3}selection_path_transformer\0\u{3}comments_printing_toggle_enabled\0\u{3}shows_mobile_outline\0\u{3}editing_disabled\0\u{3}desktop_activity_stream_view_width\0")

  fileprivate class _StorageClass {
    var _slideNodeToEdit: TSP_Reference? = nil
    var _deprecatedTemplateSlideNodeToApply: TSP_Reference? = nil
    var _deprecatedSlideThumbnailSize: TSP_Size? = nil
    var _canvasViewScale: Float? = nil
    var _canvasOffset: TSP_Point? = nil
    var _selectedSlideNodes: [TSP_Reference] = []
    var _iPhoneCanvasViewScale: Float? = nil
    var _iPhoneCanvasOffset: TSP_Point? = nil
    var _iPhone568CanvasViewScale: Float? = nil
    var _iPhone568CanvasOffset: TSP_Point? = nil
    var _desktopUiLayout: TSP_Reference? = nil
    var _desktopSlideViewContentFitsWindow: Bool? = nil
    var _desktopCanvasViewScale: Float? = nil
    var _desktopCanvasOffset: TSP_Point? = nil
    var _lightTableZoomScale: Float? = nil
    var _chartUiState: [TSCH_ChartUIState] = []
    var _showSlideGuides: Bool? = nil
    var _showTemplateGuides: Bool? = nil
    var _showsComments: Bool? = nil
    var _commentsPrintingToggleEnabled: Bool? = nil
    var _collapsedSlideNodes: [TSP_Reference] = []
    var _outlineCollapsedSlideNodes: [TSP_Reference] = []
    var _outlineHasBodySlideNodes: [TSP_Reference] = []
    var _showsRuler: Bool? = nil
    var _desktopNavigatorViewWidth: Float? = nil
    var _desktopOutlineViewWidth: Float? = nil
    var _desktopOutlineViewDefaultFixed: Bool? = nil
    var _desktopMainContentSize: TSP_Size? = nil
    var _desktopPresenterNotesViewHeight: Float? = nil
    var _desktopMainWindowOrigin: TSP_Point? = nil
    var _lightTableHidesSkippedSlides: Bool? = nil
    var _selectionPath: TSK_SelectionPathArchive? = nil
    var _desktopElementListViewWidth: Float? = nil
    var _elementListExpandedGroups: [TSP_Reference] = []
    var _showsMobileLightTable: Bool? = nil
    var _mobileLightTableZoomScale: Float? = nil
    var _mobileLightTableHidesSkippedSlides: Bool? = nil
    var _freehandDrawingToolkitState: TSP_Reference? = nil
    var _selectionPathTransformer: TSP_Reference? = nil
    var _showsMobileOutline: Bool? = nil
    var _editingDisabled: Bool? = nil
    var _desktopActivityStreamViewWidth: Float? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _slideNodeToEdit = source._slideNodeToEdit
      _deprecatedTemplateSlideNodeToApply = source._deprecatedTemplateSlideNodeToApply
      _deprecatedSlideThumbnailSize = source._deprecatedSlideThumbnailSize
      _canvasViewScale = source._canvasViewScale
      _canvasOffset = source._canvasOffset
      _selectedSlideNodes = source._selectedSlideNodes
      _iPhoneCanvasViewScale = source._iPhoneCanvasViewScale
      _iPhoneCanvasOffset = source._iPhoneCanvasOffset
      _iPhone568CanvasViewScale = source._iPhone568CanvasViewScale
      _iPhone568CanvasOffset = source._iPhone568CanvasOffset
      _desktopUiLayout = source._desktopUiLayout
      _desktopSlideViewContentFitsWindow = source._desktopSlideViewContentFitsWindow
      _desktopCanvasViewScale = source._desktopCanvasViewScale
      _desktopCanvasOffset = source._desktopCanvasOffset
      _lightTableZoomScale = source._lightTableZoomScale
      _chartUiState = source._chartUiState
      _showSlideGuides = source._showSlideGuides
      _showTemplateGuides = source._showTemplateGuides
      _showsComments = source._showsComments
      _commentsPrintingToggleEnabled = source._commentsPrintingToggleEnabled
      _collapsedSlideNodes = source._collapsedSlideNodes
      _outlineCollapsedSlideNodes = source._outlineCollapsedSlideNodes
      _outlineHasBodySlideNodes = source._outlineHasBodySlideNodes
      _showsRuler = source._showsRuler
      _desktopNavigatorViewWidth = source._desktopNavigatorViewWidth
      _desktopOutlineViewWidth = source._desktopOutlineViewWidth
      _desktopOutlineViewDefaultFixed = source._desktopOutlineViewDefaultFixed
      _desktopMainContentSize = source._desktopMainContentSize
      _desktopPresenterNotesViewHeight = source._desktopPresenterNotesViewHeight
      _desktopMainWindowOrigin = source._desktopMainWindowOrigin
      _lightTableHidesSkippedSlides = source._lightTableHidesSkippedSlides
      _selectionPath = source._selectionPath
      _desktopElementListViewWidth = source._desktopElementListViewWidth
      _elementListExpandedGroups = source._elementListExpandedGroups
      _showsMobileLightTable = source._showsMobileLightTable
      _mobileLightTableZoomScale = source._mobileLightTableZoomScale
      _mobileLightTableHidesSkippedSlides = source._mobileLightTableHidesSkippedSlides
      _freehandDrawingToolkitState = source._freehandDrawingToolkitState
      _selectionPathTransformer = source._selectionPathTransformer
      _showsMobileOutline = source._showsMobileOutline
      _editingDisabled = source._editingDisabled
      _desktopActivityStreamViewWidth = source._desktopActivityStreamViewWidth
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._slideNodeToEdit, !v.isInitialized {return false}
      if let v = _storage._deprecatedTemplateSlideNodeToApply, !v.isInitialized {return false}
      if let v = _storage._deprecatedSlideThumbnailSize, !v.isInitialized {return false}
      if let v = _storage._canvasOffset, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._selectedSlideNodes) {return false}
      if let v = _storage._iPhoneCanvasOffset, !v.isInitialized {return false}
      if let v = _storage._iPhone568CanvasOffset, !v.isInitialized {return false}
      if let v = _storage._desktopUiLayout, !v.isInitialized {return false}
      if let v = _storage._desktopCanvasOffset, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._chartUiState) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._collapsedSlideNodes) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._outlineCollapsedSlideNodes) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._outlineHasBodySlideNodes) {return false}
      if let v = _storage._desktopMainContentSize, !v.isInitialized {return false}
      if let v = _storage._desktopMainWindowOrigin, !v.isInitialized {return false}
      if let v = _storage._selectionPath, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._elementListExpandedGroups) {return false}
      if let v = _storage._freehandDrawingToolkitState, !v.isInitialized {return false}
      if let v = _storage._selectionPathTransformer, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._slideNodeToEdit) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._deprecatedTemplateSlideNodeToApply) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._deprecatedSlideThumbnailSize) }()
        case 4: try { try decoder.decodeSingularFloatField(value: &_storage._canvasViewScale) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._canvasOffset) }()
        case 6: try { try decoder.decodeRepeatedMessageField(value: &_storage._selectedSlideNodes) }()
        case 7: try { try decoder.decodeSingularFloatField(value: &_storage._iPhoneCanvasViewScale) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._iPhoneCanvasOffset) }()
        case 9: try { try decoder.decodeSingularFloatField(value: &_storage._iPhone568CanvasViewScale) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._iPhone568CanvasOffset) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._desktopUiLayout) }()
        case 12: try { try decoder.decodeSingularBoolField(value: &_storage._desktopSlideViewContentFitsWindow) }()
        case 13: try { try decoder.decodeSingularFloatField(value: &_storage._desktopCanvasViewScale) }()
        case 14: try { try decoder.decodeSingularFloatField(value: &_storage._lightTableZoomScale) }()
        case 15: try { try decoder.decodeRepeatedMessageField(value: &_storage._chartUiState) }()
        case 16: try { try decoder.decodeSingularBoolField(value: &_storage._showSlideGuides) }()
        case 17: try { try decoder.decodeSingularBoolField(value: &_storage._showTemplateGuides) }()
        case 18: try { try decoder.decodeSingularBoolField(value: &_storage._showsComments) }()
        case 19: try { try decoder.decodeRepeatedMessageField(value: &_storage._collapsedSlideNodes) }()
        case 20: try { try decoder.decodeSingularBoolField(value: &_storage._showsRuler) }()
        case 21: try { try decoder.decodeSingularMessageField(value: &_storage._desktopCanvasOffset) }()
        case 22: try { try decoder.decodeSingularFloatField(value: &_storage._desktopNavigatorViewWidth) }()
        case 23: try { try decoder.decodeSingularFloatField(value: &_storage._desktopOutlineViewWidth) }()
        case 24: try { try decoder.decodeSingularMessageField(value: &_storage._desktopMainContentSize) }()
        case 25: try { try decoder.decodeSingularFloatField(value: &_storage._desktopPresenterNotesViewHeight) }()
        case 26: try { try decoder.decodeSingularMessageField(value: &_storage._desktopMainWindowOrigin) }()
        case 27: try { try decoder.decodeSingularBoolField(value: &_storage._lightTableHidesSkippedSlides) }()
        case 28: try { try decoder.decodeRepeatedMessageField(value: &_storage._outlineCollapsedSlideNodes) }()
        case 29: try { try decoder.decodeSingularMessageField(value: &_storage._selectionPath) }()
        case 30: try { try decoder.decodeRepeatedMessageField(value: &_storage._outlineHasBodySlideNodes) }()
        case 31: try { try decoder.decodeSingularBoolField(value: &_storage._desktopOutlineViewDefaultFixed) }()
        case 32: try { try decoder.decodeSingularFloatField(value: &_storage._desktopElementListViewWidth) }()
        case 33: try { try decoder.decodeRepeatedMessageField(value: &_storage._elementListExpandedGroups) }()
        case 34: try { try decoder.decodeSingularBoolField(value: &_storage._showsMobileLightTable) }()
        case 35: try { try decoder.decodeSingularFloatField(value: &_storage._mobileLightTableZoomScale) }()
        case 36: try { try decoder.decodeSingularBoolField(value: &_storage._mobileLightTableHidesSkippedSlides) }()
        case 37: try { try decoder.decodeSingularMessageField(value: &_storage._freehandDrawingToolkitState) }()
        case 38: try { try decoder.decodeSingularMessageField(value: &_storage._selectionPathTransformer) }()
        case 39: try { try decoder.decodeSingularBoolField(value: &_storage._commentsPrintingToggleEnabled) }()
        case 40: try { try decoder.decodeSingularBoolField(value: &_storage._showsMobileOutline) }()
        case 41: try { try decoder.decodeSingularBoolField(value: &_storage._editingDisabled) }()
        case 42: try { try decoder.decodeSingularFloatField(value: &_storage._desktopActivityStreamViewWidth) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._slideNodeToEdit {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._deprecatedTemplateSlideNodeToApply {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._deprecatedSlideThumbnailSize {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._canvasViewScale {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._canvasOffset {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      if !_storage._selectedSlideNodes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._selectedSlideNodes, fieldNumber: 6)
      }
      try { if let v = _storage._iPhoneCanvasViewScale {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._iPhoneCanvasOffset {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._iPhone568CanvasViewScale {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._iPhone568CanvasOffset {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._desktopUiLayout {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._desktopSlideViewContentFitsWindow {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._desktopCanvasViewScale {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._lightTableZoomScale {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 14)
      } }()
      if !_storage._chartUiState.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._chartUiState, fieldNumber: 15)
      }
      try { if let v = _storage._showSlideGuides {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._showTemplateGuides {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._showsComments {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 18)
      } }()
      if !_storage._collapsedSlideNodes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._collapsedSlideNodes, fieldNumber: 19)
      }
      try { if let v = _storage._showsRuler {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._desktopCanvasOffset {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._desktopNavigatorViewWidth {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 22)
      } }()
      try { if let v = _storage._desktopOutlineViewWidth {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 23)
      } }()
      try { if let v = _storage._desktopMainContentSize {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
      } }()
      try { if let v = _storage._desktopPresenterNotesViewHeight {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 25)
      } }()
      try { if let v = _storage._desktopMainWindowOrigin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
      } }()
      try { if let v = _storage._lightTableHidesSkippedSlides {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 27)
      } }()
      if !_storage._outlineCollapsedSlideNodes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._outlineCollapsedSlideNodes, fieldNumber: 28)
      }
      try { if let v = _storage._selectionPath {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 29)
      } }()
      if !_storage._outlineHasBodySlideNodes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._outlineHasBodySlideNodes, fieldNumber: 30)
      }
      try { if let v = _storage._desktopOutlineViewDefaultFixed {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 31)
      } }()
      try { if let v = _storage._desktopElementListViewWidth {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 32)
      } }()
      if !_storage._elementListExpandedGroups.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._elementListExpandedGroups, fieldNumber: 33)
      }
      try { if let v = _storage._showsMobileLightTable {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 34)
      } }()
      try { if let v = _storage._mobileLightTableZoomScale {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 35)
      } }()
      try { if let v = _storage._mobileLightTableHidesSkippedSlides {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 36)
      } }()
      try { if let v = _storage._freehandDrawingToolkitState {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 37)
      } }()
      try { if let v = _storage._selectionPathTransformer {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 38)
      } }()
      try { if let v = _storage._commentsPrintingToggleEnabled {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 39)
      } }()
      try { if let v = _storage._showsMobileOutline {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 40)
      } }()
      try { if let v = _storage._editingDisabled {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 41)
      } }()
      try { if let v = _storage._desktopActivityStreamViewWidth {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 42)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_UIStateArchive, rhs: KN_UIStateArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._slideNodeToEdit != rhs_storage._slideNodeToEdit {return false}
        if _storage._deprecatedTemplateSlideNodeToApply != rhs_storage._deprecatedTemplateSlideNodeToApply {return false}
        if _storage._deprecatedSlideThumbnailSize != rhs_storage._deprecatedSlideThumbnailSize {return false}
        if _storage._canvasViewScale != rhs_storage._canvasViewScale {return false}
        if _storage._canvasOffset != rhs_storage._canvasOffset {return false}
        if _storage._selectedSlideNodes != rhs_storage._selectedSlideNodes {return false}
        if _storage._iPhoneCanvasViewScale != rhs_storage._iPhoneCanvasViewScale {return false}
        if _storage._iPhoneCanvasOffset != rhs_storage._iPhoneCanvasOffset {return false}
        if _storage._iPhone568CanvasViewScale != rhs_storage._iPhone568CanvasViewScale {return false}
        if _storage._iPhone568CanvasOffset != rhs_storage._iPhone568CanvasOffset {return false}
        if _storage._desktopUiLayout != rhs_storage._desktopUiLayout {return false}
        if _storage._desktopSlideViewContentFitsWindow != rhs_storage._desktopSlideViewContentFitsWindow {return false}
        if _storage._desktopCanvasViewScale != rhs_storage._desktopCanvasViewScale {return false}
        if _storage._desktopCanvasOffset != rhs_storage._desktopCanvasOffset {return false}
        if _storage._lightTableZoomScale != rhs_storage._lightTableZoomScale {return false}
        if _storage._chartUiState != rhs_storage._chartUiState {return false}
        if _storage._showSlideGuides != rhs_storage._showSlideGuides {return false}
        if _storage._showTemplateGuides != rhs_storage._showTemplateGuides {return false}
        if _storage._showsComments != rhs_storage._showsComments {return false}
        if _storage._commentsPrintingToggleEnabled != rhs_storage._commentsPrintingToggleEnabled {return false}
        if _storage._collapsedSlideNodes != rhs_storage._collapsedSlideNodes {return false}
        if _storage._outlineCollapsedSlideNodes != rhs_storage._outlineCollapsedSlideNodes {return false}
        if _storage._outlineHasBodySlideNodes != rhs_storage._outlineHasBodySlideNodes {return false}
        if _storage._showsRuler != rhs_storage._showsRuler {return false}
        if _storage._desktopNavigatorViewWidth != rhs_storage._desktopNavigatorViewWidth {return false}
        if _storage._desktopOutlineViewWidth != rhs_storage._desktopOutlineViewWidth {return false}
        if _storage._desktopOutlineViewDefaultFixed != rhs_storage._desktopOutlineViewDefaultFixed {return false}
        if _storage._desktopMainContentSize != rhs_storage._desktopMainContentSize {return false}
        if _storage._desktopPresenterNotesViewHeight != rhs_storage._desktopPresenterNotesViewHeight {return false}
        if _storage._desktopMainWindowOrigin != rhs_storage._desktopMainWindowOrigin {return false}
        if _storage._lightTableHidesSkippedSlides != rhs_storage._lightTableHidesSkippedSlides {return false}
        if _storage._selectionPath != rhs_storage._selectionPath {return false}
        if _storage._desktopElementListViewWidth != rhs_storage._desktopElementListViewWidth {return false}
        if _storage._elementListExpandedGroups != rhs_storage._elementListExpandedGroups {return false}
        if _storage._showsMobileLightTable != rhs_storage._showsMobileLightTable {return false}
        if _storage._mobileLightTableZoomScale != rhs_storage._mobileLightTableZoomScale {return false}
        if _storage._mobileLightTableHidesSkippedSlides != rhs_storage._mobileLightTableHidesSkippedSlides {return false}
        if _storage._freehandDrawingToolkitState != rhs_storage._freehandDrawingToolkitState {return false}
        if _storage._selectionPathTransformer != rhs_storage._selectionPathTransformer {return false}
        if _storage._showsMobileOutline != rhs_storage._showsMobileOutline {return false}
        if _storage._editingDisabled != rhs_storage._editingDisabled {return false}
        if _storage._desktopActivityStreamViewWidth != rhs_storage._desktopActivityStreamViewWidth {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_IOSRestorableViewStateRootArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IOSRestorableViewStateRootArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}saved_playback_state\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._savedPlaybackState) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._savedPlaybackState {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_IOSRestorableViewStateRootArchive, rhs: KN_IOSRestorableViewStateRootArchive) -> Bool {
    if lhs._savedPlaybackState != rhs._savedPlaybackState {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_IOSSavedPlaybackStateArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IOSSavedPlaybackStateArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}presentation_type\0\u{3}slide_node_index\0\u{3}event_index\0\u{3}breadcrumb_trail\0\u{3}had_external_display\0\u{3}is_elapsed_time_started\0\u{3}elapsed_time_start_time\0\u{3}recording_playback_current_time\0\u{3}should_show_slide_navigator\0\u{3}is_multi_presenter_show\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._presentationType) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._slideNodeIndex) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._eventIndex) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.breadcrumbTrail) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self._hadExternalDisplay) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self._isElapsedTimeStarted) }()
      case 7: try { try decoder.decodeSingularDoubleField(value: &self._elapsedTimeStartTime) }()
      case 8: try { try decoder.decodeSingularDoubleField(value: &self._recordingPlaybackCurrentTime) }()
      case 9: try { try decoder.decodeSingularBoolField(value: &self._shouldShowSlideNavigator) }()
      case 10: try { try decoder.decodeSingularBoolField(value: &self._isMultiPresenterShow) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._presentationType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._slideNodeIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._eventIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    } }()
    if !self.breadcrumbTrail.isEmpty {
      try visitor.visitRepeatedStringField(value: self.breadcrumbTrail, fieldNumber: 4)
    }
    try { if let v = self._hadExternalDisplay {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._isElapsedTimeStarted {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._elapsedTimeStartTime {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._recordingPlaybackCurrentTime {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._shouldShowSlideNavigator {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
    } }()
    try { if let v = self._isMultiPresenterShow {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_IOSSavedPlaybackStateArchive, rhs: KN_IOSSavedPlaybackStateArchive) -> Bool {
    if lhs._presentationType != rhs._presentationType {return false}
    if lhs._slideNodeIndex != rhs._slideNodeIndex {return false}
    if lhs._eventIndex != rhs._eventIndex {return false}
    if lhs.breadcrumbTrail != rhs.breadcrumbTrail {return false}
    if lhs._hadExternalDisplay != rhs._hadExternalDisplay {return false}
    if lhs._isElapsedTimeStarted != rhs._isElapsedTimeStarted {return false}
    if lhs._elapsedTimeStartTime != rhs._elapsedTimeStartTime {return false}
    if lhs._recordingPlaybackCurrentTime != rhs._recordingPlaybackCurrentTime {return false}
    if lhs._shouldShowSlideNavigator != rhs._shouldShowSlideNavigator {return false}
    if lhs._isMultiPresenterShow != rhs._isMultiPresenterShow {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_IOSSavedPlaybackStateArchive.PresentationType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}Manual\0\u{1}Record\0\u{1}PlayRecording\0\u{1}Rehearse\0\u{1}Showcast_DEPRECATED\0")
}

extension KN_CanvasSelectionArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CanvasSelectionArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}infos\0\u{3}database_action_ghost_indexes\0\u{3}action_ghost_indexes\0\u{3}build_chunks\0\u{3}non_interactive_infos\0\u{3}infos_for_action_ghost_indexes\0")

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.infos) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.nonInteractiveInfos) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.infosForActionGhostIndexes) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.actionGhostIndexes) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.buildChunks) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.infos) }()
      case 2: try { try decoder.decodeRepeatedUInt32Field(value: &self.databaseActionGhostIndexes) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.actionGhostIndexes) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.buildChunks) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.nonInteractiveInfos) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.infosForActionGhostIndexes) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.infos.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.infos, fieldNumber: 1)
    }
    if !self.databaseActionGhostIndexes.isEmpty {
      try visitor.visitRepeatedUInt32Field(value: self.databaseActionGhostIndexes, fieldNumber: 2)
    }
    if !self.actionGhostIndexes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.actionGhostIndexes, fieldNumber: 3)
    }
    if !self.buildChunks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.buildChunks, fieldNumber: 4)
    }
    if !self.nonInteractiveInfos.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.nonInteractiveInfos, fieldNumber: 5)
    }
    if !self.infosForActionGhostIndexes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.infosForActionGhostIndexes, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_CanvasSelectionArchive, rhs: KN_CanvasSelectionArchive) -> Bool {
    if lhs.infos != rhs.infos {return false}
    if lhs.nonInteractiveInfos != rhs.nonInteractiveInfos {return false}
    if lhs.infosForActionGhostIndexes != rhs.infosForActionGhostIndexes {return false}
    if lhs.actionGhostIndexes != rhs.actionGhostIndexes {return false}
    if lhs.buildChunks != rhs.buildChunks {return false}
    if lhs.databaseActionGhostIndexes != rhs.databaseActionGhostIndexes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_ActionGhostSelectionArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ActionGhostSelectionArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_ActionGhostSelectionArchive, rhs: KN_ActionGhostSelectionArchive) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_ThemeCustomTimingCurveArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ThemeCustomTimingCurveArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}name\0\u{1}curve\0")

  public var isInitialized: Bool {
    if self._name == nil {return false}
    if self._curve == nil {return false}
    if let v = self._curve, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._name) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._curve) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._curve {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_ThemeCustomTimingCurveArchive, rhs: KN_ThemeCustomTimingCurveArchive) -> Bool {
    if lhs._name != rhs._name {return false}
    if lhs._curve != rhs._curve {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_ThemeArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ThemeArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}super\0\u{1}templates\0\u{1}uuid\0\u{1}classicThemeRecords\0\u{3}default_template_slide_node\0\u{3}default_template_slide_node_reference\0\u{3}default_template_slide_node_is_our_best_guess\0\u{3}custom_effect_timing_curves\0\u{3}live_video_source_collection\0\u{3}motion_background_style_presets\0")

  fileprivate class _StorageClass {
    var _super: TSS_ThemeArchive? = nil
    var _templates: [TSP_Reference] = []
    var _uuid: String? = nil
    var _classicThemeRecords: [TSP_Reference] = []
    var _defaultTemplateSlideNode: TSP_Reference? = nil
    var _defaultTemplateSlideNodeReference: TSP_Reference? = nil
    var _defaultTemplateSlideNodeIsOurBestGuess: Bool? = nil
    var _customEffectTimingCurves: [KN_ThemeCustomTimingCurveArchive] = []
    var _liveVideoSourceCollection: TSP_Reference? = nil
    var _motionBackgroundStylePresets: [TSP_Reference] = []

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _super = source._super
      _templates = source._templates
      _uuid = source._uuid
      _classicThemeRecords = source._classicThemeRecords
      _defaultTemplateSlideNode = source._defaultTemplateSlideNode
      _defaultTemplateSlideNodeReference = source._defaultTemplateSlideNodeReference
      _defaultTemplateSlideNodeIsOurBestGuess = source._defaultTemplateSlideNodeIsOurBestGuess
      _customEffectTimingCurves = source._customEffectTimingCurves
      _liveVideoSourceCollection = source._liveVideoSourceCollection
      _motionBackgroundStylePresets = source._motionBackgroundStylePresets
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._super == nil {return false}
      if let v = _storage._super, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._templates) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._classicThemeRecords) {return false}
      if let v = _storage._defaultTemplateSlideNode, !v.isInitialized {return false}
      if let v = _storage._defaultTemplateSlideNodeReference, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._customEffectTimingCurves) {return false}
      if let v = _storage._liveVideoSourceCollection, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._motionBackgroundStylePresets) {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._super) }()
        case 2: try { try decoder.decodeRepeatedMessageField(value: &_storage._templates) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._uuid) }()
        case 4: try { try decoder.decodeRepeatedMessageField(value: &_storage._classicThemeRecords) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._defaultTemplateSlideNode) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._defaultTemplateSlideNodeReference) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._defaultTemplateSlideNodeIsOurBestGuess) }()
        case 8: try { try decoder.decodeRepeatedMessageField(value: &_storage._customEffectTimingCurves) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._liveVideoSourceCollection) }()
        case 10: try { try decoder.decodeRepeatedMessageField(value: &_storage._motionBackgroundStylePresets) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._super {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if !_storage._templates.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._templates, fieldNumber: 2)
      }
      try { if let v = _storage._uuid {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      } }()
      if !_storage._classicThemeRecords.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._classicThemeRecords, fieldNumber: 4)
      }
      try { if let v = _storage._defaultTemplateSlideNode {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._defaultTemplateSlideNodeReference {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._defaultTemplateSlideNodeIsOurBestGuess {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
      } }()
      if !_storage._customEffectTimingCurves.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._customEffectTimingCurves, fieldNumber: 8)
      }
      try { if let v = _storage._liveVideoSourceCollection {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      if !_storage._motionBackgroundStylePresets.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._motionBackgroundStylePresets, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_ThemeArchive, rhs: KN_ThemeArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._super != rhs_storage._super {return false}
        if _storage._templates != rhs_storage._templates {return false}
        if _storage._uuid != rhs_storage._uuid {return false}
        if _storage._classicThemeRecords != rhs_storage._classicThemeRecords {return false}
        if _storage._defaultTemplateSlideNode != rhs_storage._defaultTemplateSlideNode {return false}
        if _storage._defaultTemplateSlideNodeReference != rhs_storage._defaultTemplateSlideNodeReference {return false}
        if _storage._defaultTemplateSlideNodeIsOurBestGuess != rhs_storage._defaultTemplateSlideNodeIsOurBestGuess {return false}
        if _storage._customEffectTimingCurves != rhs_storage._customEffectTimingCurves {return false}
        if _storage._liveVideoSourceCollection != rhs_storage._liveVideoSourceCollection {return false}
        if _storage._motionBackgroundStylePresets != rhs_storage._motionBackgroundStylePresets {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_SlideTreeArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SlideTreeArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}rootSlideNode\0\u{1}slides\0")

  public var isInitialized: Bool {
    if let v = self._rootSlideNode, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.slides) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._rootSlideNode) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.slides) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._rootSlideNode {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.slides.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.slides, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_SlideTreeArchive, rhs: KN_SlideTreeArchive) -> Bool {
    if lhs._rootSlideNode != rhs._rootSlideNode {return false}
    if lhs.slides != rhs.slides {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_ShowArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShowArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}uiState\0\u{1}theme\0\u{1}slideTree\0\u{1}size\0\u{1}stylesheet\0\u{1}slideNumbersVisible\0\u{1}recording\0\u{3}loop_presentation\0\u{1}mode\0\u{3}autoplay_transition_delay\0\u{3}autoplay_build_delay\0\u{4}\u{4}idle_timer_active\0\u{3}idle_timer_delay\0\u{1}soundtrack\0\u{3}automatically_plays_upon_open\0\u{1}slideList\0")

  fileprivate class _StorageClass {
    var _uiState: TSP_Reference? = nil
    var _theme: TSP_Reference? = nil
    var _slideTree: KN_SlideTreeArchive? = nil
    var _size: TSP_Size? = nil
    var _stylesheet: TSP_Reference? = nil
    var _slideNumbersVisible: Bool? = nil
    var _recording: TSP_Reference? = nil
    var _loopPresentation: Bool? = nil
    var _mode: KN_ShowArchive.KNShowMode? = nil
    var _autoplayTransitionDelay: Double? = nil
    var _autoplayBuildDelay: Double? = nil
    var _idleTimerActive: Bool? = nil
    var _idleTimerDelay: Double? = nil
    var _soundtrack: TSP_Reference? = nil
    var _automaticallyPlaysUponOpen: Bool? = nil
    var _slideList: TSP_Reference? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _uiState = source._uiState
      _theme = source._theme
      _slideTree = source._slideTree
      _size = source._size
      _stylesheet = source._stylesheet
      _slideNumbersVisible = source._slideNumbersVisible
      _recording = source._recording
      _loopPresentation = source._loopPresentation
      _mode = source._mode
      _autoplayTransitionDelay = source._autoplayTransitionDelay
      _autoplayBuildDelay = source._autoplayBuildDelay
      _idleTimerActive = source._idleTimerActive
      _idleTimerDelay = source._idleTimerDelay
      _soundtrack = source._soundtrack
      _automaticallyPlaysUponOpen = source._automaticallyPlaysUponOpen
      _slideList = source._slideList
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._theme == nil {return false}
      if _storage._slideTree == nil {return false}
      if _storage._size == nil {return false}
      if _storage._stylesheet == nil {return false}
      if let v = _storage._uiState, !v.isInitialized {return false}
      if let v = _storage._theme, !v.isInitialized {return false}
      if let v = _storage._slideTree, !v.isInitialized {return false}
      if let v = _storage._size, !v.isInitialized {return false}
      if let v = _storage._stylesheet, !v.isInitialized {return false}
      if let v = _storage._recording, !v.isInitialized {return false}
      if let v = _storage._soundtrack, !v.isInitialized {return false}
      if let v = _storage._slideList, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._uiState) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._theme) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._slideTree) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._size) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._stylesheet) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._slideNumbersVisible) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._recording) }()
        case 8: try { try decoder.decodeSingularBoolField(value: &_storage._loopPresentation) }()
        case 9: try { try decoder.decodeSingularEnumField(value: &_storage._mode) }()
        case 10: try { try decoder.decodeSingularDoubleField(value: &_storage._autoplayTransitionDelay) }()
        case 11: try { try decoder.decodeSingularDoubleField(value: &_storage._autoplayBuildDelay) }()
        case 15: try { try decoder.decodeSingularBoolField(value: &_storage._idleTimerActive) }()
        case 16: try { try decoder.decodeSingularDoubleField(value: &_storage._idleTimerDelay) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._soundtrack) }()
        case 18: try { try decoder.decodeSingularBoolField(value: &_storage._automaticallyPlaysUponOpen) }()
        case 19: try { try decoder.decodeSingularMessageField(value: &_storage._slideList) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._uiState {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._theme {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._slideTree {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._size {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._stylesheet {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._slideNumbersVisible {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._recording {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._loopPresentation {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._mode {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._autoplayTransitionDelay {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._autoplayBuildDelay {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._idleTimerActive {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._idleTimerDelay {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._soundtrack {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._automaticallyPlaysUponOpen {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._slideList {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_ShowArchive, rhs: KN_ShowArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._uiState != rhs_storage._uiState {return false}
        if _storage._theme != rhs_storage._theme {return false}
        if _storage._slideTree != rhs_storage._slideTree {return false}
        if _storage._size != rhs_storage._size {return false}
        if _storage._stylesheet != rhs_storage._stylesheet {return false}
        if _storage._slideNumbersVisible != rhs_storage._slideNumbersVisible {return false}
        if _storage._recording != rhs_storage._recording {return false}
        if _storage._loopPresentation != rhs_storage._loopPresentation {return false}
        if _storage._mode != rhs_storage._mode {return false}
        if _storage._autoplayTransitionDelay != rhs_storage._autoplayTransitionDelay {return false}
        if _storage._autoplayBuildDelay != rhs_storage._autoplayBuildDelay {return false}
        if _storage._idleTimerActive != rhs_storage._idleTimerActive {return false}
        if _storage._idleTimerDelay != rhs_storage._idleTimerDelay {return false}
        if _storage._soundtrack != rhs_storage._soundtrack {return false}
        if _storage._automaticallyPlaysUponOpen != rhs_storage._automaticallyPlaysUponOpen {return false}
        if _storage._slideList != rhs_storage._slideList {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_ShowArchive.KNShowMode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0kKNShowModeNormal\0\u{1}kKNShowModeAutoPlay\0\u{1}kKNShowModeHyperlinksOnly\0")
}

extension KN_DocumentArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DocumentArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\u{2}show\0\u{1}super\0\u{3}tables_custom_format_list\0")

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if self._show == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._show, !v.isInitialized {return false}
    if let v = self._tablesCustomFormatList, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularMessageField(value: &self._show) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._super) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._tablesCustomFormatList) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._show {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._tablesCustomFormatList {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_DocumentArchive, rhs: KN_DocumentArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._show != rhs._show {return false}
    if lhs._tablesCustomFormatList != rhs._tablesCustomFormatList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_SlideStylePropertiesArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SlideStylePropertiesArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}fill\0\u{1}transition\0\u{3}transition_null\0\u{1}titlePlaceholderVisibility\0\u{1}bodyPlaceholderVisibility\0\u{1}slideNumberPlaceholderVisibility\0\u{1}objectPlaceholderVisibility\0")

  public var isInitialized: Bool {
    if let v = self._fill, !v.isInitialized {return false}
    if let v = self._transition, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._fill) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._transition) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self._transitionNull) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self._titlePlaceholderVisibility) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self._bodyPlaceholderVisibility) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self._slideNumberPlaceholderVisibility) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self._objectPlaceholderVisibility) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._fill {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._transition {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._transitionNull {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._titlePlaceholderVisibility {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._bodyPlaceholderVisibility {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._slideNumberPlaceholderVisibility {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._objectPlaceholderVisibility {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_SlideStylePropertiesArchive, rhs: KN_SlideStylePropertiesArchive) -> Bool {
    if lhs._fill != rhs._fill {return false}
    if lhs._transition != rhs._transition {return false}
    if lhs._transitionNull != rhs._transitionNull {return false}
    if lhs._titlePlaceholderVisibility != rhs._titlePlaceholderVisibility {return false}
    if lhs._bodyPlaceholderVisibility != rhs._bodyPlaceholderVisibility {return false}
    if lhs._objectPlaceholderVisibility != rhs._objectPlaceholderVisibility {return false}
    if lhs._slideNumberPlaceholderVisibility != rhs._slideNumberPlaceholderVisibility {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_SlideStyleArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SlideStyleArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}super\0\u{4}\u{9}override_count\0\u{3}slide_properties\0")

  fileprivate class _StorageClass {
    var _super: TSS_StyleArchive? = nil
    var _overrideCount: UInt32? = nil
    var _slideProperties: KN_SlideStylePropertiesArchive? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _super = source._super
      _overrideCount = source._overrideCount
      _slideProperties = source._slideProperties
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._super == nil {return false}
      if let v = _storage._super, !v.isInitialized {return false}
      if let v = _storage._slideProperties, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._super) }()
        case 10: try { try decoder.decodeSingularUInt32Field(value: &_storage._overrideCount) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._slideProperties) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._super {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._overrideCount {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._slideProperties {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_SlideStyleArchive, rhs: KN_SlideStyleArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._super != rhs_storage._super {return false}
        if _storage._overrideCount != rhs_storage._overrideCount {return false}
        if _storage._slideProperties != rhs_storage._slideProperties {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_PasteboardNativeStorageArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PasteboardNativeStorageArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}drawables\0\u{1}builds\0\u{1}buildChunks\0\u{1}slideNodes\0\u{1}originalShowSize\0\u{1}titleRanges\0\u{3}geometries_in_root\0\u{3}slide_node_unique_identifier\0\u{3}template_slide_nodes\0\u{1}collapsedSlideNodes\0\u{1}outlineCollapsedSlideNodes\0\u{3}displayed_slide_nodes\0\u{1}outlineHasBodySlideNodes\0\u{3}custom_effect_timing_curves\0\u{3}original_slide_node_UUIDs\0\u{3}slide_nodes_have_datas_needing_download\0\u{1}transition\0\u{3}live_video_sources\0")

  fileprivate class _StorageClass {
    var _drawables: [TSP_Reference] = []
    var _builds: [TSP_Reference] = []
    var _buildChunks: [TSP_Reference] = []
    var _slideNodes: [TSP_Reference] = []
    var _displayedSlideNodes: [TSP_Reference] = []
    var _templateSlideNodes: [TSP_Reference] = []
    var _collapsedSlideNodes: [TSP_Reference] = []
    var _outlineCollapsedSlideNodes: [TSP_Reference] = []
    var _outlineHasBodySlideNodes: [TSP_Reference] = []
    var _originalShowSize: TSP_Size? = nil
    var _titleRanges: [TSP_Range] = []
    var _geometriesInRoot: [TSD_GeometryArchive] = []
    var _slideNodeUniqueIdentifier: String? = nil
    var _customEffectTimingCurves: [KN_ThemeCustomTimingCurveArchive] = []
    var _originalSlideNodeUuids: [String] = []
    var _slideNodesHaveDatasNeedingDownload: Bool? = nil
    var _transition: KN_TransitionArchive? = nil
    var _liveVideoSources: [KN_PasteboardNativeStorageArchive.LiveVideoSourcePair] = []

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _drawables = source._drawables
      _builds = source._builds
      _buildChunks = source._buildChunks
      _slideNodes = source._slideNodes
      _displayedSlideNodes = source._displayedSlideNodes
      _templateSlideNodes = source._templateSlideNodes
      _collapsedSlideNodes = source._collapsedSlideNodes
      _outlineCollapsedSlideNodes = source._outlineCollapsedSlideNodes
      _outlineHasBodySlideNodes = source._outlineHasBodySlideNodes
      _originalShowSize = source._originalShowSize
      _titleRanges = source._titleRanges
      _geometriesInRoot = source._geometriesInRoot
      _slideNodeUniqueIdentifier = source._slideNodeUniqueIdentifier
      _customEffectTimingCurves = source._customEffectTimingCurves
      _originalSlideNodeUuids = source._originalSlideNodeUuids
      _slideNodesHaveDatasNeedingDownload = source._slideNodesHaveDatasNeedingDownload
      _transition = source._transition
      _liveVideoSources = source._liveVideoSources
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._drawables) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._builds) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._buildChunks) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._slideNodes) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._displayedSlideNodes) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._templateSlideNodes) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._collapsedSlideNodes) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._outlineCollapsedSlideNodes) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._outlineHasBodySlideNodes) {return false}
      if let v = _storage._originalShowSize, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._titleRanges) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._geometriesInRoot) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._customEffectTimingCurves) {return false}
      if let v = _storage._transition, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._liveVideoSources) {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeRepeatedMessageField(value: &_storage._drawables) }()
        case 2: try { try decoder.decodeRepeatedMessageField(value: &_storage._builds) }()
        case 3: try { try decoder.decodeRepeatedMessageField(value: &_storage._buildChunks) }()
        case 4: try { try decoder.decodeRepeatedMessageField(value: &_storage._slideNodes) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._originalShowSize) }()
        case 6: try { try decoder.decodeRepeatedMessageField(value: &_storage._titleRanges) }()
        case 7: try { try decoder.decodeRepeatedMessageField(value: &_storage._geometriesInRoot) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._slideNodeUniqueIdentifier) }()
        case 9: try { try decoder.decodeRepeatedMessageField(value: &_storage._templateSlideNodes) }()
        case 10: try { try decoder.decodeRepeatedMessageField(value: &_storage._collapsedSlideNodes) }()
        case 11: try { try decoder.decodeRepeatedMessageField(value: &_storage._outlineCollapsedSlideNodes) }()
        case 12: try { try decoder.decodeRepeatedMessageField(value: &_storage._displayedSlideNodes) }()
        case 13: try { try decoder.decodeRepeatedMessageField(value: &_storage._outlineHasBodySlideNodes) }()
        case 14: try { try decoder.decodeRepeatedMessageField(value: &_storage._customEffectTimingCurves) }()
        case 15: try { try decoder.decodeRepeatedStringField(value: &_storage._originalSlideNodeUuids) }()
        case 16: try { try decoder.decodeSingularBoolField(value: &_storage._slideNodesHaveDatasNeedingDownload) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._transition) }()
        case 18: try { try decoder.decodeRepeatedMessageField(value: &_storage._liveVideoSources) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._drawables.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._drawables, fieldNumber: 1)
      }
      if !_storage._builds.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._builds, fieldNumber: 2)
      }
      if !_storage._buildChunks.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._buildChunks, fieldNumber: 3)
      }
      if !_storage._slideNodes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._slideNodes, fieldNumber: 4)
      }
      try { if let v = _storage._originalShowSize {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      if !_storage._titleRanges.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._titleRanges, fieldNumber: 6)
      }
      if !_storage._geometriesInRoot.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._geometriesInRoot, fieldNumber: 7)
      }
      try { if let v = _storage._slideNodeUniqueIdentifier {
        try visitor.visitSingularStringField(value: v, fieldNumber: 8)
      } }()
      if !_storage._templateSlideNodes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._templateSlideNodes, fieldNumber: 9)
      }
      if !_storage._collapsedSlideNodes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._collapsedSlideNodes, fieldNumber: 10)
      }
      if !_storage._outlineCollapsedSlideNodes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._outlineCollapsedSlideNodes, fieldNumber: 11)
      }
      if !_storage._displayedSlideNodes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._displayedSlideNodes, fieldNumber: 12)
      }
      if !_storage._outlineHasBodySlideNodes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._outlineHasBodySlideNodes, fieldNumber: 13)
      }
      if !_storage._customEffectTimingCurves.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._customEffectTimingCurves, fieldNumber: 14)
      }
      if !_storage._originalSlideNodeUuids.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._originalSlideNodeUuids, fieldNumber: 15)
      }
      try { if let v = _storage._slideNodesHaveDatasNeedingDownload {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._transition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      } }()
      if !_storage._liveVideoSources.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._liveVideoSources, fieldNumber: 18)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_PasteboardNativeStorageArchive, rhs: KN_PasteboardNativeStorageArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._drawables != rhs_storage._drawables {return false}
        if _storage._builds != rhs_storage._builds {return false}
        if _storage._buildChunks != rhs_storage._buildChunks {return false}
        if _storage._slideNodes != rhs_storage._slideNodes {return false}
        if _storage._displayedSlideNodes != rhs_storage._displayedSlideNodes {return false}
        if _storage._templateSlideNodes != rhs_storage._templateSlideNodes {return false}
        if _storage._collapsedSlideNodes != rhs_storage._collapsedSlideNodes {return false}
        if _storage._outlineCollapsedSlideNodes != rhs_storage._outlineCollapsedSlideNodes {return false}
        if _storage._outlineHasBodySlideNodes != rhs_storage._outlineHasBodySlideNodes {return false}
        if _storage._originalShowSize != rhs_storage._originalShowSize {return false}
        if _storage._titleRanges != rhs_storage._titleRanges {return false}
        if _storage._geometriesInRoot != rhs_storage._geometriesInRoot {return false}
        if _storage._slideNodeUniqueIdentifier != rhs_storage._slideNodeUniqueIdentifier {return false}
        if _storage._customEffectTimingCurves != rhs_storage._customEffectTimingCurves {return false}
        if _storage._originalSlideNodeUuids != rhs_storage._originalSlideNodeUuids {return false}
        if _storage._slideNodesHaveDatasNeedingDownload != rhs_storage._slideNodesHaveDatasNeedingDownload {return false}
        if _storage._transition != rhs_storage._transition {return false}
        if _storage._liveVideoSources != rhs_storage._liveVideoSources {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_PasteboardNativeStorageArchive.LiveVideoSourcePair: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = KN_PasteboardNativeStorageArchive.protoMessageName + ".LiveVideoSourcePair"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}live_video_info\0\u{3}live_video_source\0")

  public var isInitialized: Bool {
    if let v = self._liveVideoInfo, !v.isInitialized {return false}
    if let v = self._liveVideoSource, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._liveVideoInfo) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._liveVideoSource) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._liveVideoInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._liveVideoSource {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_PasteboardNativeStorageArchive.LiveVideoSourcePair, rhs: KN_PasteboardNativeStorageArchive.LiveVideoSourcePair) -> Bool {
    if lhs._liveVideoInfo != rhs._liveVideoInfo {return false}
    if lhs._liveVideoSource != rhs._liveVideoSource {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_PrototypeForUndoTemplateChangeArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PrototypeForUndoTemplateChangeArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}slide_style\0\u{3}template_slide_id\0\u{3}drawable_info_id_list\0\u{1}placeholders\0\u{3}placeholder_tags_list\0")

  public var isInitialized: Bool {
    if self._templateSlideID == nil {return false}
    if let v = self._slideStyle, !v.isInitialized {return false}
    if let v = self._templateSlideID, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.drawableInfoIDList) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.placeholders) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._slideStyle) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._templateSlideID) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.drawableInfoIDList) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.placeholders) }()
      case 5: try { try decoder.decodeRepeatedStringField(value: &self.placeholderTagsList) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._slideStyle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._templateSlideID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.drawableInfoIDList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.drawableInfoIDList, fieldNumber: 3)
    }
    if !self.placeholders.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.placeholders, fieldNumber: 4)
    }
    if !self.placeholderTagsList.isEmpty {
      try visitor.visitRepeatedStringField(value: self.placeholderTagsList, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_PrototypeForUndoTemplateChangeArchive, rhs: KN_PrototypeForUndoTemplateChangeArchive) -> Bool {
    if lhs._slideStyle != rhs._slideStyle {return false}
    if lhs._templateSlideID != rhs._templateSlideID {return false}
    if lhs.drawableInfoIDList != rhs.drawableInfoIDList {return false}
    if lhs.placeholders != rhs.placeholders {return false}
    if lhs.placeholderTagsList != rhs.placeholderTagsList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_RecordingArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RecordingArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}event_tracks\0\u{3}movie_track\0\u{1}duration\0\u{3}sync_state_enum\0\u{3}modification_date\0\u{3}sync_state\0\u{3}correction_history\0")

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.eventTracks) {return false}
    if let v = self._movieTrack, !v.isInitialized {return false}
    if let v = self._modificationDate, !v.isInitialized {return false}
    if let v = self._syncState, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.eventTracks) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._movieTrack) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self._duration) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self._syncStateEnum) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._modificationDate) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._syncState) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._correctionHistory) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.eventTracks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.eventTracks, fieldNumber: 1)
    }
    try { if let v = self._movieTrack {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._duration {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._syncStateEnum {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._modificationDate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._syncState {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._correctionHistory {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_RecordingArchive, rhs: KN_RecordingArchive) -> Bool {
    if lhs.eventTracks != rhs.eventTracks {return false}
    if lhs._movieTrack != rhs._movieTrack {return false}
    if lhs._duration != rhs._duration {return false}
    if lhs._syncStateEnum != rhs._syncStateEnum {return false}
    if lhs._modificationDate != rhs._modificationDate {return false}
    if lhs._syncState != rhs._syncState {return false}
    if lhs._correctionHistory != rhs._correctionHistory {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_RecordingArchive.RecordingSyncStateEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0kRecordingSyncStateInSyncWithShow\0\u{1}kRecordingSyncStateOutOfSyncWithShow\0")
}

extension KN_RecordingSyncState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RecordingSyncState"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}out_of_sync_token\0\u{3}can_clear_out_of_sync_token\0")

  public var isInitialized: Bool {
    if let v = self._outOfSyncToken, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._outOfSyncToken) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._canClearOutOfSyncToken) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._outOfSyncToken {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._canClearOutOfSyncToken {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_RecordingSyncState, rhs: KN_RecordingSyncState) -> Bool {
    if lhs._outOfSyncToken != rhs._outOfSyncToken {return false}
    if lhs._canClearOutOfSyncToken != rhs._canClearOutOfSyncToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_RecordingCorrectionHistory: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RecordingCorrectionHistory"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}did_add_missing_events_for_radar_49654305\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._didAddMissingEventsForRadar49654305) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._didAddMissingEventsForRadar49654305 {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_RecordingCorrectionHistory, rhs: KN_RecordingCorrectionHistory) -> Bool {
    if lhs._didAddMissingEventsForRadar49654305 != rhs._didAddMissingEventsForRadar49654305 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_RecordingEventTrackArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RecordingEventTrackArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}type\0\u{1}events\0")

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.events) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._type) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.events) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._type {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    if !self.events.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.events, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_RecordingEventTrackArchive, rhs: KN_RecordingEventTrackArchive) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs.events != rhs.events {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_RecordingEventArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RecordingEventArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}start_time\0\u{4}g\u{f}navigation_event_archive\0\u{3}laser_event_archive\0\u{3}pause_event_archive\0\u{3}movie_event_archive\0")

  fileprivate class _StorageClass {
    var _startTime: Double? = nil
    var _navigationEventArchive: KN_RecordingNavigationEventArchive? = nil
    var _laserEventArchive: KN_RecordingLaserEventArchive? = nil
    var _pauseEventArchive: KN_RecordingPauseEventArchive? = nil
    var _movieEventArchive: KN_RecordingMovieEventArchive? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _startTime = source._startTime
      _navigationEventArchive = source._navigationEventArchive
      _laserEventArchive = source._laserEventArchive
      _pauseEventArchive = source._pauseEventArchive
      _movieEventArchive = source._movieEventArchive
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._navigationEventArchive, !v.isInitialized {return false}
      if let v = _storage._laserEventArchive, !v.isInitialized {return false}
      if let v = _storage._movieEventArchive, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularDoubleField(value: &_storage._startTime) }()
        case 1000: try { try decoder.decodeSingularMessageField(value: &_storage._navigationEventArchive) }()
        case 1001: try { try decoder.decodeSingularMessageField(value: &_storage._laserEventArchive) }()
        case 1002: try { try decoder.decodeSingularMessageField(value: &_storage._pauseEventArchive) }()
        case 1003: try { try decoder.decodeSingularMessageField(value: &_storage._movieEventArchive) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._startTime {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._navigationEventArchive {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1000)
      } }()
      try { if let v = _storage._laserEventArchive {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1001)
      } }()
      try { if let v = _storage._pauseEventArchive {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1002)
      } }()
      try { if let v = _storage._movieEventArchive {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1003)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_RecordingEventArchive, rhs: KN_RecordingEventArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._startTime != rhs_storage._startTime {return false}
        if _storage._navigationEventArchive != rhs_storage._navigationEventArchive {return false}
        if _storage._laserEventArchive != rhs_storage._laserEventArchive {return false}
        if _storage._pauseEventArchive != rhs_storage._pauseEventArchive {return false}
        if _storage._movieEventArchive != rhs_storage._movieEventArchive {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_RecordingNavigationEventArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RecordingNavigationEventArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}target_slide_node_reference\0\u{3}target_event_index\0\u{3}animation_phase\0\u{3}target_slide_node_id\0")

  public var isInitialized: Bool {
    if let v = self._targetSlideNodeID, !v.isInitialized {return false}
    if let v = self._targetSlideNodeReference, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._targetSlideNodeReference) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._targetEventIndex) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self._animationPhase) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._targetSlideNodeID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._targetSlideNodeReference {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._targetEventIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._animationPhase {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._targetSlideNodeID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_RecordingNavigationEventArchive, rhs: KN_RecordingNavigationEventArchive) -> Bool {
    if lhs._targetSlideNodeID != rhs._targetSlideNodeID {return false}
    if lhs._targetSlideNodeReference != rhs._targetSlideNodeReference {return false}
    if lhs._targetEventIndex != rhs._targetEventIndex {return false}
    if lhs._animationPhase != rhs._animationPhase {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_RecordingNavigationEventArchive.RecordingNavigationEventAnimationPhase: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0kRecordingNavigationEventAnimationNone\0\u{1}kRecordingNavigationEventAnimationStart\0\u{1}kRecordingNavigationEventAnimationEnd\0")
}

extension KN_RecordingLaserEventArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RecordingLaserEventArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}unscaled_location\0\u{3}unit_location\0")

  public var isInitialized: Bool {
    if let v = self._unscaledLocation, !v.isInitialized {return false}
    if let v = self._unitLocation, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._unscaledLocation) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._unitLocation) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._unscaledLocation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._unitLocation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_RecordingLaserEventArchive, rhs: KN_RecordingLaserEventArchive) -> Bool {
    if lhs._unscaledLocation != rhs._unscaledLocation {return false}
    if lhs._unitLocation != rhs._unitLocation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_RecordingPauseEventArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RecordingPauseEventArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}pause_event_type\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._pauseEventType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._pauseEventType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_RecordingPauseEventArchive, rhs: KN_RecordingPauseEventArchive) -> Bool {
    if lhs._pauseEventType != rhs._pauseEventType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_RecordingPauseEventArchive.RecordingPauseEventType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0kRecordingPauseEventTypeResume\0\u{1}kRecordingPauseEventTypePause\0\u{1}kRecordingPauseEventTypeConcealWithBlack\0\u{1}kRecordingPauseEventTypeConcealWithWhite\0")
}

extension KN_RecordingMovieEventArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RecordingMovieEventArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}movie_info_reference\0\u{3}movie_event_type\0\u{3}movie_event_value\0\u{3}movie_info_that_played_across_slides_reference\0\u{3}movie_slide_node_id\0")

  public var isInitialized: Bool {
    if let v = self._movieInfoReference, !v.isInitialized {return false}
    if let v = self._movieInfoThatPlayedAcrossSlidesReference, !v.isInitialized {return false}
    if let v = self._movieSlideNodeID, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._movieInfoReference) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self._movieEventType) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self._movieEventValue) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._movieInfoThatPlayedAcrossSlidesReference) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._movieSlideNodeID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._movieInfoReference {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._movieEventType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._movieEventValue {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._movieInfoThatPlayedAcrossSlidesReference {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._movieSlideNodeID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_RecordingMovieEventArchive, rhs: KN_RecordingMovieEventArchive) -> Bool {
    if lhs._movieInfoReference != rhs._movieInfoReference {return false}
    if lhs._movieEventType != rhs._movieEventType {return false}
    if lhs._movieEventValue != rhs._movieEventValue {return false}
    if lhs._movieInfoThatPlayedAcrossSlidesReference != rhs._movieInfoThatPlayedAcrossSlidesReference {return false}
    if lhs._movieSlideNodeID != rhs._movieSlideNodeID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_RecordingMovieEventArchive.RecordingMovieEventType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0kRecordingMovieEventNone\0\u{1}kRecordingMovieEventSeek\0\u{1}kRecordingMovieEventSetRate\0\u{1}kRecordingMovieEventStartPlayback\0\u{1}kRecordingMovieEventStopPlayback\0\u{1}kRecordingMovieEventBeginScrubbing\0\u{1}kRecordingMovieEventEndScrubbing\0")
}

extension KN_RecordingMovieTrackArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RecordingMovieTrackArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}movie_segments\0\u{3}is_movie_segment_data_trimmed_to_duration\0")

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.movieSegments) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.movieSegments) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._isMovieSegmentDataTrimmedToDuration) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.movieSegments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.movieSegments, fieldNumber: 1)
    }
    try { if let v = self._isMovieSegmentDataTrimmedToDuration {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_RecordingMovieTrackArchive, rhs: KN_RecordingMovieTrackArchive) -> Bool {
    if lhs.movieSegments != rhs.movieSegments {return false}
    if lhs._isMovieSegmentDataTrimmedToDuration != rhs._isMovieSegmentDataTrimmedToDuration {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_MovieSegmentArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MovieSegmentArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}database_movie_data\0\u{3}start_time\0\u{3}movie_data\0")

  public var isInitialized: Bool {
    if let v = self._movieData, !v.isInitialized {return false}
    if let v = self._databaseMovieData, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._databaseMovieData) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self._startTime) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._movieData) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._databaseMovieData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._startTime {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._movieData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_MovieSegmentArchive, rhs: KN_MovieSegmentArchive) -> Bool {
    if lhs._movieData != rhs._movieData {return false}
    if lhs._startTime != rhs._startTime {return false}
    if lhs._databaseMovieData != rhs._databaseMovieData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_Soundtrack: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Soundtrack"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}volume\0\u{1}mode\0\u{3}movie_media\0")

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.movieMedia) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self._volume) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self._mode) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.movieMedia) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._volume {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._mode {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    } }()
    if !self.movieMedia.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.movieMedia, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_Soundtrack, rhs: KN_Soundtrack) -> Bool {
    if lhs._volume != rhs._volume {return false}
    if lhs._mode != rhs._mode {return false}
    if lhs.movieMedia != rhs.movieMedia {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_Soundtrack.SoundtrackMode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0kKNSoundtrackModePlayOnce\0\u{1}kKNSoundtrackModeLoop\0\u{1}kKNSoundtrackModeDoNotPlay\0")
}

extension KN_SlideNumberAttachmentArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SlideNumberAttachmentArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}super\0")

  public var isInitialized: Bool {
    if self._super == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._super) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_SlideNumberAttachmentArchive, rhs: KN_SlideNumberAttachmentArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_SlideCollectionSelectionArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SlideCollectionSelectionArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}slide_nodes\0\u{3}slide_node_to_edit\0\u{3}selected_paragraph_indexes_for_slide_nodes\0\u{3}range_in_selected_paragraph\0")

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.slideNodes) {return false}
    if let v = self._slideNodeToEdit, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.selectedParagraphIndexesForSlideNodes) {return false}
    if let v = self._rangeInSelectedParagraph, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.slideNodes) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._slideNodeToEdit) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.selectedParagraphIndexesForSlideNodes) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._rangeInSelectedParagraph) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.slideNodes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.slideNodes, fieldNumber: 1)
    }
    try { if let v = self._slideNodeToEdit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.selectedParagraphIndexesForSlideNodes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.selectedParagraphIndexesForSlideNodes, fieldNumber: 3)
    }
    try { if let v = self._rangeInSelectedParagraph {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_SlideCollectionSelectionArchive, rhs: KN_SlideCollectionSelectionArchive) -> Bool {
    if lhs.slideNodes != rhs.slideNodes {return false}
    if lhs._slideNodeToEdit != rhs._slideNodeToEdit {return false}
    if lhs.selectedParagraphIndexesForSlideNodes != rhs.selectedParagraphIndexesForSlideNodes {return false}
    if lhs._rangeInSelectedParagraph != rhs._rangeInSelectedParagraph {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_SlideCollectionSelectionArchive.OutlineSelection: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = KN_SlideCollectionSelectionArchive.protoMessageName + ".OutlineSelection"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}slide_node\0\u{3}selected_paragraph_indexes\0")

  public var isInitialized: Bool {
    if self._slideNode == nil {return false}
    if self._selectedParagraphIndexes == nil {return false}
    if let v = self._slideNode, !v.isInitialized {return false}
    if let v = self._selectedParagraphIndexes, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._slideNode) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._selectedParagraphIndexes) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._slideNode {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._selectedParagraphIndexes {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_SlideCollectionSelectionArchive.OutlineSelection, rhs: KN_SlideCollectionSelectionArchive.OutlineSelection) -> Bool {
    if lhs._slideNode != rhs._slideNode {return false}
    if lhs._selectedParagraphIndexes != rhs._selectedParagraphIndexes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_PresenterNotesSelectionArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PresenterNotesSelectionArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}slide_node\0")

  public var isInitialized: Bool {
    if let v = self._slideNode, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._slideNode) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._slideNode {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_PresenterNotesSelectionArchive, rhs: KN_PresenterNotesSelectionArchive) -> Bool {
    if lhs._slideNode != rhs._slideNode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_MixedIdOperationArgs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MixedIdOperationArgs"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}args_list_types\0\u{3}add_args_list\0\u{3}show_placeholder_args_list\0\u{3}remove_args_list\0\u{3}hide_placeholder_args_list\0")

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.addArgsList) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.showPlaceholderArgsList) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.removeArgsList) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.hidePlaceholderArgsList) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedEnumField(value: &self.argsListTypes) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.addArgsList) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.showPlaceholderArgsList) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.removeArgsList) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.hidePlaceholderArgsList) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.argsListTypes.isEmpty {
      try visitor.visitRepeatedEnumField(value: self.argsListTypes, fieldNumber: 1)
    }
    if !self.addArgsList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.addArgsList, fieldNumber: 2)
    }
    if !self.showPlaceholderArgsList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.showPlaceholderArgsList, fieldNumber: 3)
    }
    if !self.removeArgsList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.removeArgsList, fieldNumber: 4)
    }
    if !self.hidePlaceholderArgsList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.hidePlaceholderArgsList, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_MixedIdOperationArgs, rhs: KN_MixedIdOperationArgs) -> Bool {
    if lhs.argsListTypes != rhs.argsListTypes {return false}
    if lhs.addArgsList != rhs.addArgsList {return false}
    if lhs.showPlaceholderArgsList != rhs.showPlaceholderArgsList {return false}
    if lhs.removeArgsList != rhs.removeArgsList {return false}
    if lhs.hidePlaceholderArgsList != rhs.hidePlaceholderArgsList {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_MixedIdOperationArgs.ArgsListKind: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0Add\0\u{1}Remove\0\u{1}ShowPlaceholder\0\u{1}HidePlaceholder\0")
}

extension KN_LiveVideoInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LiveVideoInfo"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}source_id\0\u{3}is_placeholder\0\u{1}scale\0\u{3}normalized_offset\0\u{3}mask_kind\0\u{3}mask_corner_radius\0\u{3}background_kind\0\u{3}background_fill\0")

  public var isInitialized: Bool {
    if let v = self._sourceID, !v.isInitialized {return false}
    if let v = self._normalizedOffset, !v.isInitialized {return false}
    if let v = self._backgroundFill, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._sourceID) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._isPlaceholder) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self._scale) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._normalizedOffset) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self._maskKind) }()
      case 6: try { try decoder.decodeSingularDoubleField(value: &self._maskCornerRadius) }()
      case 7: try { try decoder.decodeSingularInt32Field(value: &self._backgroundKind) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._backgroundFill) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._sourceID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._isPlaceholder {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._scale {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._normalizedOffset {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._maskKind {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._maskCornerRadius {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._backgroundKind {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._backgroundFill {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_LiveVideoInfo, rhs: KN_LiveVideoInfo) -> Bool {
    if lhs._sourceID != rhs._sourceID {return false}
    if lhs._isPlaceholder != rhs._isPlaceholder {return false}
    if lhs._scale != rhs._scale {return false}
    if lhs._normalizedOffset != rhs._normalizedOffset {return false}
    if lhs._maskKind != rhs._maskKind {return false}
    if lhs._maskCornerRadius != rhs._maskCornerRadius {return false}
    if lhs._backgroundKind != rhs._backgroundKind {return false}
    if lhs._backgroundFill != rhs._backgroundFill {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_LiveVideoSource: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LiveVideoSource"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}name\0\u{3}capture_device_description\0\u{3}collaboration_command_usage_state\0\u{3}poster_image_data\0\u{3}symbol_abbreviation_text\0\u{3}symbol_image_identifier\0\u{3}symbol_tint_color_identifier\0\u{3}is_default_source\0")

  fileprivate class _StorageClass {
    var _name: String? = nil
    var _captureDeviceDescription: KN_LiveVideoCaptureDeviceDescription? = nil
    var _collaborationCommandUsageState: KN_LiveVideoSourceCollaborationCommandUsageState? = nil
    var _posterImageData: TSP_DataReference? = nil
    var _symbolAbbreviationText: String? = nil
    var _symbolImageIdentifier: Int32? = nil
    var _symbolTintColorIdentifier: Int32? = nil
    var _isDefaultSource: Bool? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _captureDeviceDescription = source._captureDeviceDescription
      _collaborationCommandUsageState = source._collaborationCommandUsageState
      _posterImageData = source._posterImageData
      _symbolAbbreviationText = source._symbolAbbreviationText
      _symbolImageIdentifier = source._symbolImageIdentifier
      _symbolTintColorIdentifier = source._symbolTintColorIdentifier
      _isDefaultSource = source._isDefaultSource
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._captureDeviceDescription, !v.isInitialized {return false}
      if let v = _storage._collaborationCommandUsageState, !v.isInitialized {return false}
      if let v = _storage._posterImageData, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._captureDeviceDescription) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._collaborationCommandUsageState) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._posterImageData) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._symbolAbbreviationText) }()
        case 6: try { try decoder.decodeSingularInt32Field(value: &_storage._symbolImageIdentifier) }()
        case 7: try { try decoder.decodeSingularInt32Field(value: &_storage._symbolTintColorIdentifier) }()
        case 8: try { try decoder.decodeSingularBoolField(value: &_storage._isDefaultSource) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._name {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._captureDeviceDescription {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._collaborationCommandUsageState {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._posterImageData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._symbolAbbreviationText {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._symbolImageIdentifier {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._symbolTintColorIdentifier {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._isDefaultSource {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_LiveVideoSource, rhs: KN_LiveVideoSource) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._captureDeviceDescription != rhs_storage._captureDeviceDescription {return false}
        if _storage._collaborationCommandUsageState != rhs_storage._collaborationCommandUsageState {return false}
        if _storage._posterImageData != rhs_storage._posterImageData {return false}
        if _storage._symbolAbbreviationText != rhs_storage._symbolAbbreviationText {return false}
        if _storage._symbolImageIdentifier != rhs_storage._symbolImageIdentifier {return false}
        if _storage._symbolTintColorIdentifier != rhs_storage._symbolTintColorIdentifier {return false}
        if _storage._isDefaultSource != rhs_storage._isDefaultSource {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_LiveVideoSourceCollaborationCommandUsageState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LiveVideoSourceCollaborationCommandUsageState"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}single_collaboration_command_usage_token\0\u{3}has_multiple_collaboration_command_usage_tokens\0")

  public var isInitialized: Bool {
    if let v = self._singleCollaborationCommandUsageToken, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._singleCollaborationCommandUsageToken) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._hasMultipleCollaborationCommandUsageTokens_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._singleCollaborationCommandUsageToken {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._hasMultipleCollaborationCommandUsageTokens_p {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_LiveVideoSourceCollaborationCommandUsageState, rhs: KN_LiveVideoSourceCollaborationCommandUsageState) -> Bool {
    if lhs._singleCollaborationCommandUsageToken != rhs._singleCollaborationCommandUsageToken {return false}
    if lhs._hasMultipleCollaborationCommandUsageTokens_p != rhs._hasMultipleCollaborationCommandUsageTokens_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_LiveVideoCaptureDeviceDescription: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LiveVideoCaptureDeviceDescription"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}unique_id\0\u{1}position\0\u{3}device_type\0\u{3}localized_name\0\u{3}is_ios_screen_recording_device\0\u{3}model_id\0\u{3}default_video_resolution\0")

  public var isInitialized: Bool {
    if let v = self._defaultVideoResolution, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._uniqueID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self._position) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._deviceType) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._localizedName) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self._isIosScreenRecordingDevice) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._modelID) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._defaultVideoResolution) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._uniqueID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._position {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._deviceType {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._localizedName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._isIosScreenRecordingDevice {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._modelID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._defaultVideoResolution {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_LiveVideoCaptureDeviceDescription, rhs: KN_LiveVideoCaptureDeviceDescription) -> Bool {
    if lhs._uniqueID != rhs._uniqueID {return false}
    if lhs._position != rhs._position {return false}
    if lhs._deviceType != rhs._deviceType {return false}
    if lhs._localizedName != rhs._localizedName {return false}
    if lhs._isIosScreenRecordingDevice != rhs._isIosScreenRecordingDevice {return false}
    if lhs._modelID != rhs._modelID {return false}
    if lhs._defaultVideoResolution != rhs._defaultVideoResolution {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_LiveVideoCaptureDeviceDescription.Position: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0Unspecified\0\u{1}Back\0\u{1}Front\0")
}

extension KN_LiveVideoSourceCollection: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LiveVideoSourceCollection"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}sources\0\u{3}default_source\0")

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.sources) {return false}
    if let v = self._defaultSource, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.sources) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._defaultSource) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.sources.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sources, fieldNumber: 1)
    }
    try { if let v = self._defaultSource {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_LiveVideoSourceCollection, rhs: KN_LiveVideoSourceCollection) -> Bool {
    if lhs.sources != rhs.sources {return false}
    if lhs._defaultSource != rhs._defaultSource {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_LiveVideoSourceUsageEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LiveVideoSourceUsageEntry"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}background_kinds\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedInt32Field(value: &self.backgroundKinds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.backgroundKinds.isEmpty {
      try visitor.visitRepeatedInt32Field(value: self.backgroundKinds, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_LiveVideoSourceUsageEntry, rhs: KN_LiveVideoSourceUsageEntry) -> Bool {
    if lhs.backgroundKinds != rhs.backgroundKinds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_MotionBackgroundStylePropertiesArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MotionBackgroundStylePropertiesArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}background_name\0\u{1}variant\0\u{3}color_gradient\0\u{4}\u{7}random_number_seed\0\u{3}color_blur_sigma\0\u{3}noise_amplitude\0\u{3}noise_octaves\0\u{3}noise_scale\0\u{3}noise_speed\0\u{3}color_palette_offset\0\u{1}zoom\0\u{1}invert\0\u{3}blend_mode\0\u{3}source_blend_factor\0\u{3}dest_blend_factor\0\u{1}motion\0\u{3}background_color\0\u{3}foreground_color\0\u{3}line_color\0\u{3}point_color\0\u{1}alpha\0\u{1}border\0\u{1}blend\0\u{1}brightness\0\u{3}border_lightness\0\u{1}contrast\0\u{1}damping\0\u{1}density\0\u{3}diffuse_power\0\u{1}distortion\0\u{1}entropy\0\u{1}exposure\0\u{1}filter\0\u{3}fog_distance\0\u{3}fog_power\0\u{1}gamma\0\u{3}grain_amount\0\u{3}grain_intensity\0\u{1}hue\0\u{1}lightness\0\u{3}line_alpha\0\u{3}line_center\0\u{3}line_fade\0\u{3}line_fade_power\0\u{3}line_length\0\u{3}line_width\0\u{3}noise_size_scale\0\u{3}noise_size_weight\0\u{3}noise_variance\0\u{1}offset\0\u{3}motion_background_opacity\0\u{3}point_depth_alpha\0\u{3}point_size\0\u{1}radius\0\u{1}refraction\0\u{1}resolution\0\u{1}saturation\0\u{1}scale\0\u{3}shadow_alpha\0\u{3}shadow_angle\0\u{3}shadow_offset\0\u{3}shadow_scale\0\u{3}shadow_value\0\u{1}speed\0\u{3}texture_power\0\u{1}time\0\u{3}draw_points\0\u{3}draw_lines\0\u{3}draw_shadows\0\u{3}pixels_per_division\0\u{1}symmetry\0\u{3}lock_focus\0\u{1}amplitude\0\u{1}envelope\0\u{3}y_offset\0\u{1}focus\0\u{1}blur\0\u{3}grain_speed\0\u{3}mesh_color\0\u{1}angle\0\u{3}mesh_line_width\0\u{3}delta_time\0\u{3}time_start\0\u{3}color_contrast\0\u{3}color_gamma\0\u{3}color_saturation\0\u{3}color_brightness\0\u{3}color_hue\0\u{3}color_vibrance\0\u{3}noise_movement\0\u{1}power\0\u{1}threshold\0\u{3}noise_scale_horizontal\0\u{3}noise_scale_vertical\0\u{3}noise_gain\0\u{3}noise_lacunarity\0\u{3}instance_count\0\u{1}extrusion\0\u{3}noise_offset\0\u{3}color_hue_offset\0\u{3}shadow_hue\0\u{3}shadow_hue_offset\0\u{3}shadow_saturation\0\u{3}shadow_brightness\0\u{3}shadow_intensity\0\u{3}shadow_power\0\u{3}noise_octaves_iterations\0")

  fileprivate class _StorageClass {
    var _backgroundName: String? = nil
    var _variant: String? = nil
    var _colorGradient: TSD_FillArchive? = nil
    var _randomNumberSeed: Int32? = nil
    var _colorBlurSigma: Double? = nil
    var _noiseAmplitude: Double? = nil
    var _noiseOctaves: Double? = nil
    var _noiseScale: Double? = nil
    var _noiseSpeed: Double? = nil
    var _colorPaletteOffset: Double? = nil
    var _zoom: Double? = nil
    var _invert: Bool? = nil
    var _blendMode: String? = nil
    var _sourceBlendFactor: String? = nil
    var _destBlendFactor: String? = nil
    var _motion: String? = nil
    var _backgroundColor: TSP_Color? = nil
    var _foregroundColor: TSP_Color? = nil
    var _lineColor: TSP_Color? = nil
    var _pointColor: TSP_Color? = nil
    var _alpha: Double? = nil
    var _border: Double? = nil
    var _blend: Double? = nil
    var _brightness: Double? = nil
    var _borderLightness: Double? = nil
    var _contrast: Double? = nil
    var _damping: Double? = nil
    var _density: Double? = nil
    var _diffusePower: Double? = nil
    var _distortion: Double? = nil
    var _entropy: Double? = nil
    var _exposure: Double? = nil
    var _filter: Double? = nil
    var _fogDistance: Double? = nil
    var _fogPower: Double? = nil
    var _gamma: Double? = nil
    var _grainAmount: Double? = nil
    var _grainIntensity: Double? = nil
    var _hue: Double? = nil
    var _lightness: Double? = nil
    var _lineAlpha: Double? = nil
    var _lineCenter: Double? = nil
    var _lineFade: Double? = nil
    var _lineFadePower: Double? = nil
    var _lineLength: Double? = nil
    var _lineWidth: Double? = nil
    var _noiseSizeScale: Double? = nil
    var _noiseSizeWeight: Double? = nil
    var _noiseVariance: Double? = nil
    var _offset: Double? = nil
    var _motionBackgroundOpacity: Double? = nil
    var _pointDepthAlpha: Double? = nil
    var _pointSize: Double? = nil
    var _radius: Double? = nil
    var _refraction: Double? = nil
    var _resolution: Double? = nil
    var _saturation: Double? = nil
    var _scale: Double? = nil
    var _shadowAlpha: Double? = nil
    var _shadowAngle: Double? = nil
    var _shadowOffset: Double? = nil
    var _shadowScale: Double? = nil
    var _shadowValue: Double? = nil
    var _speed: Double? = nil
    var _texturePower: Double? = nil
    var _time: Double? = nil
    var _drawPoints: Bool? = nil
    var _drawLines: Bool? = nil
    var _drawShadows: Bool? = nil
    var _pixelsPerDivision: UInt32? = nil
    var _symmetry: Bool? = nil
    var _lockFocus: Bool? = nil
    var _amplitude: Double? = nil
    var _envelope: Double? = nil
    var _yOffset: Double? = nil
    var _focus: Double? = nil
    var _blur: Double? = nil
    var _grainSpeed: Double? = nil
    var _meshColor: TSP_Color? = nil
    var _angle: Double? = nil
    var _meshLineWidth: Double? = nil
    var _deltaTime: Double? = nil
    var _timeStart: Double? = nil
    var _colorContrast: Double? = nil
    var _colorGamma: Double? = nil
    var _colorSaturation: Double? = nil
    var _colorBrightness: Double? = nil
    var _colorHue: Double? = nil
    var _colorVibrance: Double? = nil
    var _noiseMovement: Double? = nil
    var _power: Double? = nil
    var _threshold: Double? = nil
    var _noiseScaleHorizontal: Double? = nil
    var _noiseScaleVertical: Double? = nil
    var _noiseGain: Double? = nil
    var _noiseLacunarity: Double? = nil
    var _instanceCount: Int32? = nil
    var _extrusion: Double? = nil
    var _noiseOffset: Double? = nil
    var _colorHueOffset: Double? = nil
    var _shadowHue: Double? = nil
    var _shadowHueOffset: Double? = nil
    var _shadowSaturation: Double? = nil
    var _shadowBrightness: Double? = nil
    var _shadowIntensity: Double? = nil
    var _shadowPower: Double? = nil
    var _noiseOctavesIterations: Int32? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _backgroundName = source._backgroundName
      _variant = source._variant
      _colorGradient = source._colorGradient
      _randomNumberSeed = source._randomNumberSeed
      _colorBlurSigma = source._colorBlurSigma
      _noiseAmplitude = source._noiseAmplitude
      _noiseOctaves = source._noiseOctaves
      _noiseScale = source._noiseScale
      _noiseSpeed = source._noiseSpeed
      _colorPaletteOffset = source._colorPaletteOffset
      _zoom = source._zoom
      _invert = source._invert
      _blendMode = source._blendMode
      _sourceBlendFactor = source._sourceBlendFactor
      _destBlendFactor = source._destBlendFactor
      _motion = source._motion
      _backgroundColor = source._backgroundColor
      _foregroundColor = source._foregroundColor
      _lineColor = source._lineColor
      _pointColor = source._pointColor
      _alpha = source._alpha
      _border = source._border
      _blend = source._blend
      _brightness = source._brightness
      _borderLightness = source._borderLightness
      _contrast = source._contrast
      _damping = source._damping
      _density = source._density
      _diffusePower = source._diffusePower
      _distortion = source._distortion
      _entropy = source._entropy
      _exposure = source._exposure
      _filter = source._filter
      _fogDistance = source._fogDistance
      _fogPower = source._fogPower
      _gamma = source._gamma
      _grainAmount = source._grainAmount
      _grainIntensity = source._grainIntensity
      _hue = source._hue
      _lightness = source._lightness
      _lineAlpha = source._lineAlpha
      _lineCenter = source._lineCenter
      _lineFade = source._lineFade
      _lineFadePower = source._lineFadePower
      _lineLength = source._lineLength
      _lineWidth = source._lineWidth
      _noiseSizeScale = source._noiseSizeScale
      _noiseSizeWeight = source._noiseSizeWeight
      _noiseVariance = source._noiseVariance
      _offset = source._offset
      _motionBackgroundOpacity = source._motionBackgroundOpacity
      _pointDepthAlpha = source._pointDepthAlpha
      _pointSize = source._pointSize
      _radius = source._radius
      _refraction = source._refraction
      _resolution = source._resolution
      _saturation = source._saturation
      _scale = source._scale
      _shadowAlpha = source._shadowAlpha
      _shadowAngle = source._shadowAngle
      _shadowOffset = source._shadowOffset
      _shadowScale = source._shadowScale
      _shadowValue = source._shadowValue
      _speed = source._speed
      _texturePower = source._texturePower
      _time = source._time
      _drawPoints = source._drawPoints
      _drawLines = source._drawLines
      _drawShadows = source._drawShadows
      _pixelsPerDivision = source._pixelsPerDivision
      _symmetry = source._symmetry
      _lockFocus = source._lockFocus
      _amplitude = source._amplitude
      _envelope = source._envelope
      _yOffset = source._yOffset
      _focus = source._focus
      _blur = source._blur
      _grainSpeed = source._grainSpeed
      _meshColor = source._meshColor
      _angle = source._angle
      _meshLineWidth = source._meshLineWidth
      _deltaTime = source._deltaTime
      _timeStart = source._timeStart
      _colorContrast = source._colorContrast
      _colorGamma = source._colorGamma
      _colorSaturation = source._colorSaturation
      _colorBrightness = source._colorBrightness
      _colorHue = source._colorHue
      _colorVibrance = source._colorVibrance
      _noiseMovement = source._noiseMovement
      _power = source._power
      _threshold = source._threshold
      _noiseScaleHorizontal = source._noiseScaleHorizontal
      _noiseScaleVertical = source._noiseScaleVertical
      _noiseGain = source._noiseGain
      _noiseLacunarity = source._noiseLacunarity
      _instanceCount = source._instanceCount
      _extrusion = source._extrusion
      _noiseOffset = source._noiseOffset
      _colorHueOffset = source._colorHueOffset
      _shadowHue = source._shadowHue
      _shadowHueOffset = source._shadowHueOffset
      _shadowSaturation = source._shadowSaturation
      _shadowBrightness = source._shadowBrightness
      _shadowIntensity = source._shadowIntensity
      _shadowPower = source._shadowPower
      _noiseOctavesIterations = source._noiseOctavesIterations
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._colorGradient, !v.isInitialized {return false}
      if let v = _storage._backgroundColor, !v.isInitialized {return false}
      if let v = _storage._foregroundColor, !v.isInitialized {return false}
      if let v = _storage._lineColor, !v.isInitialized {return false}
      if let v = _storage._pointColor, !v.isInitialized {return false}
      if let v = _storage._meshColor, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._backgroundName) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._variant) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._colorGradient) }()
        case 10: try { try decoder.decodeSingularInt32Field(value: &_storage._randomNumberSeed) }()
        case 11: try { try decoder.decodeSingularDoubleField(value: &_storage._colorBlurSigma) }()
        case 12: try { try decoder.decodeSingularDoubleField(value: &_storage._noiseAmplitude) }()
        case 13: try { try decoder.decodeSingularDoubleField(value: &_storage._noiseOctaves) }()
        case 14: try { try decoder.decodeSingularDoubleField(value: &_storage._noiseScale) }()
        case 15: try { try decoder.decodeSingularDoubleField(value: &_storage._noiseSpeed) }()
        case 16: try { try decoder.decodeSingularDoubleField(value: &_storage._colorPaletteOffset) }()
        case 17: try { try decoder.decodeSingularDoubleField(value: &_storage._zoom) }()
        case 18: try { try decoder.decodeSingularBoolField(value: &_storage._invert) }()
        case 19: try { try decoder.decodeSingularStringField(value: &_storage._blendMode) }()
        case 20: try { try decoder.decodeSingularStringField(value: &_storage._sourceBlendFactor) }()
        case 21: try { try decoder.decodeSingularStringField(value: &_storage._destBlendFactor) }()
        case 22: try { try decoder.decodeSingularStringField(value: &_storage._motion) }()
        case 23: try { try decoder.decodeSingularMessageField(value: &_storage._backgroundColor) }()
        case 24: try { try decoder.decodeSingularMessageField(value: &_storage._foregroundColor) }()
        case 25: try { try decoder.decodeSingularMessageField(value: &_storage._lineColor) }()
        case 26: try { try decoder.decodeSingularMessageField(value: &_storage._pointColor) }()
        case 27: try { try decoder.decodeSingularDoubleField(value: &_storage._alpha) }()
        case 28: try { try decoder.decodeSingularDoubleField(value: &_storage._border) }()
        case 29: try { try decoder.decodeSingularDoubleField(value: &_storage._blend) }()
        case 30: try { try decoder.decodeSingularDoubleField(value: &_storage._brightness) }()
        case 31: try { try decoder.decodeSingularDoubleField(value: &_storage._borderLightness) }()
        case 32: try { try decoder.decodeSingularDoubleField(value: &_storage._contrast) }()
        case 33: try { try decoder.decodeSingularDoubleField(value: &_storage._damping) }()
        case 34: try { try decoder.decodeSingularDoubleField(value: &_storage._density) }()
        case 35: try { try decoder.decodeSingularDoubleField(value: &_storage._diffusePower) }()
        case 36: try { try decoder.decodeSingularDoubleField(value: &_storage._distortion) }()
        case 37: try { try decoder.decodeSingularDoubleField(value: &_storage._entropy) }()
        case 38: try { try decoder.decodeSingularDoubleField(value: &_storage._exposure) }()
        case 39: try { try decoder.decodeSingularDoubleField(value: &_storage._filter) }()
        case 40: try { try decoder.decodeSingularDoubleField(value: &_storage._fogDistance) }()
        case 41: try { try decoder.decodeSingularDoubleField(value: &_storage._fogPower) }()
        case 42: try { try decoder.decodeSingularDoubleField(value: &_storage._gamma) }()
        case 43: try { try decoder.decodeSingularDoubleField(value: &_storage._grainAmount) }()
        case 44: try { try decoder.decodeSingularDoubleField(value: &_storage._grainIntensity) }()
        case 45: try { try decoder.decodeSingularDoubleField(value: &_storage._hue) }()
        case 46: try { try decoder.decodeSingularDoubleField(value: &_storage._lightness) }()
        case 47: try { try decoder.decodeSingularDoubleField(value: &_storage._lineAlpha) }()
        case 48: try { try decoder.decodeSingularDoubleField(value: &_storage._lineCenter) }()
        case 49: try { try decoder.decodeSingularDoubleField(value: &_storage._lineFade) }()
        case 50: try { try decoder.decodeSingularDoubleField(value: &_storage._lineFadePower) }()
        case 51: try { try decoder.decodeSingularDoubleField(value: &_storage._lineLength) }()
        case 52: try { try decoder.decodeSingularDoubleField(value: &_storage._lineWidth) }()
        case 53: try { try decoder.decodeSingularDoubleField(value: &_storage._noiseSizeScale) }()
        case 54: try { try decoder.decodeSingularDoubleField(value: &_storage._noiseSizeWeight) }()
        case 55: try { try decoder.decodeSingularDoubleField(value: &_storage._noiseVariance) }()
        case 56: try { try decoder.decodeSingularDoubleField(value: &_storage._offset) }()
        case 57: try { try decoder.decodeSingularDoubleField(value: &_storage._motionBackgroundOpacity) }()
        case 58: try { try decoder.decodeSingularDoubleField(value: &_storage._pointDepthAlpha) }()
        case 59: try { try decoder.decodeSingularDoubleField(value: &_storage._pointSize) }()
        case 60: try { try decoder.decodeSingularDoubleField(value: &_storage._radius) }()
        case 61: try { try decoder.decodeSingularDoubleField(value: &_storage._refraction) }()
        case 62: try { try decoder.decodeSingularDoubleField(value: &_storage._resolution) }()
        case 63: try { try decoder.decodeSingularDoubleField(value: &_storage._saturation) }()
        case 64: try { try decoder.decodeSingularDoubleField(value: &_storage._scale) }()
        case 65: try { try decoder.decodeSingularDoubleField(value: &_storage._shadowAlpha) }()
        case 66: try { try decoder.decodeSingularDoubleField(value: &_storage._shadowAngle) }()
        case 67: try { try decoder.decodeSingularDoubleField(value: &_storage._shadowOffset) }()
        case 68: try { try decoder.decodeSingularDoubleField(value: &_storage._shadowScale) }()
        case 69: try { try decoder.decodeSingularDoubleField(value: &_storage._shadowValue) }()
        case 70: try { try decoder.decodeSingularDoubleField(value: &_storage._speed) }()
        case 71: try { try decoder.decodeSingularDoubleField(value: &_storage._texturePower) }()
        case 72: try { try decoder.decodeSingularDoubleField(value: &_storage._time) }()
        case 73: try { try decoder.decodeSingularBoolField(value: &_storage._drawPoints) }()
        case 74: try { try decoder.decodeSingularBoolField(value: &_storage._drawLines) }()
        case 75: try { try decoder.decodeSingularBoolField(value: &_storage._drawShadows) }()
        case 76: try { try decoder.decodeSingularUInt32Field(value: &_storage._pixelsPerDivision) }()
        case 77: try { try decoder.decodeSingularBoolField(value: &_storage._symmetry) }()
        case 78: try { try decoder.decodeSingularBoolField(value: &_storage._lockFocus) }()
        case 79: try { try decoder.decodeSingularDoubleField(value: &_storage._amplitude) }()
        case 80: try { try decoder.decodeSingularDoubleField(value: &_storage._envelope) }()
        case 81: try { try decoder.decodeSingularDoubleField(value: &_storage._yOffset) }()
        case 82: try { try decoder.decodeSingularDoubleField(value: &_storage._focus) }()
        case 83: try { try decoder.decodeSingularDoubleField(value: &_storage._blur) }()
        case 84: try { try decoder.decodeSingularDoubleField(value: &_storage._grainSpeed) }()
        case 85: try { try decoder.decodeSingularMessageField(value: &_storage._meshColor) }()
        case 86: try { try decoder.decodeSingularDoubleField(value: &_storage._angle) }()
        case 87: try { try decoder.decodeSingularDoubleField(value: &_storage._meshLineWidth) }()
        case 88: try { try decoder.decodeSingularDoubleField(value: &_storage._deltaTime) }()
        case 89: try { try decoder.decodeSingularDoubleField(value: &_storage._timeStart) }()
        case 90: try { try decoder.decodeSingularDoubleField(value: &_storage._colorContrast) }()
        case 91: try { try decoder.decodeSingularDoubleField(value: &_storage._colorGamma) }()
        case 92: try { try decoder.decodeSingularDoubleField(value: &_storage._colorSaturation) }()
        case 93: try { try decoder.decodeSingularDoubleField(value: &_storage._colorBrightness) }()
        case 94: try { try decoder.decodeSingularDoubleField(value: &_storage._colorHue) }()
        case 95: try { try decoder.decodeSingularDoubleField(value: &_storage._colorVibrance) }()
        case 96: try { try decoder.decodeSingularDoubleField(value: &_storage._noiseMovement) }()
        case 97: try { try decoder.decodeSingularDoubleField(value: &_storage._power) }()
        case 98: try { try decoder.decodeSingularDoubleField(value: &_storage._threshold) }()
        case 99: try { try decoder.decodeSingularDoubleField(value: &_storage._noiseScaleHorizontal) }()
        case 100: try { try decoder.decodeSingularDoubleField(value: &_storage._noiseScaleVertical) }()
        case 101: try { try decoder.decodeSingularDoubleField(value: &_storage._noiseGain) }()
        case 102: try { try decoder.decodeSingularDoubleField(value: &_storage._noiseLacunarity) }()
        case 103: try { try decoder.decodeSingularInt32Field(value: &_storage._instanceCount) }()
        case 104: try { try decoder.decodeSingularDoubleField(value: &_storage._extrusion) }()
        case 105: try { try decoder.decodeSingularDoubleField(value: &_storage._noiseOffset) }()
        case 106: try { try decoder.decodeSingularDoubleField(value: &_storage._colorHueOffset) }()
        case 107: try { try decoder.decodeSingularDoubleField(value: &_storage._shadowHue) }()
        case 108: try { try decoder.decodeSingularDoubleField(value: &_storage._shadowHueOffset) }()
        case 109: try { try decoder.decodeSingularDoubleField(value: &_storage._shadowSaturation) }()
        case 110: try { try decoder.decodeSingularDoubleField(value: &_storage._shadowBrightness) }()
        case 111: try { try decoder.decodeSingularDoubleField(value: &_storage._shadowIntensity) }()
        case 112: try { try decoder.decodeSingularDoubleField(value: &_storage._shadowPower) }()
        case 113: try { try decoder.decodeSingularInt32Field(value: &_storage._noiseOctavesIterations) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._backgroundName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._variant {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._colorGradient {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._randomNumberSeed {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._colorBlurSigma {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._noiseAmplitude {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._noiseOctaves {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._noiseScale {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._noiseSpeed {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._colorPaletteOffset {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._zoom {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._invert {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._blendMode {
        try visitor.visitSingularStringField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._sourceBlendFactor {
        try visitor.visitSingularStringField(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._destBlendFactor {
        try visitor.visitSingularStringField(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._motion {
        try visitor.visitSingularStringField(value: v, fieldNumber: 22)
      } }()
      try { if let v = _storage._backgroundColor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      } }()
      try { if let v = _storage._foregroundColor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
      } }()
      try { if let v = _storage._lineColor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 25)
      } }()
      try { if let v = _storage._pointColor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
      } }()
      try { if let v = _storage._alpha {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 27)
      } }()
      try { if let v = _storage._border {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 28)
      } }()
      try { if let v = _storage._blend {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 29)
      } }()
      try { if let v = _storage._brightness {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 30)
      } }()
      try { if let v = _storage._borderLightness {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 31)
      } }()
      try { if let v = _storage._contrast {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 32)
      } }()
      try { if let v = _storage._damping {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 33)
      } }()
      try { if let v = _storage._density {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 34)
      } }()
      try { if let v = _storage._diffusePower {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 35)
      } }()
      try { if let v = _storage._distortion {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 36)
      } }()
      try { if let v = _storage._entropy {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 37)
      } }()
      try { if let v = _storage._exposure {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 38)
      } }()
      try { if let v = _storage._filter {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 39)
      } }()
      try { if let v = _storage._fogDistance {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 40)
      } }()
      try { if let v = _storage._fogPower {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 41)
      } }()
      try { if let v = _storage._gamma {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 42)
      } }()
      try { if let v = _storage._grainAmount {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 43)
      } }()
      try { if let v = _storage._grainIntensity {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 44)
      } }()
      try { if let v = _storage._hue {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 45)
      } }()
      try { if let v = _storage._lightness {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 46)
      } }()
      try { if let v = _storage._lineAlpha {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 47)
      } }()
      try { if let v = _storage._lineCenter {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 48)
      } }()
      try { if let v = _storage._lineFade {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 49)
      } }()
      try { if let v = _storage._lineFadePower {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 50)
      } }()
      try { if let v = _storage._lineLength {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 51)
      } }()
      try { if let v = _storage._lineWidth {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 52)
      } }()
      try { if let v = _storage._noiseSizeScale {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 53)
      } }()
      try { if let v = _storage._noiseSizeWeight {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 54)
      } }()
      try { if let v = _storage._noiseVariance {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 55)
      } }()
      try { if let v = _storage._offset {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 56)
      } }()
      try { if let v = _storage._motionBackgroundOpacity {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 57)
      } }()
      try { if let v = _storage._pointDepthAlpha {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 58)
      } }()
      try { if let v = _storage._pointSize {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 59)
      } }()
      try { if let v = _storage._radius {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 60)
      } }()
      try { if let v = _storage._refraction {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 61)
      } }()
      try { if let v = _storage._resolution {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 62)
      } }()
      try { if let v = _storage._saturation {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 63)
      } }()
      try { if let v = _storage._scale {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 64)
      } }()
      try { if let v = _storage._shadowAlpha {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 65)
      } }()
      try { if let v = _storage._shadowAngle {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 66)
      } }()
      try { if let v = _storage._shadowOffset {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 67)
      } }()
      try { if let v = _storage._shadowScale {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 68)
      } }()
      try { if let v = _storage._shadowValue {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 69)
      } }()
      try { if let v = _storage._speed {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 70)
      } }()
      try { if let v = _storage._texturePower {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 71)
      } }()
      try { if let v = _storage._time {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 72)
      } }()
      try { if let v = _storage._drawPoints {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 73)
      } }()
      try { if let v = _storage._drawLines {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 74)
      } }()
      try { if let v = _storage._drawShadows {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 75)
      } }()
      try { if let v = _storage._pixelsPerDivision {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 76)
      } }()
      try { if let v = _storage._symmetry {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 77)
      } }()
      try { if let v = _storage._lockFocus {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 78)
      } }()
      try { if let v = _storage._amplitude {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 79)
      } }()
      try { if let v = _storage._envelope {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 80)
      } }()
      try { if let v = _storage._yOffset {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 81)
      } }()
      try { if let v = _storage._focus {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 82)
      } }()
      try { if let v = _storage._blur {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 83)
      } }()
      try { if let v = _storage._grainSpeed {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 84)
      } }()
      try { if let v = _storage._meshColor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 85)
      } }()
      try { if let v = _storage._angle {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 86)
      } }()
      try { if let v = _storage._meshLineWidth {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 87)
      } }()
      try { if let v = _storage._deltaTime {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 88)
      } }()
      try { if let v = _storage._timeStart {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 89)
      } }()
      try { if let v = _storage._colorContrast {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 90)
      } }()
      try { if let v = _storage._colorGamma {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 91)
      } }()
      try { if let v = _storage._colorSaturation {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 92)
      } }()
      try { if let v = _storage._colorBrightness {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 93)
      } }()
      try { if let v = _storage._colorHue {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 94)
      } }()
      try { if let v = _storage._colorVibrance {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 95)
      } }()
      try { if let v = _storage._noiseMovement {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 96)
      } }()
      try { if let v = _storage._power {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 97)
      } }()
      try { if let v = _storage._threshold {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 98)
      } }()
      try { if let v = _storage._noiseScaleHorizontal {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 99)
      } }()
      try { if let v = _storage._noiseScaleVertical {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 100)
      } }()
      try { if let v = _storage._noiseGain {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 101)
      } }()
      try { if let v = _storage._noiseLacunarity {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 102)
      } }()
      try { if let v = _storage._instanceCount {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 103)
      } }()
      try { if let v = _storage._extrusion {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 104)
      } }()
      try { if let v = _storage._noiseOffset {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 105)
      } }()
      try { if let v = _storage._colorHueOffset {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 106)
      } }()
      try { if let v = _storage._shadowHue {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 107)
      } }()
      try { if let v = _storage._shadowHueOffset {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 108)
      } }()
      try { if let v = _storage._shadowSaturation {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 109)
      } }()
      try { if let v = _storage._shadowBrightness {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 110)
      } }()
      try { if let v = _storage._shadowIntensity {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 111)
      } }()
      try { if let v = _storage._shadowPower {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 112)
      } }()
      try { if let v = _storage._noiseOctavesIterations {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 113)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_MotionBackgroundStylePropertiesArchive, rhs: KN_MotionBackgroundStylePropertiesArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._backgroundName != rhs_storage._backgroundName {return false}
        if _storage._variant != rhs_storage._variant {return false}
        if _storage._colorGradient != rhs_storage._colorGradient {return false}
        if _storage._randomNumberSeed != rhs_storage._randomNumberSeed {return false}
        if _storage._colorBlurSigma != rhs_storage._colorBlurSigma {return false}
        if _storage._noiseAmplitude != rhs_storage._noiseAmplitude {return false}
        if _storage._noiseOctaves != rhs_storage._noiseOctaves {return false}
        if _storage._noiseScale != rhs_storage._noiseScale {return false}
        if _storage._noiseSpeed != rhs_storage._noiseSpeed {return false}
        if _storage._colorPaletteOffset != rhs_storage._colorPaletteOffset {return false}
        if _storage._zoom != rhs_storage._zoom {return false}
        if _storage._invert != rhs_storage._invert {return false}
        if _storage._blendMode != rhs_storage._blendMode {return false}
        if _storage._sourceBlendFactor != rhs_storage._sourceBlendFactor {return false}
        if _storage._destBlendFactor != rhs_storage._destBlendFactor {return false}
        if _storage._motion != rhs_storage._motion {return false}
        if _storage._backgroundColor != rhs_storage._backgroundColor {return false}
        if _storage._foregroundColor != rhs_storage._foregroundColor {return false}
        if _storage._lineColor != rhs_storage._lineColor {return false}
        if _storage._pointColor != rhs_storage._pointColor {return false}
        if _storage._alpha != rhs_storage._alpha {return false}
        if _storage._border != rhs_storage._border {return false}
        if _storage._blend != rhs_storage._blend {return false}
        if _storage._brightness != rhs_storage._brightness {return false}
        if _storage._borderLightness != rhs_storage._borderLightness {return false}
        if _storage._contrast != rhs_storage._contrast {return false}
        if _storage._damping != rhs_storage._damping {return false}
        if _storage._density != rhs_storage._density {return false}
        if _storage._diffusePower != rhs_storage._diffusePower {return false}
        if _storage._distortion != rhs_storage._distortion {return false}
        if _storage._entropy != rhs_storage._entropy {return false}
        if _storage._exposure != rhs_storage._exposure {return false}
        if _storage._filter != rhs_storage._filter {return false}
        if _storage._fogDistance != rhs_storage._fogDistance {return false}
        if _storage._fogPower != rhs_storage._fogPower {return false}
        if _storage._gamma != rhs_storage._gamma {return false}
        if _storage._grainAmount != rhs_storage._grainAmount {return false}
        if _storage._grainIntensity != rhs_storage._grainIntensity {return false}
        if _storage._hue != rhs_storage._hue {return false}
        if _storage._lightness != rhs_storage._lightness {return false}
        if _storage._lineAlpha != rhs_storage._lineAlpha {return false}
        if _storage._lineCenter != rhs_storage._lineCenter {return false}
        if _storage._lineFade != rhs_storage._lineFade {return false}
        if _storage._lineFadePower != rhs_storage._lineFadePower {return false}
        if _storage._lineLength != rhs_storage._lineLength {return false}
        if _storage._lineWidth != rhs_storage._lineWidth {return false}
        if _storage._noiseSizeScale != rhs_storage._noiseSizeScale {return false}
        if _storage._noiseSizeWeight != rhs_storage._noiseSizeWeight {return false}
        if _storage._noiseVariance != rhs_storage._noiseVariance {return false}
        if _storage._offset != rhs_storage._offset {return false}
        if _storage._motionBackgroundOpacity != rhs_storage._motionBackgroundOpacity {return false}
        if _storage._pointDepthAlpha != rhs_storage._pointDepthAlpha {return false}
        if _storage._pointSize != rhs_storage._pointSize {return false}
        if _storage._radius != rhs_storage._radius {return false}
        if _storage._refraction != rhs_storage._refraction {return false}
        if _storage._resolution != rhs_storage._resolution {return false}
        if _storage._saturation != rhs_storage._saturation {return false}
        if _storage._scale != rhs_storage._scale {return false}
        if _storage._shadowAlpha != rhs_storage._shadowAlpha {return false}
        if _storage._shadowAngle != rhs_storage._shadowAngle {return false}
        if _storage._shadowOffset != rhs_storage._shadowOffset {return false}
        if _storage._shadowScale != rhs_storage._shadowScale {return false}
        if _storage._shadowValue != rhs_storage._shadowValue {return false}
        if _storage._speed != rhs_storage._speed {return false}
        if _storage._texturePower != rhs_storage._texturePower {return false}
        if _storage._time != rhs_storage._time {return false}
        if _storage._drawPoints != rhs_storage._drawPoints {return false}
        if _storage._drawLines != rhs_storage._drawLines {return false}
        if _storage._drawShadows != rhs_storage._drawShadows {return false}
        if _storage._pixelsPerDivision != rhs_storage._pixelsPerDivision {return false}
        if _storage._symmetry != rhs_storage._symmetry {return false}
        if _storage._lockFocus != rhs_storage._lockFocus {return false}
        if _storage._amplitude != rhs_storage._amplitude {return false}
        if _storage._envelope != rhs_storage._envelope {return false}
        if _storage._yOffset != rhs_storage._yOffset {return false}
        if _storage._focus != rhs_storage._focus {return false}
        if _storage._blur != rhs_storage._blur {return false}
        if _storage._grainSpeed != rhs_storage._grainSpeed {return false}
        if _storage._meshColor != rhs_storage._meshColor {return false}
        if _storage._angle != rhs_storage._angle {return false}
        if _storage._meshLineWidth != rhs_storage._meshLineWidth {return false}
        if _storage._deltaTime != rhs_storage._deltaTime {return false}
        if _storage._timeStart != rhs_storage._timeStart {return false}
        if _storage._colorContrast != rhs_storage._colorContrast {return false}
        if _storage._colorGamma != rhs_storage._colorGamma {return false}
        if _storage._colorSaturation != rhs_storage._colorSaturation {return false}
        if _storage._colorBrightness != rhs_storage._colorBrightness {return false}
        if _storage._colorHue != rhs_storage._colorHue {return false}
        if _storage._colorVibrance != rhs_storage._colorVibrance {return false}
        if _storage._noiseMovement != rhs_storage._noiseMovement {return false}
        if _storage._power != rhs_storage._power {return false}
        if _storage._threshold != rhs_storage._threshold {return false}
        if _storage._noiseScaleHorizontal != rhs_storage._noiseScaleHorizontal {return false}
        if _storage._noiseScaleVertical != rhs_storage._noiseScaleVertical {return false}
        if _storage._noiseGain != rhs_storage._noiseGain {return false}
        if _storage._noiseLacunarity != rhs_storage._noiseLacunarity {return false}
        if _storage._instanceCount != rhs_storage._instanceCount {return false}
        if _storage._extrusion != rhs_storage._extrusion {return false}
        if _storage._noiseOffset != rhs_storage._noiseOffset {return false}
        if _storage._colorHueOffset != rhs_storage._colorHueOffset {return false}
        if _storage._shadowHue != rhs_storage._shadowHue {return false}
        if _storage._shadowHueOffset != rhs_storage._shadowHueOffset {return false}
        if _storage._shadowSaturation != rhs_storage._shadowSaturation {return false}
        if _storage._shadowBrightness != rhs_storage._shadowBrightness {return false}
        if _storage._shadowIntensity != rhs_storage._shadowIntensity {return false}
        if _storage._shadowPower != rhs_storage._shadowPower {return false}
        if _storage._noiseOctavesIterations != rhs_storage._noiseOctavesIterations {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_MotionBackgroundStyleArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MotionBackgroundStyleArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}super\0\u{4}\u{9}override_count\0\u{3}slide_properties\0\u{3}poster_frame_data\0")

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._slideProperties, !v.isInitialized {return false}
    if let v = self._posterFrameData, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._super) }()
      case 10: try { try decoder.decodeSingularUInt32Field(value: &self._overrideCount) }()
      case 11: try { try decoder.decodeSingularMessageField(value: &self._slideProperties) }()
      case 12: try { try decoder.decodeSingularMessageField(value: &self._posterFrameData) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._overrideCount {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 10)
    } }()
    try { if let v = self._slideProperties {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    } }()
    try { if let v = self._posterFrameData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_MotionBackgroundStyleArchive, rhs: KN_MotionBackgroundStyleArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._overrideCount != rhs._overrideCount {return false}
    if lhs._slideProperties != rhs._slideProperties {return false}
    if lhs._posterFrameData != rhs._posterFrameData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KN_MotionBackgroundFillArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MotionBackgroundFillArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}motion_background_style\0")

  public var isInitialized: Bool {
    if self._motionBackgroundStyle == nil {return false}
    if let v = self._motionBackgroundStyle, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._motionBackgroundStyle) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._motionBackgroundStyle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KN_MotionBackgroundFillArchive, rhs: KN_MotionBackgroundFillArchive) -> Bool {
    if lhs._motionBackgroundStyle != rhs._motionBackgroundStyle {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
