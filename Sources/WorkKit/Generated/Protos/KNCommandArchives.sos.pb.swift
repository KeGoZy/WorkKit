// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: KNCommandArchives.sos.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct KNSOS_InducedVerifyDocumentWithServerCommandArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var slideNodeIDList: [TSP_UUID] = []

  var slideNodeIDListUndefined: Bool {
    get {return _slideNodeIDListUndefined ?? false}
    set {_slideNodeIDListUndefined = newValue}
  }
  /// Returns true if `slideNodeIDListUndefined` has been explicitly set.
  var hasSlideNodeIDListUndefined: Bool {return self._slideNodeIDListUndefined != nil}
  /// Clears the value of `slideNodeIDListUndefined`. Subsequent reads from it will return its default value.
  mutating func clearSlideNodeIDListUndefined() {self._slideNodeIDListUndefined = nil}

  var templateSlideNodeIDList: [TSP_UUID] = []

  var templateSlideNodeIDListUndefined: Bool {
    get {return _templateSlideNodeIDListUndefined ?? false}
    set {_templateSlideNodeIDListUndefined = newValue}
  }
  /// Returns true if `templateSlideNodeIDListUndefined` has been explicitly set.
  var hasTemplateSlideNodeIDListUndefined: Bool {return self._templateSlideNodeIDListUndefined != nil}
  /// Clears the value of `templateSlideNodeIDListUndefined`. Subsequent reads from it will return its default value.
  mutating func clearTemplateSlideNodeIDListUndefined() {self._templateSlideNodeIDListUndefined = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _slideNodeIDListUndefined: Bool? = nil
  fileprivate var _templateSlideNodeIDListUndefined: Bool? = nil
}

struct KNSOS_InducedVerifyDrawableZOrdersWithServerCommandArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSASOS_InducedVerifyDrawableZOrdersWithServerCommandArchive {
    get {return _super ?? TSASOS_InducedVerifyDrawableZOrdersWithServerCommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSASOS_InducedVerifyDrawableZOrdersWithServerCommandArchive? = nil
}

struct KNSOS_CommandSlideReapplyTemplateSlideArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSASOS_CommandReapplyMasterArchive {
    get {return _super ?? TSASOS_CommandReapplyMasterArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSASOS_CommandReapplyMasterArchive? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "KNSOS"

extension KNSOS_InducedVerifyDocumentWithServerCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".InducedVerifyDocumentWithServerCommandArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}super\0\u{3}slide_node_id_list\0\u{3}slide_node_id_list_undefined\0\u{3}template_slide_node_id_list\0\u{3}template_slide_node_id_list_undefined\0")

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.slideNodeIDList) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.templateSlideNodeIDList) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._super) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.slideNodeIDList) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self._slideNodeIDListUndefined) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.templateSlideNodeIDList) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self._templateSlideNodeIDListUndefined) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.slideNodeIDList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.slideNodeIDList, fieldNumber: 2)
    }
    try { if let v = self._slideNodeIDListUndefined {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    } }()
    if !self.templateSlideNodeIDList.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.templateSlideNodeIDList, fieldNumber: 4)
    }
    try { if let v = self._templateSlideNodeIDListUndefined {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KNSOS_InducedVerifyDocumentWithServerCommandArchive, rhs: KNSOS_InducedVerifyDocumentWithServerCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.slideNodeIDList != rhs.slideNodeIDList {return false}
    if lhs._slideNodeIDListUndefined != rhs._slideNodeIDListUndefined {return false}
    if lhs.templateSlideNodeIDList != rhs.templateSlideNodeIDList {return false}
    if lhs._templateSlideNodeIDListUndefined != rhs._templateSlideNodeIDListUndefined {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KNSOS_InducedVerifyDrawableZOrdersWithServerCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".InducedVerifyDrawableZOrdersWithServerCommandArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}super\0")

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._super) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KNSOS_InducedVerifyDrawableZOrdersWithServerCommandArchive, rhs: KNSOS_InducedVerifyDrawableZOrdersWithServerCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension KNSOS_CommandSlideReapplyTemplateSlideArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandSlideReapplyTemplateSlideArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}super\0")

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._super) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: KNSOS_CommandSlideReapplyTemplateSlideArchive, rhs: KNSOS_CommandSlideReapplyTemplateSlideArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
