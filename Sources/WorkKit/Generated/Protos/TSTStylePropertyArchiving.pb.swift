// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: TSTStylePropertyArchiving.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct TST_Deprecated_TableStrokeArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var stroke: TSD_StrokeArchive {
    get {return _stroke ?? TSD_StrokeArchive()}
    set {_stroke = newValue}
  }
  /// Returns true if `stroke` has been explicitly set.
  var hasStroke: Bool {return self._stroke != nil}
  /// Clears the value of `stroke`. Subsequent reads from it will return its default value.
  mutating func clearStroke() {self._stroke = nil}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var background: Bool {
    get {return _background ?? false}
    set {_background = newValue}
  }
  /// Returns true if `background` has been explicitly set.
  var hasBackground: Bool {return self._background != nil}
  /// Clears the value of `background`. Subsequent reads from it will return its default value.
  mutating func clearBackground() {self._background = nil}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var opacity: Float {
    get {return _opacity ?? 0}
    set {_opacity = newValue}
  }
  /// Returns true if `opacity` has been explicitly set.
  var hasOpacity: Bool {return self._opacity != nil}
  /// Clears the value of `opacity`. Subsequent reads from it will return its default value.
  mutating func clearOpacity() {self._opacity = nil}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var empty: Bool {
    get {return _empty ?? false}
    set {_empty = newValue}
  }
  /// Returns true if `empty` has been explicitly set.
  var hasEmpty: Bool {return self._empty != nil}
  /// Clears the value of `empty`. Subsequent reads from it will return its default value.
  mutating func clearEmpty() {self._empty = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _stroke: TSD_StrokeArchive? = nil
  fileprivate var _background: Bool? = nil
  fileprivate var _opacity: Float? = nil
  fileprivate var _empty: Bool? = nil
}

struct TST_CellStylePropertiesArchive: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cellFill: TSD_FillArchive {
    get {return _storage._cellFill ?? TSD_FillArchive()}
    set {_uniqueStorage()._cellFill = newValue}
  }
  /// Returns true if `cellFill` has been explicitly set.
  var hasCellFill: Bool {return _storage._cellFill != nil}
  /// Clears the value of `cellFill`. Subsequent reads from it will return its default value.
  mutating func clearCellFill() {_uniqueStorage()._cellFill = nil}

  var textWrap: Bool {
    get {return _storage._textWrap ?? false}
    set {_uniqueStorage()._textWrap = newValue}
  }
  /// Returns true if `textWrap` has been explicitly set.
  var hasTextWrap: Bool {return _storage._textWrap != nil}
  /// Clears the value of `textWrap`. Subsequent reads from it will return its default value.
  mutating func clearTextWrap() {_uniqueStorage()._textWrap = nil}

  var deprecatedTopStroke: TST_Deprecated_TableStrokeArchive {
    get {return _storage._deprecatedTopStroke ?? TST_Deprecated_TableStrokeArchive()}
    set {_uniqueStorage()._deprecatedTopStroke = newValue}
  }
  /// Returns true if `deprecatedTopStroke` has been explicitly set.
  var hasDeprecatedTopStroke: Bool {return _storage._deprecatedTopStroke != nil}
  /// Clears the value of `deprecatedTopStroke`. Subsequent reads from it will return its default value.
  mutating func clearDeprecatedTopStroke() {_uniqueStorage()._deprecatedTopStroke = nil}

  var deprecatedRightStroke: TST_Deprecated_TableStrokeArchive {
    get {return _storage._deprecatedRightStroke ?? TST_Deprecated_TableStrokeArchive()}
    set {_uniqueStorage()._deprecatedRightStroke = newValue}
  }
  /// Returns true if `deprecatedRightStroke` has been explicitly set.
  var hasDeprecatedRightStroke: Bool {return _storage._deprecatedRightStroke != nil}
  /// Clears the value of `deprecatedRightStroke`. Subsequent reads from it will return its default value.
  mutating func clearDeprecatedRightStroke() {_uniqueStorage()._deprecatedRightStroke = nil}

  var deprecatedBottomStroke: TST_Deprecated_TableStrokeArchive {
    get {return _storage._deprecatedBottomStroke ?? TST_Deprecated_TableStrokeArchive()}
    set {_uniqueStorage()._deprecatedBottomStroke = newValue}
  }
  /// Returns true if `deprecatedBottomStroke` has been explicitly set.
  var hasDeprecatedBottomStroke: Bool {return _storage._deprecatedBottomStroke != nil}
  /// Clears the value of `deprecatedBottomStroke`. Subsequent reads from it will return its default value.
  mutating func clearDeprecatedBottomStroke() {_uniqueStorage()._deprecatedBottomStroke = nil}

  var deprecatedLeftStroke: TST_Deprecated_TableStrokeArchive {
    get {return _storage._deprecatedLeftStroke ?? TST_Deprecated_TableStrokeArchive()}
    set {_uniqueStorage()._deprecatedLeftStroke = newValue}
  }
  /// Returns true if `deprecatedLeftStroke` has been explicitly set.
  var hasDeprecatedLeftStroke: Bool {return _storage._deprecatedLeftStroke != nil}
  /// Clears the value of `deprecatedLeftStroke`. Subsequent reads from it will return its default value.
  mutating func clearDeprecatedLeftStroke() {_uniqueStorage()._deprecatedLeftStroke = nil}

  var verticalAlignment: Int32 {
    get {return _storage._verticalAlignment ?? 0}
    set {_uniqueStorage()._verticalAlignment = newValue}
  }
  /// Returns true if `verticalAlignment` has been explicitly set.
  var hasVerticalAlignment: Bool {return _storage._verticalAlignment != nil}
  /// Clears the value of `verticalAlignment`. Subsequent reads from it will return its default value.
  mutating func clearVerticalAlignment() {_uniqueStorage()._verticalAlignment = nil}

  var padding: TSWP_PaddingArchive {
    get {return _storage._padding ?? TSWP_PaddingArchive()}
    set {_uniqueStorage()._padding = newValue}
  }
  /// Returns true if `padding` has been explicitly set.
  var hasPadding: Bool {return _storage._padding != nil}
  /// Clears the value of `padding`. Subsequent reads from it will return its default value.
  mutating func clearPadding() {_uniqueStorage()._padding = nil}

  var topStroke: TSD_StrokeArchive {
    get {return _storage._topStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._topStroke = newValue}
  }
  /// Returns true if `topStroke` has been explicitly set.
  var hasTopStroke: Bool {return _storage._topStroke != nil}
  /// Clears the value of `topStroke`. Subsequent reads from it will return its default value.
  mutating func clearTopStroke() {_uniqueStorage()._topStroke = nil}

  var rightStroke: TSD_StrokeArchive {
    get {return _storage._rightStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._rightStroke = newValue}
  }
  /// Returns true if `rightStroke` has been explicitly set.
  var hasRightStroke: Bool {return _storage._rightStroke != nil}
  /// Clears the value of `rightStroke`. Subsequent reads from it will return its default value.
  mutating func clearRightStroke() {_uniqueStorage()._rightStroke = nil}

  var bottomStroke: TSD_StrokeArchive {
    get {return _storage._bottomStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._bottomStroke = newValue}
  }
  /// Returns true if `bottomStroke` has been explicitly set.
  var hasBottomStroke: Bool {return _storage._bottomStroke != nil}
  /// Clears the value of `bottomStroke`. Subsequent reads from it will return its default value.
  mutating func clearBottomStroke() {_uniqueStorage()._bottomStroke = nil}

  var leftStroke: TSD_StrokeArchive {
    get {return _storage._leftStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._leftStroke = newValue}
  }
  /// Returns true if `leftStroke` has been explicitly set.
  var hasLeftStroke: Bool {return _storage._leftStroke != nil}
  /// Clears the value of `leftStroke`. Subsequent reads from it will return its default value.
  mutating func clearLeftStroke() {_uniqueStorage()._leftStroke = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct TST_Deprecated_StrokePresetDataArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var deprecatedHorizontalStroke: TST_Deprecated_TableStrokeArchive {
    get {return _deprecatedHorizontalStroke ?? TST_Deprecated_TableStrokeArchive()}
    set {_deprecatedHorizontalStroke = newValue}
  }
  /// Returns true if `deprecatedHorizontalStroke` has been explicitly set.
  var hasDeprecatedHorizontalStroke: Bool {return self._deprecatedHorizontalStroke != nil}
  /// Clears the value of `deprecatedHorizontalStroke`. Subsequent reads from it will return its default value.
  mutating func clearDeprecatedHorizontalStroke() {self._deprecatedHorizontalStroke = nil}

  var deprecatedVerticalStroke: TST_Deprecated_TableStrokeArchive {
    get {return _deprecatedVerticalStroke ?? TST_Deprecated_TableStrokeArchive()}
    set {_deprecatedVerticalStroke = newValue}
  }
  /// Returns true if `deprecatedVerticalStroke` has been explicitly set.
  var hasDeprecatedVerticalStroke: Bool {return self._deprecatedVerticalStroke != nil}
  /// Clears the value of `deprecatedVerticalStroke`. Subsequent reads from it will return its default value.
  mutating func clearDeprecatedVerticalStroke() {self._deprecatedVerticalStroke = nil}

  var deprecatedExteriorStroke: TST_Deprecated_TableStrokeArchive {
    get {return _deprecatedExteriorStroke ?? TST_Deprecated_TableStrokeArchive()}
    set {_deprecatedExteriorStroke = newValue}
  }
  /// Returns true if `deprecatedExteriorStroke` has been explicitly set.
  var hasDeprecatedExteriorStroke: Bool {return self._deprecatedExteriorStroke != nil}
  /// Clears the value of `deprecatedExteriorStroke`. Subsequent reads from it will return its default value.
  mutating func clearDeprecatedExteriorStroke() {self._deprecatedExteriorStroke = nil}

  var deprecatedVisibleMask: Int32 {
    get {return _deprecatedVisibleMask ?? 0}
    set {_deprecatedVisibleMask = newValue}
  }
  /// Returns true if `deprecatedVisibleMask` has been explicitly set.
  var hasDeprecatedVisibleMask: Bool {return self._deprecatedVisibleMask != nil}
  /// Clears the value of `deprecatedVisibleMask`. Subsequent reads from it will return its default value.
  mutating func clearDeprecatedVisibleMask() {self._deprecatedVisibleMask = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _deprecatedHorizontalStroke: TST_Deprecated_TableStrokeArchive? = nil
  fileprivate var _deprecatedVerticalStroke: TST_Deprecated_TableStrokeArchive? = nil
  fileprivate var _deprecatedExteriorStroke: TST_Deprecated_TableStrokeArchive? = nil
  fileprivate var _deprecatedVisibleMask: Int32? = nil
}

struct TST_StrokePresetDataArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var horizontalStroke: TSD_StrokeArchive {
    get {return _horizontalStroke ?? TSD_StrokeArchive()}
    set {_horizontalStroke = newValue}
  }
  /// Returns true if `horizontalStroke` has been explicitly set.
  var hasHorizontalStroke: Bool {return self._horizontalStroke != nil}
  /// Clears the value of `horizontalStroke`. Subsequent reads from it will return its default value.
  mutating func clearHorizontalStroke() {self._horizontalStroke = nil}

  var verticalStroke: TSD_StrokeArchive {
    get {return _verticalStroke ?? TSD_StrokeArchive()}
    set {_verticalStroke = newValue}
  }
  /// Returns true if `verticalStroke` has been explicitly set.
  var hasVerticalStroke: Bool {return self._verticalStroke != nil}
  /// Clears the value of `verticalStroke`. Subsequent reads from it will return its default value.
  mutating func clearVerticalStroke() {self._verticalStroke = nil}

  var exteriorStroke: TSD_StrokeArchive {
    get {return _exteriorStroke ?? TSD_StrokeArchive()}
    set {_exteriorStroke = newValue}
  }
  /// Returns true if `exteriorStroke` has been explicitly set.
  var hasExteriorStroke: Bool {return self._exteriorStroke != nil}
  /// Clears the value of `exteriorStroke`. Subsequent reads from it will return its default value.
  mutating func clearExteriorStroke() {self._exteriorStroke = nil}

  var visibleMask: Int32 {
    get {return _visibleMask ?? 0}
    set {_visibleMask = newValue}
  }
  /// Returns true if `visibleMask` has been explicitly set.
  var hasVisibleMask: Bool {return self._visibleMask != nil}
  /// Clears the value of `visibleMask`. Subsequent reads from it will return its default value.
  mutating func clearVisibleMask() {self._visibleMask = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _horizontalStroke: TSD_StrokeArchive? = nil
  fileprivate var _verticalStroke: TSD_StrokeArchive? = nil
  fileprivate var _exteriorStroke: TSD_StrokeArchive? = nil
  fileprivate var _visibleMask: Int32? = nil
}

struct TST_StrokePresetListArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var count: Int32 {
    get {return _count ?? 0}
    set {_count = newValue}
  }
  /// Returns true if `count` has been explicitly set.
  var hasCount: Bool {return self._count != nil}
  /// Clears the value of `count`. Subsequent reads from it will return its default value.
  mutating func clearCount() {self._count = nil}

  var deprecatedPreset: [TST_Deprecated_StrokePresetDataArchive] = []

  var preset: [TST_StrokePresetDataArchive] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _count: Int32? = nil
}

struct TST_TableStylePropertiesArchive: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var bandedRows: Bool {
    get {return _storage._bandedRows ?? false}
    set {_uniqueStorage()._bandedRows = newValue}
  }
  /// Returns true if `bandedRows` has been explicitly set.
  var hasBandedRows: Bool {return _storage._bandedRows != nil}
  /// Clears the value of `bandedRows`. Subsequent reads from it will return its default value.
  mutating func clearBandedRows() {_uniqueStorage()._bandedRows = nil}

  var bandedFill: TSD_FillArchive {
    get {return _storage._bandedFill ?? TSD_FillArchive()}
    set {_uniqueStorage()._bandedFill = newValue}
  }
  /// Returns true if `bandedFill` has been explicitly set.
  var hasBandedFill: Bool {return _storage._bandedFill != nil}
  /// Clears the value of `bandedFill`. Subsequent reads from it will return its default value.
  mutating func clearBandedFill() {_uniqueStorage()._bandedFill = nil}

  var behavesLikeSpreadsheet: Bool {
    get {return _storage._behavesLikeSpreadsheet ?? false}
    set {_uniqueStorage()._behavesLikeSpreadsheet = newValue}
  }
  /// Returns true if `behavesLikeSpreadsheet` has been explicitly set.
  var hasBehavesLikeSpreadsheet: Bool {return _storage._behavesLikeSpreadsheet != nil}
  /// Clears the value of `behavesLikeSpreadsheet`. Subsequent reads from it will return its default value.
  mutating func clearBehavesLikeSpreadsheet() {_uniqueStorage()._behavesLikeSpreadsheet = nil}

  var autoResize: Bool {
    get {return _storage._autoResize ?? false}
    set {_uniqueStorage()._autoResize = newValue}
  }
  /// Returns true if `autoResize` has been explicitly set.
  var hasAutoResize: Bool {return _storage._autoResize != nil}
  /// Clears the value of `autoResize`. Subsequent reads from it will return its default value.
  mutating func clearAutoResize() {_uniqueStorage()._autoResize = nil}

  var deprecatedHeaderRowSeparatorStroke: TST_Deprecated_TableStrokeArchive {
    get {return _storage._deprecatedHeaderRowSeparatorStroke ?? TST_Deprecated_TableStrokeArchive()}
    set {_uniqueStorage()._deprecatedHeaderRowSeparatorStroke = newValue}
  }
  /// Returns true if `deprecatedHeaderRowSeparatorStroke` has been explicitly set.
  var hasDeprecatedHeaderRowSeparatorStroke: Bool {return _storage._deprecatedHeaderRowSeparatorStroke != nil}
  /// Clears the value of `deprecatedHeaderRowSeparatorStroke`. Subsequent reads from it will return its default value.
  mutating func clearDeprecatedHeaderRowSeparatorStroke() {_uniqueStorage()._deprecatedHeaderRowSeparatorStroke = nil}

  var deprecatedHeaderRowBorderStroke: TST_Deprecated_TableStrokeArchive {
    get {return _storage._deprecatedHeaderRowBorderStroke ?? TST_Deprecated_TableStrokeArchive()}
    set {_uniqueStorage()._deprecatedHeaderRowBorderStroke = newValue}
  }
  /// Returns true if `deprecatedHeaderRowBorderStroke` has been explicitly set.
  var hasDeprecatedHeaderRowBorderStroke: Bool {return _storage._deprecatedHeaderRowBorderStroke != nil}
  /// Clears the value of `deprecatedHeaderRowBorderStroke`. Subsequent reads from it will return its default value.
  mutating func clearDeprecatedHeaderRowBorderStroke() {_uniqueStorage()._deprecatedHeaderRowBorderStroke = nil}

  var deprecatedHeaderRowHorizontalStroke: TST_Deprecated_TableStrokeArchive {
    get {return _storage._deprecatedHeaderRowHorizontalStroke ?? TST_Deprecated_TableStrokeArchive()}
    set {_uniqueStorage()._deprecatedHeaderRowHorizontalStroke = newValue}
  }
  /// Returns true if `deprecatedHeaderRowHorizontalStroke` has been explicitly set.
  var hasDeprecatedHeaderRowHorizontalStroke: Bool {return _storage._deprecatedHeaderRowHorizontalStroke != nil}
  /// Clears the value of `deprecatedHeaderRowHorizontalStroke`. Subsequent reads from it will return its default value.
  mutating func clearDeprecatedHeaderRowHorizontalStroke() {_uniqueStorage()._deprecatedHeaderRowHorizontalStroke = nil}

  var deprecatedHeaderRowVerticalStroke: TST_Deprecated_TableStrokeArchive {
    get {return _storage._deprecatedHeaderRowVerticalStroke ?? TST_Deprecated_TableStrokeArchive()}
    set {_uniqueStorage()._deprecatedHeaderRowVerticalStroke = newValue}
  }
  /// Returns true if `deprecatedHeaderRowVerticalStroke` has been explicitly set.
  var hasDeprecatedHeaderRowVerticalStroke: Bool {return _storage._deprecatedHeaderRowVerticalStroke != nil}
  /// Clears the value of `deprecatedHeaderRowVerticalStroke`. Subsequent reads from it will return its default value.
  mutating func clearDeprecatedHeaderRowVerticalStroke() {_uniqueStorage()._deprecatedHeaderRowVerticalStroke = nil}

  var deprecatedHeaderColumnBorderStroke: TST_Deprecated_TableStrokeArchive {
    get {return _storage._deprecatedHeaderColumnBorderStroke ?? TST_Deprecated_TableStrokeArchive()}
    set {_uniqueStorage()._deprecatedHeaderColumnBorderStroke = newValue}
  }
  /// Returns true if `deprecatedHeaderColumnBorderStroke` has been explicitly set.
  var hasDeprecatedHeaderColumnBorderStroke: Bool {return _storage._deprecatedHeaderColumnBorderStroke != nil}
  /// Clears the value of `deprecatedHeaderColumnBorderStroke`. Subsequent reads from it will return its default value.
  mutating func clearDeprecatedHeaderColumnBorderStroke() {_uniqueStorage()._deprecatedHeaderColumnBorderStroke = nil}

  var deprecatedHeaderColumnSeparatorStroke: TST_Deprecated_TableStrokeArchive {
    get {return _storage._deprecatedHeaderColumnSeparatorStroke ?? TST_Deprecated_TableStrokeArchive()}
    set {_uniqueStorage()._deprecatedHeaderColumnSeparatorStroke = newValue}
  }
  /// Returns true if `deprecatedHeaderColumnSeparatorStroke` has been explicitly set.
  var hasDeprecatedHeaderColumnSeparatorStroke: Bool {return _storage._deprecatedHeaderColumnSeparatorStroke != nil}
  /// Clears the value of `deprecatedHeaderColumnSeparatorStroke`. Subsequent reads from it will return its default value.
  mutating func clearDeprecatedHeaderColumnSeparatorStroke() {_uniqueStorage()._deprecatedHeaderColumnSeparatorStroke = nil}

  var deprecatedHeaderColumnHorizontalStroke: TST_Deprecated_TableStrokeArchive {
    get {return _storage._deprecatedHeaderColumnHorizontalStroke ?? TST_Deprecated_TableStrokeArchive()}
    set {_uniqueStorage()._deprecatedHeaderColumnHorizontalStroke = newValue}
  }
  /// Returns true if `deprecatedHeaderColumnHorizontalStroke` has been explicitly set.
  var hasDeprecatedHeaderColumnHorizontalStroke: Bool {return _storage._deprecatedHeaderColumnHorizontalStroke != nil}
  /// Clears the value of `deprecatedHeaderColumnHorizontalStroke`. Subsequent reads from it will return its default value.
  mutating func clearDeprecatedHeaderColumnHorizontalStroke() {_uniqueStorage()._deprecatedHeaderColumnHorizontalStroke = nil}

  var deprecatedHeaderColumnVerticalStroke: TST_Deprecated_TableStrokeArchive {
    get {return _storage._deprecatedHeaderColumnVerticalStroke ?? TST_Deprecated_TableStrokeArchive()}
    set {_uniqueStorage()._deprecatedHeaderColumnVerticalStroke = newValue}
  }
  /// Returns true if `deprecatedHeaderColumnVerticalStroke` has been explicitly set.
  var hasDeprecatedHeaderColumnVerticalStroke: Bool {return _storage._deprecatedHeaderColumnVerticalStroke != nil}
  /// Clears the value of `deprecatedHeaderColumnVerticalStroke`. Subsequent reads from it will return its default value.
  mutating func clearDeprecatedHeaderColumnVerticalStroke() {_uniqueStorage()._deprecatedHeaderColumnVerticalStroke = nil}

  var deprecatedFooterRowSeparatorStroke: TST_Deprecated_TableStrokeArchive {
    get {return _storage._deprecatedFooterRowSeparatorStroke ?? TST_Deprecated_TableStrokeArchive()}
    set {_uniqueStorage()._deprecatedFooterRowSeparatorStroke = newValue}
  }
  /// Returns true if `deprecatedFooterRowSeparatorStroke` has been explicitly set.
  var hasDeprecatedFooterRowSeparatorStroke: Bool {return _storage._deprecatedFooterRowSeparatorStroke != nil}
  /// Clears the value of `deprecatedFooterRowSeparatorStroke`. Subsequent reads from it will return its default value.
  mutating func clearDeprecatedFooterRowSeparatorStroke() {_uniqueStorage()._deprecatedFooterRowSeparatorStroke = nil}

  var deprecatedFooterRowBorderStroke: TST_Deprecated_TableStrokeArchive {
    get {return _storage._deprecatedFooterRowBorderStroke ?? TST_Deprecated_TableStrokeArchive()}
    set {_uniqueStorage()._deprecatedFooterRowBorderStroke = newValue}
  }
  /// Returns true if `deprecatedFooterRowBorderStroke` has been explicitly set.
  var hasDeprecatedFooterRowBorderStroke: Bool {return _storage._deprecatedFooterRowBorderStroke != nil}
  /// Clears the value of `deprecatedFooterRowBorderStroke`. Subsequent reads from it will return its default value.
  mutating func clearDeprecatedFooterRowBorderStroke() {_uniqueStorage()._deprecatedFooterRowBorderStroke = nil}

  var deprecatedFooterRowHorizontalStroke: TST_Deprecated_TableStrokeArchive {
    get {return _storage._deprecatedFooterRowHorizontalStroke ?? TST_Deprecated_TableStrokeArchive()}
    set {_uniqueStorage()._deprecatedFooterRowHorizontalStroke = newValue}
  }
  /// Returns true if `deprecatedFooterRowHorizontalStroke` has been explicitly set.
  var hasDeprecatedFooterRowHorizontalStroke: Bool {return _storage._deprecatedFooterRowHorizontalStroke != nil}
  /// Clears the value of `deprecatedFooterRowHorizontalStroke`. Subsequent reads from it will return its default value.
  mutating func clearDeprecatedFooterRowHorizontalStroke() {_uniqueStorage()._deprecatedFooterRowHorizontalStroke = nil}

  var deprecatedFooterRowVerticalStroke: TST_Deprecated_TableStrokeArchive {
    get {return _storage._deprecatedFooterRowVerticalStroke ?? TST_Deprecated_TableStrokeArchive()}
    set {_uniqueStorage()._deprecatedFooterRowVerticalStroke = newValue}
  }
  /// Returns true if `deprecatedFooterRowVerticalStroke` has been explicitly set.
  var hasDeprecatedFooterRowVerticalStroke: Bool {return _storage._deprecatedFooterRowVerticalStroke != nil}
  /// Clears the value of `deprecatedFooterRowVerticalStroke`. Subsequent reads from it will return its default value.
  mutating func clearDeprecatedFooterRowVerticalStroke() {_uniqueStorage()._deprecatedFooterRowVerticalStroke = nil}

  var deprecatedTableBodyHorizontalBorderStroke: TST_Deprecated_TableStrokeArchive {
    get {return _storage._deprecatedTableBodyHorizontalBorderStroke ?? TST_Deprecated_TableStrokeArchive()}
    set {_uniqueStorage()._deprecatedTableBodyHorizontalBorderStroke = newValue}
  }
  /// Returns true if `deprecatedTableBodyHorizontalBorderStroke` has been explicitly set.
  var hasDeprecatedTableBodyHorizontalBorderStroke: Bool {return _storage._deprecatedTableBodyHorizontalBorderStroke != nil}
  /// Clears the value of `deprecatedTableBodyHorizontalBorderStroke`. Subsequent reads from it will return its default value.
  mutating func clearDeprecatedTableBodyHorizontalBorderStroke() {_uniqueStorage()._deprecatedTableBodyHorizontalBorderStroke = nil}

  var deprecatedTableBodyVerticalBorderStroke: TST_Deprecated_TableStrokeArchive {
    get {return _storage._deprecatedTableBodyVerticalBorderStroke ?? TST_Deprecated_TableStrokeArchive()}
    set {_uniqueStorage()._deprecatedTableBodyVerticalBorderStroke = newValue}
  }
  /// Returns true if `deprecatedTableBodyVerticalBorderStroke` has been explicitly set.
  var hasDeprecatedTableBodyVerticalBorderStroke: Bool {return _storage._deprecatedTableBodyVerticalBorderStroke != nil}
  /// Clears the value of `deprecatedTableBodyVerticalBorderStroke`. Subsequent reads from it will return its default value.
  mutating func clearDeprecatedTableBodyVerticalBorderStroke() {_uniqueStorage()._deprecatedTableBodyVerticalBorderStroke = nil}

  var deprecatedTableBodyHorizontalStroke: TST_Deprecated_TableStrokeArchive {
    get {return _storage._deprecatedTableBodyHorizontalStroke ?? TST_Deprecated_TableStrokeArchive()}
    set {_uniqueStorage()._deprecatedTableBodyHorizontalStroke = newValue}
  }
  /// Returns true if `deprecatedTableBodyHorizontalStroke` has been explicitly set.
  var hasDeprecatedTableBodyHorizontalStroke: Bool {return _storage._deprecatedTableBodyHorizontalStroke != nil}
  /// Clears the value of `deprecatedTableBodyHorizontalStroke`. Subsequent reads from it will return its default value.
  mutating func clearDeprecatedTableBodyHorizontalStroke() {_uniqueStorage()._deprecatedTableBodyHorizontalStroke = nil}

  var deprecatedTableBodyVerticalStroke: TST_Deprecated_TableStrokeArchive {
    get {return _storage._deprecatedTableBodyVerticalStroke ?? TST_Deprecated_TableStrokeArchive()}
    set {_uniqueStorage()._deprecatedTableBodyVerticalStroke = newValue}
  }
  /// Returns true if `deprecatedTableBodyVerticalStroke` has been explicitly set.
  var hasDeprecatedTableBodyVerticalStroke: Bool {return _storage._deprecatedTableBodyVerticalStroke != nil}
  /// Clears the value of `deprecatedTableBodyVerticalStroke`. Subsequent reads from it will return its default value.
  mutating func clearDeprecatedTableBodyVerticalStroke() {_uniqueStorage()._deprecatedTableBodyVerticalStroke = nil}

  var strokePresetList: TST_StrokePresetListArchive {
    get {return _storage._strokePresetList ?? TST_StrokePresetListArchive()}
    set {_uniqueStorage()._strokePresetList = newValue}
  }
  /// Returns true if `strokePresetList` has been explicitly set.
  var hasStrokePresetList: Bool {return _storage._strokePresetList != nil}
  /// Clears the value of `strokePresetList`. Subsequent reads from it will return its default value.
  mutating func clearStrokePresetList() {_uniqueStorage()._strokePresetList = nil}

  var vStrokesVisible: Bool {
    get {return _storage._vStrokesVisible ?? false}
    set {_uniqueStorage()._vStrokesVisible = newValue}
  }
  /// Returns true if `vStrokesVisible` has been explicitly set.
  var hasVStrokesVisible: Bool {return _storage._vStrokesVisible != nil}
  /// Clears the value of `vStrokesVisible`. Subsequent reads from it will return its default value.
  mutating func clearVStrokesVisible() {_uniqueStorage()._vStrokesVisible = nil}

  var hStrokesVisible: Bool {
    get {return _storage._hStrokesVisible ?? false}
    set {_uniqueStorage()._hStrokesVisible = newValue}
  }
  /// Returns true if `hStrokesVisible` has been explicitly set.
  var hasHStrokesVisible: Bool {return _storage._hStrokesVisible != nil}
  /// Clears the value of `hStrokesVisible`. Subsequent reads from it will return its default value.
  mutating func clearHStrokesVisible() {_uniqueStorage()._hStrokesVisible = nil}

  var hrSeparatorVisible: Bool {
    get {return _storage._hrSeparatorVisible ?? false}
    set {_uniqueStorage()._hrSeparatorVisible = newValue}
  }
  /// Returns true if `hrSeparatorVisible` has been explicitly set.
  var hasHrSeparatorVisible: Bool {return _storage._hrSeparatorVisible != nil}
  /// Clears the value of `hrSeparatorVisible`. Subsequent reads from it will return its default value.
  mutating func clearHrSeparatorVisible() {_uniqueStorage()._hrSeparatorVisible = nil}

  var hcSeparatorVisible: Bool {
    get {return _storage._hcSeparatorVisible ?? false}
    set {_uniqueStorage()._hcSeparatorVisible = newValue}
  }
  /// Returns true if `hcSeparatorVisible` has been explicitly set.
  var hasHcSeparatorVisible: Bool {return _storage._hcSeparatorVisible != nil}
  /// Clears the value of `hcSeparatorVisible`. Subsequent reads from it will return its default value.
  mutating func clearHcSeparatorVisible() {_uniqueStorage()._hcSeparatorVisible = nil}

  var footerSeparatorVisible: Bool {
    get {return _storage._footerSeparatorVisible ?? false}
    set {_uniqueStorage()._footerSeparatorVisible = newValue}
  }
  /// Returns true if `footerSeparatorVisible` has been explicitly set.
  var hasFooterSeparatorVisible: Bool {return _storage._footerSeparatorVisible != nil}
  /// Clears the value of `footerSeparatorVisible`. Subsequent reads from it will return its default value.
  mutating func clearFooterSeparatorVisible() {_uniqueStorage()._footerSeparatorVisible = nil}

  var tableBorderVisible: Bool {
    get {return _storage._tableBorderVisible ?? false}
    set {_uniqueStorage()._tableBorderVisible = newValue}
  }
  /// Returns true if `tableBorderVisible` has been explicitly set.
  var hasTableBorderVisible: Bool {return _storage._tableBorderVisible != nil}
  /// Clears the value of `tableBorderVisible`. Subsequent reads from it will return its default value.
  mutating func clearTableBorderVisible() {_uniqueStorage()._tableBorderVisible = nil}

  var tableHeaderBorderVisible: Bool {
    get {return _storage._tableHeaderBorderVisible ?? false}
    set {_uniqueStorage()._tableHeaderBorderVisible = newValue}
  }
  /// Returns true if `tableHeaderBorderVisible` has been explicitly set.
  var hasTableHeaderBorderVisible: Bool {return _storage._tableHeaderBorderVisible != nil}
  /// Clears the value of `tableHeaderBorderVisible`. Subsequent reads from it will return its default value.
  mutating func clearTableHeaderBorderVisible() {_uniqueStorage()._tableHeaderBorderVisible = nil}

  var tableHcDividerVisible: Bool {
    get {return _storage._tableHcDividerVisible ?? false}
    set {_uniqueStorage()._tableHcDividerVisible = newValue}
  }
  /// Returns true if `tableHcDividerVisible` has been explicitly set.
  var hasTableHcDividerVisible: Bool {return _storage._tableHcDividerVisible != nil}
  /// Clears the value of `tableHcDividerVisible`. Subsequent reads from it will return its default value.
  mutating func clearTableHcDividerVisible() {_uniqueStorage()._tableHcDividerVisible = nil}

  var tableHrDividerVisible: Bool {
    get {return _storage._tableHrDividerVisible ?? false}
    set {_uniqueStorage()._tableHrDividerVisible = newValue}
  }
  /// Returns true if `tableHrDividerVisible` has been explicitly set.
  var hasTableHrDividerVisible: Bool {return _storage._tableHrDividerVisible != nil}
  /// Clears the value of `tableHrDividerVisible`. Subsequent reads from it will return its default value.
  mutating func clearTableHrDividerVisible() {_uniqueStorage()._tableHrDividerVisible = nil}

  var tableFooterDividerVisible: Bool {
    get {return _storage._tableFooterDividerVisible ?? false}
    set {_uniqueStorage()._tableFooterDividerVisible = newValue}
  }
  /// Returns true if `tableFooterDividerVisible` has been explicitly set.
  var hasTableFooterDividerVisible: Bool {return _storage._tableFooterDividerVisible != nil}
  /// Clears the value of `tableFooterDividerVisible`. Subsequent reads from it will return its default value.
  mutating func clearTableFooterDividerVisible() {_uniqueStorage()._tableFooterDividerVisible = nil}

  var obsoleteMasterFontSize: Int32 {
    get {return _storage._obsoleteMasterFontSize ?? 0}
    set {_uniqueStorage()._obsoleteMasterFontSize = newValue}
  }
  /// Returns true if `obsoleteMasterFontSize` has been explicitly set.
  var hasObsoleteMasterFontSize: Bool {return _storage._obsoleteMasterFontSize != nil}
  /// Clears the value of `obsoleteMasterFontSize`. Subsequent reads from it will return its default value.
  mutating func clearObsoleteMasterFontSize() {_uniqueStorage()._obsoleteMasterFontSize = nil}

  var masterFontFamily: String {
    get {return _storage._masterFontFamily ?? String()}
    set {_uniqueStorage()._masterFontFamily = newValue}
  }
  /// Returns true if `masterFontFamily` has been explicitly set.
  var hasMasterFontFamily: Bool {return _storage._masterFontFamily != nil}
  /// Clears the value of `masterFontFamily`. Subsequent reads from it will return its default value.
  mutating func clearMasterFontFamily() {_uniqueStorage()._masterFontFamily = nil}

  var writingDirection: TSWP_WritingDirectionType {
    get {return _storage._writingDirection ?? .kWritingDirectionNatural}
    set {_uniqueStorage()._writingDirection = newValue}
  }
  /// Returns true if `writingDirection` has been explicitly set.
  var hasWritingDirection: Bool {return _storage._writingDirection != nil}
  /// Clears the value of `writingDirection`. Subsequent reads from it will return its default value.
  mutating func clearWritingDirection() {_uniqueStorage()._writingDirection = nil}

  var headerRowSeparatorStroke: TSD_StrokeArchive {
    get {return _storage._headerRowSeparatorStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._headerRowSeparatorStroke = newValue}
  }
  /// Returns true if `headerRowSeparatorStroke` has been explicitly set.
  var hasHeaderRowSeparatorStroke: Bool {return _storage._headerRowSeparatorStroke != nil}
  /// Clears the value of `headerRowSeparatorStroke`. Subsequent reads from it will return its default value.
  mutating func clearHeaderRowSeparatorStroke() {_uniqueStorage()._headerRowSeparatorStroke = nil}

  var headerRowBorderStroke: TSD_StrokeArchive {
    get {return _storage._headerRowBorderStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._headerRowBorderStroke = newValue}
  }
  /// Returns true if `headerRowBorderStroke` has been explicitly set.
  var hasHeaderRowBorderStroke: Bool {return _storage._headerRowBorderStroke != nil}
  /// Clears the value of `headerRowBorderStroke`. Subsequent reads from it will return its default value.
  mutating func clearHeaderRowBorderStroke() {_uniqueStorage()._headerRowBorderStroke = nil}

  var headerRowHorizontalStroke: TSD_StrokeArchive {
    get {return _storage._headerRowHorizontalStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._headerRowHorizontalStroke = newValue}
  }
  /// Returns true if `headerRowHorizontalStroke` has been explicitly set.
  var hasHeaderRowHorizontalStroke: Bool {return _storage._headerRowHorizontalStroke != nil}
  /// Clears the value of `headerRowHorizontalStroke`. Subsequent reads from it will return its default value.
  mutating func clearHeaderRowHorizontalStroke() {_uniqueStorage()._headerRowHorizontalStroke = nil}

  var headerRowVerticalStroke: TSD_StrokeArchive {
    get {return _storage._headerRowVerticalStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._headerRowVerticalStroke = newValue}
  }
  /// Returns true if `headerRowVerticalStroke` has been explicitly set.
  var hasHeaderRowVerticalStroke: Bool {return _storage._headerRowVerticalStroke != nil}
  /// Clears the value of `headerRowVerticalStroke`. Subsequent reads from it will return its default value.
  mutating func clearHeaderRowVerticalStroke() {_uniqueStorage()._headerRowVerticalStroke = nil}

  var headerColumnBorderStroke: TSD_StrokeArchive {
    get {return _storage._headerColumnBorderStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._headerColumnBorderStroke = newValue}
  }
  /// Returns true if `headerColumnBorderStroke` has been explicitly set.
  var hasHeaderColumnBorderStroke: Bool {return _storage._headerColumnBorderStroke != nil}
  /// Clears the value of `headerColumnBorderStroke`. Subsequent reads from it will return its default value.
  mutating func clearHeaderColumnBorderStroke() {_uniqueStorage()._headerColumnBorderStroke = nil}

  var headerColumnSeparatorStroke: TSD_StrokeArchive {
    get {return _storage._headerColumnSeparatorStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._headerColumnSeparatorStroke = newValue}
  }
  /// Returns true if `headerColumnSeparatorStroke` has been explicitly set.
  var hasHeaderColumnSeparatorStroke: Bool {return _storage._headerColumnSeparatorStroke != nil}
  /// Clears the value of `headerColumnSeparatorStroke`. Subsequent reads from it will return its default value.
  mutating func clearHeaderColumnSeparatorStroke() {_uniqueStorage()._headerColumnSeparatorStroke = nil}

  var headerColumnHorizontalStroke: TSD_StrokeArchive {
    get {return _storage._headerColumnHorizontalStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._headerColumnHorizontalStroke = newValue}
  }
  /// Returns true if `headerColumnHorizontalStroke` has been explicitly set.
  var hasHeaderColumnHorizontalStroke: Bool {return _storage._headerColumnHorizontalStroke != nil}
  /// Clears the value of `headerColumnHorizontalStroke`. Subsequent reads from it will return its default value.
  mutating func clearHeaderColumnHorizontalStroke() {_uniqueStorage()._headerColumnHorizontalStroke = nil}

  var headerColumnVerticalStroke: TSD_StrokeArchive {
    get {return _storage._headerColumnVerticalStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._headerColumnVerticalStroke = newValue}
  }
  /// Returns true if `headerColumnVerticalStroke` has been explicitly set.
  var hasHeaderColumnVerticalStroke: Bool {return _storage._headerColumnVerticalStroke != nil}
  /// Clears the value of `headerColumnVerticalStroke`. Subsequent reads from it will return its default value.
  mutating func clearHeaderColumnVerticalStroke() {_uniqueStorage()._headerColumnVerticalStroke = nil}

  var footerRowSeparatorStroke: TSD_StrokeArchive {
    get {return _storage._footerRowSeparatorStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._footerRowSeparatorStroke = newValue}
  }
  /// Returns true if `footerRowSeparatorStroke` has been explicitly set.
  var hasFooterRowSeparatorStroke: Bool {return _storage._footerRowSeparatorStroke != nil}
  /// Clears the value of `footerRowSeparatorStroke`. Subsequent reads from it will return its default value.
  mutating func clearFooterRowSeparatorStroke() {_uniqueStorage()._footerRowSeparatorStroke = nil}

  var footerRowBorderStroke: TSD_StrokeArchive {
    get {return _storage._footerRowBorderStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._footerRowBorderStroke = newValue}
  }
  /// Returns true if `footerRowBorderStroke` has been explicitly set.
  var hasFooterRowBorderStroke: Bool {return _storage._footerRowBorderStroke != nil}
  /// Clears the value of `footerRowBorderStroke`. Subsequent reads from it will return its default value.
  mutating func clearFooterRowBorderStroke() {_uniqueStorage()._footerRowBorderStroke = nil}

  var footerRowHorizontalStroke: TSD_StrokeArchive {
    get {return _storage._footerRowHorizontalStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._footerRowHorizontalStroke = newValue}
  }
  /// Returns true if `footerRowHorizontalStroke` has been explicitly set.
  var hasFooterRowHorizontalStroke: Bool {return _storage._footerRowHorizontalStroke != nil}
  /// Clears the value of `footerRowHorizontalStroke`. Subsequent reads from it will return its default value.
  mutating func clearFooterRowHorizontalStroke() {_uniqueStorage()._footerRowHorizontalStroke = nil}

  var footerRowVerticalStroke: TSD_StrokeArchive {
    get {return _storage._footerRowVerticalStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._footerRowVerticalStroke = newValue}
  }
  /// Returns true if `footerRowVerticalStroke` has been explicitly set.
  var hasFooterRowVerticalStroke: Bool {return _storage._footerRowVerticalStroke != nil}
  /// Clears the value of `footerRowVerticalStroke`. Subsequent reads from it will return its default value.
  mutating func clearFooterRowVerticalStroke() {_uniqueStorage()._footerRowVerticalStroke = nil}

  var tableBodyHorizontalBorderStroke: TSD_StrokeArchive {
    get {return _storage._tableBodyHorizontalBorderStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._tableBodyHorizontalBorderStroke = newValue}
  }
  /// Returns true if `tableBodyHorizontalBorderStroke` has been explicitly set.
  var hasTableBodyHorizontalBorderStroke: Bool {return _storage._tableBodyHorizontalBorderStroke != nil}
  /// Clears the value of `tableBodyHorizontalBorderStroke`. Subsequent reads from it will return its default value.
  mutating func clearTableBodyHorizontalBorderStroke() {_uniqueStorage()._tableBodyHorizontalBorderStroke = nil}

  var tableBodyVerticalBorderStroke: TSD_StrokeArchive {
    get {return _storage._tableBodyVerticalBorderStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._tableBodyVerticalBorderStroke = newValue}
  }
  /// Returns true if `tableBodyVerticalBorderStroke` has been explicitly set.
  var hasTableBodyVerticalBorderStroke: Bool {return _storage._tableBodyVerticalBorderStroke != nil}
  /// Clears the value of `tableBodyVerticalBorderStroke`. Subsequent reads from it will return its default value.
  mutating func clearTableBodyVerticalBorderStroke() {_uniqueStorage()._tableBodyVerticalBorderStroke = nil}

  var tableBodyHorizontalStroke: TSD_StrokeArchive {
    get {return _storage._tableBodyHorizontalStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._tableBodyHorizontalStroke = newValue}
  }
  /// Returns true if `tableBodyHorizontalStroke` has been explicitly set.
  var hasTableBodyHorizontalStroke: Bool {return _storage._tableBodyHorizontalStroke != nil}
  /// Clears the value of `tableBodyHorizontalStroke`. Subsequent reads from it will return its default value.
  mutating func clearTableBodyHorizontalStroke() {_uniqueStorage()._tableBodyHorizontalStroke = nil}

  var tableBodyVerticalStroke: TSD_StrokeArchive {
    get {return _storage._tableBodyVerticalStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._tableBodyVerticalStroke = newValue}
  }
  /// Returns true if `tableBodyVerticalStroke` has been explicitly set.
  var hasTableBodyVerticalStroke: Bool {return _storage._tableBodyVerticalStroke != nil}
  /// Clears the value of `tableBodyVerticalStroke`. Subsequent reads from it will return its default value.
  mutating func clearTableBodyVerticalStroke() {_uniqueStorage()._tableBodyVerticalStroke = nil}

  var categoryLevel1TopStroke: TSD_StrokeArchive {
    get {return _storage._categoryLevel1TopStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._categoryLevel1TopStroke = newValue}
  }
  /// Returns true if `categoryLevel1TopStroke` has been explicitly set.
  var hasCategoryLevel1TopStroke: Bool {return _storage._categoryLevel1TopStroke != nil}
  /// Clears the value of `categoryLevel1TopStroke`. Subsequent reads from it will return its default value.
  mutating func clearCategoryLevel1TopStroke() {_uniqueStorage()._categoryLevel1TopStroke = nil}

  var categoryLevel2TopStroke: TSD_StrokeArchive {
    get {return _storage._categoryLevel2TopStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._categoryLevel2TopStroke = newValue}
  }
  /// Returns true if `categoryLevel2TopStroke` has been explicitly set.
  var hasCategoryLevel2TopStroke: Bool {return _storage._categoryLevel2TopStroke != nil}
  /// Clears the value of `categoryLevel2TopStroke`. Subsequent reads from it will return its default value.
  mutating func clearCategoryLevel2TopStroke() {_uniqueStorage()._categoryLevel2TopStroke = nil}

  var categoryLevel3TopStroke: TSD_StrokeArchive {
    get {return _storage._categoryLevel3TopStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._categoryLevel3TopStroke = newValue}
  }
  /// Returns true if `categoryLevel3TopStroke` has been explicitly set.
  var hasCategoryLevel3TopStroke: Bool {return _storage._categoryLevel3TopStroke != nil}
  /// Clears the value of `categoryLevel3TopStroke`. Subsequent reads from it will return its default value.
  mutating func clearCategoryLevel3TopStroke() {_uniqueStorage()._categoryLevel3TopStroke = nil}

  var categoryLevel4TopStroke: TSD_StrokeArchive {
    get {return _storage._categoryLevel4TopStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._categoryLevel4TopStroke = newValue}
  }
  /// Returns true if `categoryLevel4TopStroke` has been explicitly set.
  var hasCategoryLevel4TopStroke: Bool {return _storage._categoryLevel4TopStroke != nil}
  /// Clears the value of `categoryLevel4TopStroke`. Subsequent reads from it will return its default value.
  mutating func clearCategoryLevel4TopStroke() {_uniqueStorage()._categoryLevel4TopStroke = nil}

  var categoryLevel5TopStroke: TSD_StrokeArchive {
    get {return _storage._categoryLevel5TopStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._categoryLevel5TopStroke = newValue}
  }
  /// Returns true if `categoryLevel5TopStroke` has been explicitly set.
  var hasCategoryLevel5TopStroke: Bool {return _storage._categoryLevel5TopStroke != nil}
  /// Clears the value of `categoryLevel5TopStroke`. Subsequent reads from it will return its default value.
  mutating func clearCategoryLevel5TopStroke() {_uniqueStorage()._categoryLevel5TopStroke = nil}

  var categoryLevel1BottomStroke: TSD_StrokeArchive {
    get {return _storage._categoryLevel1BottomStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._categoryLevel1BottomStroke = newValue}
  }
  /// Returns true if `categoryLevel1BottomStroke` has been explicitly set.
  var hasCategoryLevel1BottomStroke: Bool {return _storage._categoryLevel1BottomStroke != nil}
  /// Clears the value of `categoryLevel1BottomStroke`. Subsequent reads from it will return its default value.
  mutating func clearCategoryLevel1BottomStroke() {_uniqueStorage()._categoryLevel1BottomStroke = nil}

  var categoryLevel2BottomStroke: TSD_StrokeArchive {
    get {return _storage._categoryLevel2BottomStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._categoryLevel2BottomStroke = newValue}
  }
  /// Returns true if `categoryLevel2BottomStroke` has been explicitly set.
  var hasCategoryLevel2BottomStroke: Bool {return _storage._categoryLevel2BottomStroke != nil}
  /// Clears the value of `categoryLevel2BottomStroke`. Subsequent reads from it will return its default value.
  mutating func clearCategoryLevel2BottomStroke() {_uniqueStorage()._categoryLevel2BottomStroke = nil}

  var categoryLevel3BottomStroke: TSD_StrokeArchive {
    get {return _storage._categoryLevel3BottomStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._categoryLevel3BottomStroke = newValue}
  }
  /// Returns true if `categoryLevel3BottomStroke` has been explicitly set.
  var hasCategoryLevel3BottomStroke: Bool {return _storage._categoryLevel3BottomStroke != nil}
  /// Clears the value of `categoryLevel3BottomStroke`. Subsequent reads from it will return its default value.
  mutating func clearCategoryLevel3BottomStroke() {_uniqueStorage()._categoryLevel3BottomStroke = nil}

  var categoryLevel4BottomStroke: TSD_StrokeArchive {
    get {return _storage._categoryLevel4BottomStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._categoryLevel4BottomStroke = newValue}
  }
  /// Returns true if `categoryLevel4BottomStroke` has been explicitly set.
  var hasCategoryLevel4BottomStroke: Bool {return _storage._categoryLevel4BottomStroke != nil}
  /// Clears the value of `categoryLevel4BottomStroke`. Subsequent reads from it will return its default value.
  mutating func clearCategoryLevel4BottomStroke() {_uniqueStorage()._categoryLevel4BottomStroke = nil}

  var categoryLevel5BottomStroke: TSD_StrokeArchive {
    get {return _storage._categoryLevel5BottomStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._categoryLevel5BottomStroke = newValue}
  }
  /// Returns true if `categoryLevel5BottomStroke` has been explicitly set.
  var hasCategoryLevel5BottomStroke: Bool {return _storage._categoryLevel5BottomStroke != nil}
  /// Clears the value of `categoryLevel5BottomStroke`. Subsequent reads from it will return its default value.
  mutating func clearCategoryLevel5BottomStroke() {_uniqueStorage()._categoryLevel5BottomStroke = nil}

  var categoryLevel1InteriorStroke: TSD_StrokeArchive {
    get {return _storage._categoryLevel1InteriorStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._categoryLevel1InteriorStroke = newValue}
  }
  /// Returns true if `categoryLevel1InteriorStroke` has been explicitly set.
  var hasCategoryLevel1InteriorStroke: Bool {return _storage._categoryLevel1InteriorStroke != nil}
  /// Clears the value of `categoryLevel1InteriorStroke`. Subsequent reads from it will return its default value.
  mutating func clearCategoryLevel1InteriorStroke() {_uniqueStorage()._categoryLevel1InteriorStroke = nil}

  var categoryLevel2InteriorStroke: TSD_StrokeArchive {
    get {return _storage._categoryLevel2InteriorStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._categoryLevel2InteriorStroke = newValue}
  }
  /// Returns true if `categoryLevel2InteriorStroke` has been explicitly set.
  var hasCategoryLevel2InteriorStroke: Bool {return _storage._categoryLevel2InteriorStroke != nil}
  /// Clears the value of `categoryLevel2InteriorStroke`. Subsequent reads from it will return its default value.
  mutating func clearCategoryLevel2InteriorStroke() {_uniqueStorage()._categoryLevel2InteriorStroke = nil}

  var categoryLevel3InteriorStroke: TSD_StrokeArchive {
    get {return _storage._categoryLevel3InteriorStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._categoryLevel3InteriorStroke = newValue}
  }
  /// Returns true if `categoryLevel3InteriorStroke` has been explicitly set.
  var hasCategoryLevel3InteriorStroke: Bool {return _storage._categoryLevel3InteriorStroke != nil}
  /// Clears the value of `categoryLevel3InteriorStroke`. Subsequent reads from it will return its default value.
  mutating func clearCategoryLevel3InteriorStroke() {_uniqueStorage()._categoryLevel3InteriorStroke = nil}

  var categoryLevel4InteriorStroke: TSD_StrokeArchive {
    get {return _storage._categoryLevel4InteriorStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._categoryLevel4InteriorStroke = newValue}
  }
  /// Returns true if `categoryLevel4InteriorStroke` has been explicitly set.
  var hasCategoryLevel4InteriorStroke: Bool {return _storage._categoryLevel4InteriorStroke != nil}
  /// Clears the value of `categoryLevel4InteriorStroke`. Subsequent reads from it will return its default value.
  mutating func clearCategoryLevel4InteriorStroke() {_uniqueStorage()._categoryLevel4InteriorStroke = nil}

  var categoryLevel5InteriorStroke: TSD_StrokeArchive {
    get {return _storage._categoryLevel5InteriorStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._categoryLevel5InteriorStroke = newValue}
  }
  /// Returns true if `categoryLevel5InteriorStroke` has been explicitly set.
  var hasCategoryLevel5InteriorStroke: Bool {return _storage._categoryLevel5InteriorStroke != nil}
  /// Clears the value of `categoryLevel5InteriorStroke`. Subsequent reads from it will return its default value.
  mutating func clearCategoryLevel5InteriorStroke() {_uniqueStorage()._categoryLevel5InteriorStroke = nil}

  var categoryLevel1LabelSeparatorStroke: TSD_StrokeArchive {
    get {return _storage._categoryLevel1LabelSeparatorStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._categoryLevel1LabelSeparatorStroke = newValue}
  }
  /// Returns true if `categoryLevel1LabelSeparatorStroke` has been explicitly set.
  var hasCategoryLevel1LabelSeparatorStroke: Bool {return _storage._categoryLevel1LabelSeparatorStroke != nil}
  /// Clears the value of `categoryLevel1LabelSeparatorStroke`. Subsequent reads from it will return its default value.
  mutating func clearCategoryLevel1LabelSeparatorStroke() {_uniqueStorage()._categoryLevel1LabelSeparatorStroke = nil}

  var categoryLevel2LabelSeparatorStroke: TSD_StrokeArchive {
    get {return _storage._categoryLevel2LabelSeparatorStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._categoryLevel2LabelSeparatorStroke = newValue}
  }
  /// Returns true if `categoryLevel2LabelSeparatorStroke` has been explicitly set.
  var hasCategoryLevel2LabelSeparatorStroke: Bool {return _storage._categoryLevel2LabelSeparatorStroke != nil}
  /// Clears the value of `categoryLevel2LabelSeparatorStroke`. Subsequent reads from it will return its default value.
  mutating func clearCategoryLevel2LabelSeparatorStroke() {_uniqueStorage()._categoryLevel2LabelSeparatorStroke = nil}

  var categoryLevel3LabelSeparatorStroke: TSD_StrokeArchive {
    get {return _storage._categoryLevel3LabelSeparatorStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._categoryLevel3LabelSeparatorStroke = newValue}
  }
  /// Returns true if `categoryLevel3LabelSeparatorStroke` has been explicitly set.
  var hasCategoryLevel3LabelSeparatorStroke: Bool {return _storage._categoryLevel3LabelSeparatorStroke != nil}
  /// Clears the value of `categoryLevel3LabelSeparatorStroke`. Subsequent reads from it will return its default value.
  mutating func clearCategoryLevel3LabelSeparatorStroke() {_uniqueStorage()._categoryLevel3LabelSeparatorStroke = nil}

  var categoryLevel4LabelSeparatorStroke: TSD_StrokeArchive {
    get {return _storage._categoryLevel4LabelSeparatorStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._categoryLevel4LabelSeparatorStroke = newValue}
  }
  /// Returns true if `categoryLevel4LabelSeparatorStroke` has been explicitly set.
  var hasCategoryLevel4LabelSeparatorStroke: Bool {return _storage._categoryLevel4LabelSeparatorStroke != nil}
  /// Clears the value of `categoryLevel4LabelSeparatorStroke`. Subsequent reads from it will return its default value.
  mutating func clearCategoryLevel4LabelSeparatorStroke() {_uniqueStorage()._categoryLevel4LabelSeparatorStroke = nil}

  var categoryLevel5LabelSeparatorStroke: TSD_StrokeArchive {
    get {return _storage._categoryLevel5LabelSeparatorStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._categoryLevel5LabelSeparatorStroke = newValue}
  }
  /// Returns true if `categoryLevel5LabelSeparatorStroke` has been explicitly set.
  var hasCategoryLevel5LabelSeparatorStroke: Bool {return _storage._categoryLevel5LabelSeparatorStroke != nil}
  /// Clears the value of `categoryLevel5LabelSeparatorStroke`. Subsequent reads from it will return its default value.
  mutating func clearCategoryLevel5LabelSeparatorStroke() {_uniqueStorage()._categoryLevel5LabelSeparatorStroke = nil}

  var tableBodyPivotGroupHorizontalStroke: TSD_StrokeArchive {
    get {return _storage._tableBodyPivotGroupHorizontalStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._tableBodyPivotGroupHorizontalStroke = newValue}
  }
  /// Returns true if `tableBodyPivotGroupHorizontalStroke` has been explicitly set.
  var hasTableBodyPivotGroupHorizontalStroke: Bool {return _storage._tableBodyPivotGroupHorizontalStroke != nil}
  /// Clears the value of `tableBodyPivotGroupHorizontalStroke`. Subsequent reads from it will return its default value.
  mutating func clearTableBodyPivotGroupHorizontalStroke() {_uniqueStorage()._tableBodyPivotGroupHorizontalStroke = nil}

  var tableBodyPivotGroupVerticalStroke: TSD_StrokeArchive {
    get {return _storage._tableBodyPivotGroupVerticalStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._tableBodyPivotGroupVerticalStroke = newValue}
  }
  /// Returns true if `tableBodyPivotGroupVerticalStroke` has been explicitly set.
  var hasTableBodyPivotGroupVerticalStroke: Bool {return _storage._tableBodyPivotGroupVerticalStroke != nil}
  /// Clears the value of `tableBodyPivotGroupVerticalStroke`. Subsequent reads from it will return its default value.
  mutating func clearTableBodyPivotGroupVerticalStroke() {_uniqueStorage()._tableBodyPivotGroupVerticalStroke = nil}

  var tableBodyPivotDeemphasisHorizontalStroke: TSD_StrokeArchive {
    get {return _storage._tableBodyPivotDeemphasisHorizontalStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._tableBodyPivotDeemphasisHorizontalStroke = newValue}
  }
  /// Returns true if `tableBodyPivotDeemphasisHorizontalStroke` has been explicitly set.
  var hasTableBodyPivotDeemphasisHorizontalStroke: Bool {return _storage._tableBodyPivotDeemphasisHorizontalStroke != nil}
  /// Clears the value of `tableBodyPivotDeemphasisHorizontalStroke`. Subsequent reads from it will return its default value.
  mutating func clearTableBodyPivotDeemphasisHorizontalStroke() {_uniqueStorage()._tableBodyPivotDeemphasisHorizontalStroke = nil}

  var tableBodyPivotEmphasisVerticalStroke: TSD_StrokeArchive {
    get {return _storage._tableBodyPivotEmphasisVerticalStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._tableBodyPivotEmphasisVerticalStroke = newValue}
  }
  /// Returns true if `tableBodyPivotEmphasisVerticalStroke` has been explicitly set.
  var hasTableBodyPivotEmphasisVerticalStroke: Bool {return _storage._tableBodyPivotEmphasisVerticalStroke != nil}
  /// Clears the value of `tableBodyPivotEmphasisVerticalStroke`. Subsequent reads from it will return its default value.
  mutating func clearTableBodyPivotEmphasisVerticalStroke() {_uniqueStorage()._tableBodyPivotEmphasisVerticalStroke = nil}

  var headerColumnPivotGroupHorizontalStroke: TSD_StrokeArchive {
    get {return _storage._headerColumnPivotGroupHorizontalStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._headerColumnPivotGroupHorizontalStroke = newValue}
  }
  /// Returns true if `headerColumnPivotGroupHorizontalStroke` has been explicitly set.
  var hasHeaderColumnPivotGroupHorizontalStroke: Bool {return _storage._headerColumnPivotGroupHorizontalStroke != nil}
  /// Clears the value of `headerColumnPivotGroupHorizontalStroke`. Subsequent reads from it will return its default value.
  mutating func clearHeaderColumnPivotGroupHorizontalStroke() {_uniqueStorage()._headerColumnPivotGroupHorizontalStroke = nil}

  var headerColumnPivotGroupDeemphasisStroke: TSD_StrokeArchive {
    get {return _storage._headerColumnPivotGroupDeemphasisStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._headerColumnPivotGroupDeemphasisStroke = newValue}
  }
  /// Returns true if `headerColumnPivotGroupDeemphasisStroke` has been explicitly set.
  var hasHeaderColumnPivotGroupDeemphasisStroke: Bool {return _storage._headerColumnPivotGroupDeemphasisStroke != nil}
  /// Clears the value of `headerColumnPivotGroupDeemphasisStroke`. Subsequent reads from it will return its default value.
  mutating func clearHeaderColumnPivotGroupDeemphasisStroke() {_uniqueStorage()._headerColumnPivotGroupDeemphasisStroke = nil}

  var headerColumnPivotSeparatorStroke: TSD_StrokeArchive {
    get {return _storage._headerColumnPivotSeparatorStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._headerColumnPivotSeparatorStroke = newValue}
  }
  /// Returns true if `headerColumnPivotSeparatorStroke` has been explicitly set.
  var hasHeaderColumnPivotSeparatorStroke: Bool {return _storage._headerColumnPivotSeparatorStroke != nil}
  /// Clears the value of `headerColumnPivotSeparatorStroke`. Subsequent reads from it will return its default value.
  mutating func clearHeaderColumnPivotSeparatorStroke() {_uniqueStorage()._headerColumnPivotSeparatorStroke = nil}

  var headerRowPivotGroupVerticalStroke: TSD_StrokeArchive {
    get {return _storage._headerRowPivotGroupVerticalStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._headerRowPivotGroupVerticalStroke = newValue}
  }
  /// Returns true if `headerRowPivotGroupVerticalStroke` has been explicitly set.
  var hasHeaderRowPivotGroupVerticalStroke: Bool {return _storage._headerRowPivotGroupVerticalStroke != nil}
  /// Clears the value of `headerRowPivotGroupVerticalStroke`. Subsequent reads from it will return its default value.
  mutating func clearHeaderRowPivotGroupVerticalStroke() {_uniqueStorage()._headerRowPivotGroupVerticalStroke = nil}

  var headerRowPivotGroupDeemphasisStroke: TSD_StrokeArchive {
    get {return _storage._headerRowPivotGroupDeemphasisStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._headerRowPivotGroupDeemphasisStroke = newValue}
  }
  /// Returns true if `headerRowPivotGroupDeemphasisStroke` has been explicitly set.
  var hasHeaderRowPivotGroupDeemphasisStroke: Bool {return _storage._headerRowPivotGroupDeemphasisStroke != nil}
  /// Clears the value of `headerRowPivotGroupDeemphasisStroke`. Subsequent reads from it will return its default value.
  mutating func clearHeaderRowPivotGroupDeemphasisStroke() {_uniqueStorage()._headerRowPivotGroupDeemphasisStroke = nil}

  var headerRowPivotTitleStroke: TSD_StrokeArchive {
    get {return _storage._headerRowPivotTitleStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._headerRowPivotTitleStroke = newValue}
  }
  /// Returns true if `headerRowPivotTitleStroke` has been explicitly set.
  var hasHeaderRowPivotTitleStroke: Bool {return _storage._headerRowPivotTitleStroke != nil}
  /// Clears the value of `headerRowPivotTitleStroke`. Subsequent reads from it will return its default value.
  mutating func clearHeaderRowPivotTitleStroke() {_uniqueStorage()._headerRowPivotTitleStroke = nil}

  var footerRowPivotGroupVerticalStroke: TSD_StrokeArchive {
    get {return _storage._footerRowPivotGroupVerticalStroke ?? TSD_StrokeArchive()}
    set {_uniqueStorage()._footerRowPivotGroupVerticalStroke = newValue}
  }
  /// Returns true if `footerRowPivotGroupVerticalStroke` has been explicitly set.
  var hasFooterRowPivotGroupVerticalStroke: Bool {return _storage._footerRowPivotGroupVerticalStroke != nil}
  /// Clears the value of `footerRowPivotGroupVerticalStroke`. Subsequent reads from it will return its default value.
  mutating func clearFooterRowPivotGroupVerticalStroke() {_uniqueStorage()._footerRowPivotGroupVerticalStroke = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct TST_TableStylePresetArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var index: Int32 {
    get {return _index ?? 0}
    set {_index = newValue}
  }
  /// Returns true if `index` has been explicitly set.
  var hasIndex: Bool {return self._index != nil}
  /// Clears the value of `index`. Subsequent reads from it will return its default value.
  mutating func clearIndex() {self._index = nil}

  var image: TSP_Reference {
    get {return _image ?? TSP_Reference()}
    set {_image = newValue}
  }
  /// Returns true if `image` has been explicitly set.
  var hasImage: Bool {return self._image != nil}
  /// Clears the value of `image`. Subsequent reads from it will return its default value.
  mutating func clearImage() {self._image = nil}

  var styleNetwork: TSP_Reference {
    get {return _styleNetwork ?? TSP_Reference()}
    set {_styleNetwork = newValue}
  }
  /// Returns true if `styleNetwork` has been explicitly set.
  var hasStyleNetwork: Bool {return self._styleNetwork != nil}
  /// Clears the value of `styleNetwork`. Subsequent reads from it will return its default value.
  mutating func clearStyleNetwork() {self._styleNetwork = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _index: Int32? = nil
  fileprivate var _image: TSP_Reference? = nil
  fileprivate var _styleNetwork: TSP_Reference? = nil
}

struct TST_TableStrokePresetArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var index: Int32 {
    get {return _index ?? 0}
    set {_index = newValue}
  }
  /// Returns true if `index` has been explicitly set.
  var hasIndex: Bool {return self._index != nil}
  /// Clears the value of `index`. Subsequent reads from it will return its default value.
  mutating func clearIndex() {self._index = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _index: Int32? = nil
}

struct TST_ThemePresetsArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var tableStylePresets: [TSP_Reference] = []

  var tableCellStrokePresets: [TSP_Reference] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Extension support defined in TSTStylePropertyArchiving.proto.

// MARK: - Extension Properties

// Swift Extensions on the extended Messages to add easy access to the declared
// extension fields. The names are based on the extension field name from the proto
// declaration. To avoid naming collisions, the names are prefixed with the name of
// the scope where the extend directive occurs.

extension TSS_ThemeArchive {

  var TST_ThemePresetsArchive_extension: TST_ThemePresetsArchive {
    get {return getExtensionValue(ext: TST_ThemePresetsArchive.Extensions.extension) ?? TST_ThemePresetsArchive()}
    set {setExtensionValue(ext: TST_ThemePresetsArchive.Extensions.extension, value: newValue)}
  }
  /// Returns true if extension `TST_ThemePresetsArchive.Extensions.extension`
  /// has been explicitly set.
  var hasTST_ThemePresetsArchive_extension: Bool {
    return hasExtensionValue(ext: TST_ThemePresetsArchive.Extensions.extension)
  }
  /// Clears the value of extension `TST_ThemePresetsArchive.Extensions.extension`.
  /// Subsequent reads from it will return its default value.
  mutating func clearTST_ThemePresetsArchive_extension() {
    clearExtensionValue(ext: TST_ThemePresetsArchive.Extensions.extension)
  }

}

// MARK: - File's ExtensionMap: TST_TststylePropertyArchiving_Extensions

/// A `SwiftProtobuf.SimpleExtensionMap` that includes all of the extensions defined by
/// this .proto file. It can be used any place an `SwiftProtobuf.ExtensionMap` is needed
/// in parsing, or it can be combined with other `SwiftProtobuf.SimpleExtensionMap`s to create
/// a larger `SwiftProtobuf.SimpleExtensionMap`.
let TST_TststylePropertyArchiving_Extensions: SwiftProtobuf.SimpleExtensionMap = [
  TST_ThemePresetsArchive.Extensions.extension
]

// Extension Objects - The only reason these might be needed is when manually
// constructing a `SimpleExtensionMap`, otherwise, use the above _Extension Properties_
// accessors for the extension fields on the messages directly.

extension TST_ThemePresetsArchive {
  enum Extensions {
    static let `extension` = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<TST_ThemePresetsArchive>, TSS_ThemeArchive>(
      _protobuf_fieldNumber: 200,
      fieldName: "TST.ThemePresetsArchive.extension"
    )
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TST"

extension TST_Deprecated_TableStrokeArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Deprecated_TableStrokeArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}stroke\0\u{1}background\0\u{1}opacity\0\u{1}empty\0")

  public var isInitialized: Bool {
    if let v = self._stroke, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._stroke) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._background) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self._opacity) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self._empty) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._stroke {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._background {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._opacity {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._empty {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_Deprecated_TableStrokeArchive, rhs: TST_Deprecated_TableStrokeArchive) -> Bool {
    if lhs._stroke != rhs._stroke {return false}
    if lhs._background != rhs._background {return false}
    if lhs._opacity != rhs._opacity {return false}
    if lhs._empty != rhs._empty {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_CellStylePropertiesArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CellStylePropertiesArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}cell_fill\0\u{4}\u{2}text_wrap\0\u{3}deprecated_top_stroke\0\u{3}deprecated_right_stroke\0\u{3}deprecated_bottom_stroke\0\u{3}deprecated_left_stroke\0\u{3}vertical_alignment\0\u{1}padding\0\u{3}top_stroke\0\u{3}right_stroke\0\u{3}bottom_stroke\0\u{3}left_stroke\0")

  fileprivate class _StorageClass {
    var _cellFill: TSD_FillArchive? = nil
    var _textWrap: Bool? = nil
    var _deprecatedTopStroke: TST_Deprecated_TableStrokeArchive? = nil
    var _deprecatedRightStroke: TST_Deprecated_TableStrokeArchive? = nil
    var _deprecatedBottomStroke: TST_Deprecated_TableStrokeArchive? = nil
    var _deprecatedLeftStroke: TST_Deprecated_TableStrokeArchive? = nil
    var _verticalAlignment: Int32? = nil
    var _padding: TSWP_PaddingArchive? = nil
    var _topStroke: TSD_StrokeArchive? = nil
    var _rightStroke: TSD_StrokeArchive? = nil
    var _bottomStroke: TSD_StrokeArchive? = nil
    var _leftStroke: TSD_StrokeArchive? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _cellFill = source._cellFill
      _textWrap = source._textWrap
      _deprecatedTopStroke = source._deprecatedTopStroke
      _deprecatedRightStroke = source._deprecatedRightStroke
      _deprecatedBottomStroke = source._deprecatedBottomStroke
      _deprecatedLeftStroke = source._deprecatedLeftStroke
      _verticalAlignment = source._verticalAlignment
      _padding = source._padding
      _topStroke = source._topStroke
      _rightStroke = source._rightStroke
      _bottomStroke = source._bottomStroke
      _leftStroke = source._leftStroke
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._cellFill, !v.isInitialized {return false}
      if let v = _storage._deprecatedTopStroke, !v.isInitialized {return false}
      if let v = _storage._deprecatedRightStroke, !v.isInitialized {return false}
      if let v = _storage._deprecatedBottomStroke, !v.isInitialized {return false}
      if let v = _storage._deprecatedLeftStroke, !v.isInitialized {return false}
      if let v = _storage._topStroke, !v.isInitialized {return false}
      if let v = _storage._rightStroke, !v.isInitialized {return false}
      if let v = _storage._bottomStroke, !v.isInitialized {return false}
      if let v = _storage._leftStroke, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._cellFill) }()
        case 3: try { try decoder.decodeSingularBoolField(value: &_storage._textWrap) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._deprecatedTopStroke) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._deprecatedRightStroke) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._deprecatedBottomStroke) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._deprecatedLeftStroke) }()
        case 8: try { try decoder.decodeSingularInt32Field(value: &_storage._verticalAlignment) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._padding) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._topStroke) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._rightStroke) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._bottomStroke) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._leftStroke) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._cellFill {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._textWrap {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._deprecatedTopStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._deprecatedRightStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._deprecatedBottomStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._deprecatedLeftStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._verticalAlignment {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._padding {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._topStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._rightStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._bottomStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._leftStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_CellStylePropertiesArchive, rhs: TST_CellStylePropertiesArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._cellFill != rhs_storage._cellFill {return false}
        if _storage._textWrap != rhs_storage._textWrap {return false}
        if _storage._deprecatedTopStroke != rhs_storage._deprecatedTopStroke {return false}
        if _storage._deprecatedRightStroke != rhs_storage._deprecatedRightStroke {return false}
        if _storage._deprecatedBottomStroke != rhs_storage._deprecatedBottomStroke {return false}
        if _storage._deprecatedLeftStroke != rhs_storage._deprecatedLeftStroke {return false}
        if _storage._verticalAlignment != rhs_storage._verticalAlignment {return false}
        if _storage._padding != rhs_storage._padding {return false}
        if _storage._topStroke != rhs_storage._topStroke {return false}
        if _storage._rightStroke != rhs_storage._rightStroke {return false}
        if _storage._bottomStroke != rhs_storage._bottomStroke {return false}
        if _storage._leftStroke != rhs_storage._leftStroke {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_Deprecated_StrokePresetDataArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Deprecated_StrokePresetDataArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}deprecated_vertical_stroke\0\u{3}deprecated_horizontal_stroke\0\u{3}deprecated_exterior_stroke\0\u{4}\u{2}deprecated_visible_mask\0")

  public var isInitialized: Bool {
    if self._deprecatedHorizontalStroke == nil {return false}
    if self._deprecatedVerticalStroke == nil {return false}
    if self._deprecatedExteriorStroke == nil {return false}
    if self._deprecatedVisibleMask == nil {return false}
    if let v = self._deprecatedHorizontalStroke, !v.isInitialized {return false}
    if let v = self._deprecatedVerticalStroke, !v.isInitialized {return false}
    if let v = self._deprecatedExteriorStroke, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._deprecatedVerticalStroke) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._deprecatedHorizontalStroke) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._deprecatedExteriorStroke) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self._deprecatedVisibleMask) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._deprecatedVerticalStroke {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._deprecatedHorizontalStroke {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._deprecatedExteriorStroke {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._deprecatedVisibleMask {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_Deprecated_StrokePresetDataArchive, rhs: TST_Deprecated_StrokePresetDataArchive) -> Bool {
    if lhs._deprecatedHorizontalStroke != rhs._deprecatedHorizontalStroke {return false}
    if lhs._deprecatedVerticalStroke != rhs._deprecatedVerticalStroke {return false}
    if lhs._deprecatedExteriorStroke != rhs._deprecatedExteriorStroke {return false}
    if lhs._deprecatedVisibleMask != rhs._deprecatedVisibleMask {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_StrokePresetDataArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StrokePresetDataArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}horizontal_stroke\0\u{3}vertical_stroke\0\u{3}exterior_stroke\0\u{3}visible_mask\0")

  public var isInitialized: Bool {
    if let v = self._horizontalStroke, !v.isInitialized {return false}
    if let v = self._verticalStroke, !v.isInitialized {return false}
    if let v = self._exteriorStroke, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._horizontalStroke) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._verticalStroke) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._exteriorStroke) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self._visibleMask) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._horizontalStroke {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._verticalStroke {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._exteriorStroke {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._visibleMask {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_StrokePresetDataArchive, rhs: TST_StrokePresetDataArchive) -> Bool {
    if lhs._horizontalStroke != rhs._horizontalStroke {return false}
    if lhs._verticalStroke != rhs._verticalStroke {return false}
    if lhs._exteriorStroke != rhs._exteriorStroke {return false}
    if lhs._visibleMask != rhs._visibleMask {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_StrokePresetListArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StrokePresetListArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}count\0\u{3}deprecated_preset\0\u{1}preset\0")

  public var isInitialized: Bool {
    if self._count == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.deprecatedPreset) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.preset) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._count) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.deprecatedPreset) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.preset) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._count {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    if !self.deprecatedPreset.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.deprecatedPreset, fieldNumber: 2)
    }
    if !self.preset.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.preset, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_StrokePresetListArchive, rhs: TST_StrokePresetListArchive) -> Bool {
    if lhs._count != rhs._count {return false}
    if lhs.deprecatedPreset != rhs.deprecatedPreset {return false}
    if lhs.preset != rhs.preset {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_TableStylePropertiesArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TableStylePropertiesArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}banded_rows\0\u{3}banded_fill\0\u{4}\u{2}deprecated_header_row_separator_stroke\0\u{3}deprecated_header_row_border_stroke\0\u{4}\u{2}deprecated_header_column_border_stroke\0\u{3}deprecated_header_column_separator_stroke\0\u{4}\u{2}deprecated_footer_row_separator_stroke\0\u{3}deprecated_footer_row_border_stroke\0\u{3}deprecated_table_body_horizontal_border_stroke\0\u{4}\u{9}behaves_like_spreadsheet\0\u{3}auto_resize\0\u{3}deprecated_header_row_horizontal_stroke\0\u{3}deprecated_header_row_vertical_stroke\0\u{3}deprecated_header_column_horizontal_stroke\0\u{3}deprecated_header_column_vertical_stroke\0\u{3}deprecated_footer_row_horizontal_stroke\0\u{3}deprecated_footer_row_vertical_stroke\0\u{3}deprecated_table_body_vertical_border_stroke\0\u{3}deprecated_table_body_horizontal_stroke\0\u{3}deprecated_table_body_vertical_stroke\0\u{3}stroke_preset_list\0\u{3}v_strokes_visible\0\u{3}h_strokes_visible\0\u{3}hr_separator_visible\0\u{3}hc_separator_visible\0\u{3}footer_separator_visible\0\u{3}table_border_visible\0\u{3}table_header_border_visible\0\u{3}OBSOLETE_master_font_size\0\u{3}master_font_family\0\u{3}table_hc_divider_visible\0\u{3}table_hr_divider_visible\0\u{3}table_footer_divider_visible\0\u{3}writing_direction\0\u{3}header_row_separator_stroke\0\u{3}header_row_border_stroke\0\u{3}header_row_horizontal_stroke\0\u{3}header_row_vertical_stroke\0\u{3}header_column_border_stroke\0\u{3}header_column_separator_stroke\0\u{3}header_column_horizontal_stroke\0\u{3}header_column_vertical_stroke\0\u{3}footer_row_separator_stroke\0\u{3}footer_row_border_stroke\0\u{3}footer_row_horizontal_stroke\0\u{3}footer_row_vertical_stroke\0\u{3}table_body_horizontal_border_stroke\0\u{3}table_body_vertical_border_stroke\0\u{3}table_body_horizontal_stroke\0\u{3}table_body_vertical_stroke\0\u{3}category_level1_top_stroke\0\u{3}category_level2_top_stroke\0\u{3}category_level3_top_stroke\0\u{3}category_level4_top_stroke\0\u{3}category_level5_top_stroke\0\u{3}category_level1_bottom_stroke\0\u{3}category_level2_bottom_stroke\0\u{3}category_level3_bottom_stroke\0\u{3}category_level4_bottom_stroke\0\u{3}category_level5_bottom_stroke\0\u{3}category_level1_interior_stroke\0\u{3}category_level2_interior_stroke\0\u{3}category_level3_interior_stroke\0\u{3}category_level4_interior_stroke\0\u{3}category_level5_interior_stroke\0\u{3}category_level1_label_separator_stroke\0\u{3}category_level2_label_separator_stroke\0\u{3}category_level3_label_separator_stroke\0\u{3}category_level4_label_separator_stroke\0\u{3}category_level5_label_separator_stroke\0\u{3}table_body_pivot_group_horizontal_stroke\0\u{3}table_body_pivot_group_vertical_stroke\0\u{3}table_body_pivot_deemphasis_horizontal_stroke\0\u{3}table_body_pivot_emphasis_vertical_stroke\0\u{3}header_column_pivot_group_horizontal_stroke\0\u{3}header_column_pivot_group_deemphasis_stroke\0\u{3}header_column_pivot_separator_stroke\0\u{3}header_row_pivot_group_vertical_stroke\0\u{3}header_row_pivot_group_deemphasis_stroke\0\u{3}header_row_pivot_title_stroke\0\u{3}footer_row_pivot_group_vertical_stroke\0")

  fileprivate class _StorageClass {
    var _bandedRows: Bool? = nil
    var _bandedFill: TSD_FillArchive? = nil
    var _behavesLikeSpreadsheet: Bool? = nil
    var _autoResize: Bool? = nil
    var _deprecatedHeaderRowSeparatorStroke: TST_Deprecated_TableStrokeArchive? = nil
    var _deprecatedHeaderRowBorderStroke: TST_Deprecated_TableStrokeArchive? = nil
    var _deprecatedHeaderRowHorizontalStroke: TST_Deprecated_TableStrokeArchive? = nil
    var _deprecatedHeaderRowVerticalStroke: TST_Deprecated_TableStrokeArchive? = nil
    var _deprecatedHeaderColumnBorderStroke: TST_Deprecated_TableStrokeArchive? = nil
    var _deprecatedHeaderColumnSeparatorStroke: TST_Deprecated_TableStrokeArchive? = nil
    var _deprecatedHeaderColumnHorizontalStroke: TST_Deprecated_TableStrokeArchive? = nil
    var _deprecatedHeaderColumnVerticalStroke: TST_Deprecated_TableStrokeArchive? = nil
    var _deprecatedFooterRowSeparatorStroke: TST_Deprecated_TableStrokeArchive? = nil
    var _deprecatedFooterRowBorderStroke: TST_Deprecated_TableStrokeArchive? = nil
    var _deprecatedFooterRowHorizontalStroke: TST_Deprecated_TableStrokeArchive? = nil
    var _deprecatedFooterRowVerticalStroke: TST_Deprecated_TableStrokeArchive? = nil
    var _deprecatedTableBodyHorizontalBorderStroke: TST_Deprecated_TableStrokeArchive? = nil
    var _deprecatedTableBodyVerticalBorderStroke: TST_Deprecated_TableStrokeArchive? = nil
    var _deprecatedTableBodyHorizontalStroke: TST_Deprecated_TableStrokeArchive? = nil
    var _deprecatedTableBodyVerticalStroke: TST_Deprecated_TableStrokeArchive? = nil
    var _strokePresetList: TST_StrokePresetListArchive? = nil
    var _vStrokesVisible: Bool? = nil
    var _hStrokesVisible: Bool? = nil
    var _hrSeparatorVisible: Bool? = nil
    var _hcSeparatorVisible: Bool? = nil
    var _footerSeparatorVisible: Bool? = nil
    var _tableBorderVisible: Bool? = nil
    var _tableHeaderBorderVisible: Bool? = nil
    var _tableHcDividerVisible: Bool? = nil
    var _tableHrDividerVisible: Bool? = nil
    var _tableFooterDividerVisible: Bool? = nil
    var _obsoleteMasterFontSize: Int32? = nil
    var _masterFontFamily: String? = nil
    var _writingDirection: TSWP_WritingDirectionType? = nil
    var _headerRowSeparatorStroke: TSD_StrokeArchive? = nil
    var _headerRowBorderStroke: TSD_StrokeArchive? = nil
    var _headerRowHorizontalStroke: TSD_StrokeArchive? = nil
    var _headerRowVerticalStroke: TSD_StrokeArchive? = nil
    var _headerColumnBorderStroke: TSD_StrokeArchive? = nil
    var _headerColumnSeparatorStroke: TSD_StrokeArchive? = nil
    var _headerColumnHorizontalStroke: TSD_StrokeArchive? = nil
    var _headerColumnVerticalStroke: TSD_StrokeArchive? = nil
    var _footerRowSeparatorStroke: TSD_StrokeArchive? = nil
    var _footerRowBorderStroke: TSD_StrokeArchive? = nil
    var _footerRowHorizontalStroke: TSD_StrokeArchive? = nil
    var _footerRowVerticalStroke: TSD_StrokeArchive? = nil
    var _tableBodyHorizontalBorderStroke: TSD_StrokeArchive? = nil
    var _tableBodyVerticalBorderStroke: TSD_StrokeArchive? = nil
    var _tableBodyHorizontalStroke: TSD_StrokeArchive? = nil
    var _tableBodyVerticalStroke: TSD_StrokeArchive? = nil
    var _categoryLevel1TopStroke: TSD_StrokeArchive? = nil
    var _categoryLevel2TopStroke: TSD_StrokeArchive? = nil
    var _categoryLevel3TopStroke: TSD_StrokeArchive? = nil
    var _categoryLevel4TopStroke: TSD_StrokeArchive? = nil
    var _categoryLevel5TopStroke: TSD_StrokeArchive? = nil
    var _categoryLevel1BottomStroke: TSD_StrokeArchive? = nil
    var _categoryLevel2BottomStroke: TSD_StrokeArchive? = nil
    var _categoryLevel3BottomStroke: TSD_StrokeArchive? = nil
    var _categoryLevel4BottomStroke: TSD_StrokeArchive? = nil
    var _categoryLevel5BottomStroke: TSD_StrokeArchive? = nil
    var _categoryLevel1InteriorStroke: TSD_StrokeArchive? = nil
    var _categoryLevel2InteriorStroke: TSD_StrokeArchive? = nil
    var _categoryLevel3InteriorStroke: TSD_StrokeArchive? = nil
    var _categoryLevel4InteriorStroke: TSD_StrokeArchive? = nil
    var _categoryLevel5InteriorStroke: TSD_StrokeArchive? = nil
    var _categoryLevel1LabelSeparatorStroke: TSD_StrokeArchive? = nil
    var _categoryLevel2LabelSeparatorStroke: TSD_StrokeArchive? = nil
    var _categoryLevel3LabelSeparatorStroke: TSD_StrokeArchive? = nil
    var _categoryLevel4LabelSeparatorStroke: TSD_StrokeArchive? = nil
    var _categoryLevel5LabelSeparatorStroke: TSD_StrokeArchive? = nil
    var _tableBodyPivotGroupHorizontalStroke: TSD_StrokeArchive? = nil
    var _tableBodyPivotGroupVerticalStroke: TSD_StrokeArchive? = nil
    var _tableBodyPivotDeemphasisHorizontalStroke: TSD_StrokeArchive? = nil
    var _tableBodyPivotEmphasisVerticalStroke: TSD_StrokeArchive? = nil
    var _headerColumnPivotGroupHorizontalStroke: TSD_StrokeArchive? = nil
    var _headerColumnPivotGroupDeemphasisStroke: TSD_StrokeArchive? = nil
    var _headerColumnPivotSeparatorStroke: TSD_StrokeArchive? = nil
    var _headerRowPivotGroupVerticalStroke: TSD_StrokeArchive? = nil
    var _headerRowPivotGroupDeemphasisStroke: TSD_StrokeArchive? = nil
    var _headerRowPivotTitleStroke: TSD_StrokeArchive? = nil
    var _footerRowPivotGroupVerticalStroke: TSD_StrokeArchive? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _bandedRows = source._bandedRows
      _bandedFill = source._bandedFill
      _behavesLikeSpreadsheet = source._behavesLikeSpreadsheet
      _autoResize = source._autoResize
      _deprecatedHeaderRowSeparatorStroke = source._deprecatedHeaderRowSeparatorStroke
      _deprecatedHeaderRowBorderStroke = source._deprecatedHeaderRowBorderStroke
      _deprecatedHeaderRowHorizontalStroke = source._deprecatedHeaderRowHorizontalStroke
      _deprecatedHeaderRowVerticalStroke = source._deprecatedHeaderRowVerticalStroke
      _deprecatedHeaderColumnBorderStroke = source._deprecatedHeaderColumnBorderStroke
      _deprecatedHeaderColumnSeparatorStroke = source._deprecatedHeaderColumnSeparatorStroke
      _deprecatedHeaderColumnHorizontalStroke = source._deprecatedHeaderColumnHorizontalStroke
      _deprecatedHeaderColumnVerticalStroke = source._deprecatedHeaderColumnVerticalStroke
      _deprecatedFooterRowSeparatorStroke = source._deprecatedFooterRowSeparatorStroke
      _deprecatedFooterRowBorderStroke = source._deprecatedFooterRowBorderStroke
      _deprecatedFooterRowHorizontalStroke = source._deprecatedFooterRowHorizontalStroke
      _deprecatedFooterRowVerticalStroke = source._deprecatedFooterRowVerticalStroke
      _deprecatedTableBodyHorizontalBorderStroke = source._deprecatedTableBodyHorizontalBorderStroke
      _deprecatedTableBodyVerticalBorderStroke = source._deprecatedTableBodyVerticalBorderStroke
      _deprecatedTableBodyHorizontalStroke = source._deprecatedTableBodyHorizontalStroke
      _deprecatedTableBodyVerticalStroke = source._deprecatedTableBodyVerticalStroke
      _strokePresetList = source._strokePresetList
      _vStrokesVisible = source._vStrokesVisible
      _hStrokesVisible = source._hStrokesVisible
      _hrSeparatorVisible = source._hrSeparatorVisible
      _hcSeparatorVisible = source._hcSeparatorVisible
      _footerSeparatorVisible = source._footerSeparatorVisible
      _tableBorderVisible = source._tableBorderVisible
      _tableHeaderBorderVisible = source._tableHeaderBorderVisible
      _tableHcDividerVisible = source._tableHcDividerVisible
      _tableHrDividerVisible = source._tableHrDividerVisible
      _tableFooterDividerVisible = source._tableFooterDividerVisible
      _obsoleteMasterFontSize = source._obsoleteMasterFontSize
      _masterFontFamily = source._masterFontFamily
      _writingDirection = source._writingDirection
      _headerRowSeparatorStroke = source._headerRowSeparatorStroke
      _headerRowBorderStroke = source._headerRowBorderStroke
      _headerRowHorizontalStroke = source._headerRowHorizontalStroke
      _headerRowVerticalStroke = source._headerRowVerticalStroke
      _headerColumnBorderStroke = source._headerColumnBorderStroke
      _headerColumnSeparatorStroke = source._headerColumnSeparatorStroke
      _headerColumnHorizontalStroke = source._headerColumnHorizontalStroke
      _headerColumnVerticalStroke = source._headerColumnVerticalStroke
      _footerRowSeparatorStroke = source._footerRowSeparatorStroke
      _footerRowBorderStroke = source._footerRowBorderStroke
      _footerRowHorizontalStroke = source._footerRowHorizontalStroke
      _footerRowVerticalStroke = source._footerRowVerticalStroke
      _tableBodyHorizontalBorderStroke = source._tableBodyHorizontalBorderStroke
      _tableBodyVerticalBorderStroke = source._tableBodyVerticalBorderStroke
      _tableBodyHorizontalStroke = source._tableBodyHorizontalStroke
      _tableBodyVerticalStroke = source._tableBodyVerticalStroke
      _categoryLevel1TopStroke = source._categoryLevel1TopStroke
      _categoryLevel2TopStroke = source._categoryLevel2TopStroke
      _categoryLevel3TopStroke = source._categoryLevel3TopStroke
      _categoryLevel4TopStroke = source._categoryLevel4TopStroke
      _categoryLevel5TopStroke = source._categoryLevel5TopStroke
      _categoryLevel1BottomStroke = source._categoryLevel1BottomStroke
      _categoryLevel2BottomStroke = source._categoryLevel2BottomStroke
      _categoryLevel3BottomStroke = source._categoryLevel3BottomStroke
      _categoryLevel4BottomStroke = source._categoryLevel4BottomStroke
      _categoryLevel5BottomStroke = source._categoryLevel5BottomStroke
      _categoryLevel1InteriorStroke = source._categoryLevel1InteriorStroke
      _categoryLevel2InteriorStroke = source._categoryLevel2InteriorStroke
      _categoryLevel3InteriorStroke = source._categoryLevel3InteriorStroke
      _categoryLevel4InteriorStroke = source._categoryLevel4InteriorStroke
      _categoryLevel5InteriorStroke = source._categoryLevel5InteriorStroke
      _categoryLevel1LabelSeparatorStroke = source._categoryLevel1LabelSeparatorStroke
      _categoryLevel2LabelSeparatorStroke = source._categoryLevel2LabelSeparatorStroke
      _categoryLevel3LabelSeparatorStroke = source._categoryLevel3LabelSeparatorStroke
      _categoryLevel4LabelSeparatorStroke = source._categoryLevel4LabelSeparatorStroke
      _categoryLevel5LabelSeparatorStroke = source._categoryLevel5LabelSeparatorStroke
      _tableBodyPivotGroupHorizontalStroke = source._tableBodyPivotGroupHorizontalStroke
      _tableBodyPivotGroupVerticalStroke = source._tableBodyPivotGroupVerticalStroke
      _tableBodyPivotDeemphasisHorizontalStroke = source._tableBodyPivotDeemphasisHorizontalStroke
      _tableBodyPivotEmphasisVerticalStroke = source._tableBodyPivotEmphasisVerticalStroke
      _headerColumnPivotGroupHorizontalStroke = source._headerColumnPivotGroupHorizontalStroke
      _headerColumnPivotGroupDeemphasisStroke = source._headerColumnPivotGroupDeemphasisStroke
      _headerColumnPivotSeparatorStroke = source._headerColumnPivotSeparatorStroke
      _headerRowPivotGroupVerticalStroke = source._headerRowPivotGroupVerticalStroke
      _headerRowPivotGroupDeemphasisStroke = source._headerRowPivotGroupDeemphasisStroke
      _headerRowPivotTitleStroke = source._headerRowPivotTitleStroke
      _footerRowPivotGroupVerticalStroke = source._footerRowPivotGroupVerticalStroke
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._bandedFill, !v.isInitialized {return false}
      if let v = _storage._deprecatedHeaderRowSeparatorStroke, !v.isInitialized {return false}
      if let v = _storage._deprecatedHeaderRowBorderStroke, !v.isInitialized {return false}
      if let v = _storage._deprecatedHeaderRowHorizontalStroke, !v.isInitialized {return false}
      if let v = _storage._deprecatedHeaderRowVerticalStroke, !v.isInitialized {return false}
      if let v = _storage._deprecatedHeaderColumnBorderStroke, !v.isInitialized {return false}
      if let v = _storage._deprecatedHeaderColumnSeparatorStroke, !v.isInitialized {return false}
      if let v = _storage._deprecatedHeaderColumnHorizontalStroke, !v.isInitialized {return false}
      if let v = _storage._deprecatedHeaderColumnVerticalStroke, !v.isInitialized {return false}
      if let v = _storage._deprecatedFooterRowSeparatorStroke, !v.isInitialized {return false}
      if let v = _storage._deprecatedFooterRowBorderStroke, !v.isInitialized {return false}
      if let v = _storage._deprecatedFooterRowHorizontalStroke, !v.isInitialized {return false}
      if let v = _storage._deprecatedFooterRowVerticalStroke, !v.isInitialized {return false}
      if let v = _storage._deprecatedTableBodyHorizontalBorderStroke, !v.isInitialized {return false}
      if let v = _storage._deprecatedTableBodyVerticalBorderStroke, !v.isInitialized {return false}
      if let v = _storage._deprecatedTableBodyHorizontalStroke, !v.isInitialized {return false}
      if let v = _storage._deprecatedTableBodyVerticalStroke, !v.isInitialized {return false}
      if let v = _storage._strokePresetList, !v.isInitialized {return false}
      if let v = _storage._headerRowSeparatorStroke, !v.isInitialized {return false}
      if let v = _storage._headerRowBorderStroke, !v.isInitialized {return false}
      if let v = _storage._headerRowHorizontalStroke, !v.isInitialized {return false}
      if let v = _storage._headerRowVerticalStroke, !v.isInitialized {return false}
      if let v = _storage._headerColumnBorderStroke, !v.isInitialized {return false}
      if let v = _storage._headerColumnSeparatorStroke, !v.isInitialized {return false}
      if let v = _storage._headerColumnHorizontalStroke, !v.isInitialized {return false}
      if let v = _storage._headerColumnVerticalStroke, !v.isInitialized {return false}
      if let v = _storage._footerRowSeparatorStroke, !v.isInitialized {return false}
      if let v = _storage._footerRowBorderStroke, !v.isInitialized {return false}
      if let v = _storage._footerRowHorizontalStroke, !v.isInitialized {return false}
      if let v = _storage._footerRowVerticalStroke, !v.isInitialized {return false}
      if let v = _storage._tableBodyHorizontalBorderStroke, !v.isInitialized {return false}
      if let v = _storage._tableBodyVerticalBorderStroke, !v.isInitialized {return false}
      if let v = _storage._tableBodyHorizontalStroke, !v.isInitialized {return false}
      if let v = _storage._tableBodyVerticalStroke, !v.isInitialized {return false}
      if let v = _storage._categoryLevel1TopStroke, !v.isInitialized {return false}
      if let v = _storage._categoryLevel2TopStroke, !v.isInitialized {return false}
      if let v = _storage._categoryLevel3TopStroke, !v.isInitialized {return false}
      if let v = _storage._categoryLevel4TopStroke, !v.isInitialized {return false}
      if let v = _storage._categoryLevel5TopStroke, !v.isInitialized {return false}
      if let v = _storage._categoryLevel1BottomStroke, !v.isInitialized {return false}
      if let v = _storage._categoryLevel2BottomStroke, !v.isInitialized {return false}
      if let v = _storage._categoryLevel3BottomStroke, !v.isInitialized {return false}
      if let v = _storage._categoryLevel4BottomStroke, !v.isInitialized {return false}
      if let v = _storage._categoryLevel5BottomStroke, !v.isInitialized {return false}
      if let v = _storage._categoryLevel1InteriorStroke, !v.isInitialized {return false}
      if let v = _storage._categoryLevel2InteriorStroke, !v.isInitialized {return false}
      if let v = _storage._categoryLevel3InteriorStroke, !v.isInitialized {return false}
      if let v = _storage._categoryLevel4InteriorStroke, !v.isInitialized {return false}
      if let v = _storage._categoryLevel5InteriorStroke, !v.isInitialized {return false}
      if let v = _storage._categoryLevel1LabelSeparatorStroke, !v.isInitialized {return false}
      if let v = _storage._categoryLevel2LabelSeparatorStroke, !v.isInitialized {return false}
      if let v = _storage._categoryLevel3LabelSeparatorStroke, !v.isInitialized {return false}
      if let v = _storage._categoryLevel4LabelSeparatorStroke, !v.isInitialized {return false}
      if let v = _storage._categoryLevel5LabelSeparatorStroke, !v.isInitialized {return false}
      if let v = _storage._tableBodyPivotGroupHorizontalStroke, !v.isInitialized {return false}
      if let v = _storage._tableBodyPivotGroupVerticalStroke, !v.isInitialized {return false}
      if let v = _storage._tableBodyPivotDeemphasisHorizontalStroke, !v.isInitialized {return false}
      if let v = _storage._tableBodyPivotEmphasisVerticalStroke, !v.isInitialized {return false}
      if let v = _storage._headerColumnPivotGroupHorizontalStroke, !v.isInitialized {return false}
      if let v = _storage._headerColumnPivotGroupDeemphasisStroke, !v.isInitialized {return false}
      if let v = _storage._headerColumnPivotSeparatorStroke, !v.isInitialized {return false}
      if let v = _storage._headerRowPivotGroupVerticalStroke, !v.isInitialized {return false}
      if let v = _storage._headerRowPivotGroupDeemphasisStroke, !v.isInitialized {return false}
      if let v = _storage._headerRowPivotTitleStroke, !v.isInitialized {return false}
      if let v = _storage._footerRowPivotGroupVerticalStroke, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularBoolField(value: &_storage._bandedRows) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._bandedFill) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._deprecatedHeaderRowSeparatorStroke) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._deprecatedHeaderRowBorderStroke) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._deprecatedHeaderColumnBorderStroke) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._deprecatedHeaderColumnSeparatorStroke) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._deprecatedFooterRowSeparatorStroke) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._deprecatedFooterRowBorderStroke) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._deprecatedTableBodyHorizontalBorderStroke) }()
        case 21: try { try decoder.decodeSingularBoolField(value: &_storage._behavesLikeSpreadsheet) }()
        case 22: try { try decoder.decodeSingularBoolField(value: &_storage._autoResize) }()
        case 23: try { try decoder.decodeSingularMessageField(value: &_storage._deprecatedHeaderRowHorizontalStroke) }()
        case 24: try { try decoder.decodeSingularMessageField(value: &_storage._deprecatedHeaderRowVerticalStroke) }()
        case 25: try { try decoder.decodeSingularMessageField(value: &_storage._deprecatedHeaderColumnHorizontalStroke) }()
        case 26: try { try decoder.decodeSingularMessageField(value: &_storage._deprecatedHeaderColumnVerticalStroke) }()
        case 27: try { try decoder.decodeSingularMessageField(value: &_storage._deprecatedFooterRowHorizontalStroke) }()
        case 28: try { try decoder.decodeSingularMessageField(value: &_storage._deprecatedFooterRowVerticalStroke) }()
        case 29: try { try decoder.decodeSingularMessageField(value: &_storage._deprecatedTableBodyVerticalBorderStroke) }()
        case 30: try { try decoder.decodeSingularMessageField(value: &_storage._deprecatedTableBodyHorizontalStroke) }()
        case 31: try { try decoder.decodeSingularMessageField(value: &_storage._deprecatedTableBodyVerticalStroke) }()
        case 32: try { try decoder.decodeSingularMessageField(value: &_storage._strokePresetList) }()
        case 33: try { try decoder.decodeSingularBoolField(value: &_storage._vStrokesVisible) }()
        case 34: try { try decoder.decodeSingularBoolField(value: &_storage._hStrokesVisible) }()
        case 35: try { try decoder.decodeSingularBoolField(value: &_storage._hrSeparatorVisible) }()
        case 36: try { try decoder.decodeSingularBoolField(value: &_storage._hcSeparatorVisible) }()
        case 37: try { try decoder.decodeSingularBoolField(value: &_storage._footerSeparatorVisible) }()
        case 38: try { try decoder.decodeSingularBoolField(value: &_storage._tableBorderVisible) }()
        case 39: try { try decoder.decodeSingularBoolField(value: &_storage._tableHeaderBorderVisible) }()
        case 40: try { try decoder.decodeSingularInt32Field(value: &_storage._obsoleteMasterFontSize) }()
        case 41: try { try decoder.decodeSingularStringField(value: &_storage._masterFontFamily) }()
        case 42: try { try decoder.decodeSingularBoolField(value: &_storage._tableHcDividerVisible) }()
        case 43: try { try decoder.decodeSingularBoolField(value: &_storage._tableHrDividerVisible) }()
        case 44: try { try decoder.decodeSingularBoolField(value: &_storage._tableFooterDividerVisible) }()
        case 45: try { try decoder.decodeSingularEnumField(value: &_storage._writingDirection) }()
        case 46: try { try decoder.decodeSingularMessageField(value: &_storage._headerRowSeparatorStroke) }()
        case 47: try { try decoder.decodeSingularMessageField(value: &_storage._headerRowBorderStroke) }()
        case 48: try { try decoder.decodeSingularMessageField(value: &_storage._headerRowHorizontalStroke) }()
        case 49: try { try decoder.decodeSingularMessageField(value: &_storage._headerRowVerticalStroke) }()
        case 50: try { try decoder.decodeSingularMessageField(value: &_storage._headerColumnBorderStroke) }()
        case 51: try { try decoder.decodeSingularMessageField(value: &_storage._headerColumnSeparatorStroke) }()
        case 52: try { try decoder.decodeSingularMessageField(value: &_storage._headerColumnHorizontalStroke) }()
        case 53: try { try decoder.decodeSingularMessageField(value: &_storage._headerColumnVerticalStroke) }()
        case 54: try { try decoder.decodeSingularMessageField(value: &_storage._footerRowSeparatorStroke) }()
        case 55: try { try decoder.decodeSingularMessageField(value: &_storage._footerRowBorderStroke) }()
        case 56: try { try decoder.decodeSingularMessageField(value: &_storage._footerRowHorizontalStroke) }()
        case 57: try { try decoder.decodeSingularMessageField(value: &_storage._footerRowVerticalStroke) }()
        case 58: try { try decoder.decodeSingularMessageField(value: &_storage._tableBodyHorizontalBorderStroke) }()
        case 59: try { try decoder.decodeSingularMessageField(value: &_storage._tableBodyVerticalBorderStroke) }()
        case 60: try { try decoder.decodeSingularMessageField(value: &_storage._tableBodyHorizontalStroke) }()
        case 61: try { try decoder.decodeSingularMessageField(value: &_storage._tableBodyVerticalStroke) }()
        case 62: try { try decoder.decodeSingularMessageField(value: &_storage._categoryLevel1TopStroke) }()
        case 63: try { try decoder.decodeSingularMessageField(value: &_storage._categoryLevel2TopStroke) }()
        case 64: try { try decoder.decodeSingularMessageField(value: &_storage._categoryLevel3TopStroke) }()
        case 65: try { try decoder.decodeSingularMessageField(value: &_storage._categoryLevel4TopStroke) }()
        case 66: try { try decoder.decodeSingularMessageField(value: &_storage._categoryLevel5TopStroke) }()
        case 67: try { try decoder.decodeSingularMessageField(value: &_storage._categoryLevel1BottomStroke) }()
        case 68: try { try decoder.decodeSingularMessageField(value: &_storage._categoryLevel2BottomStroke) }()
        case 69: try { try decoder.decodeSingularMessageField(value: &_storage._categoryLevel3BottomStroke) }()
        case 70: try { try decoder.decodeSingularMessageField(value: &_storage._categoryLevel4BottomStroke) }()
        case 71: try { try decoder.decodeSingularMessageField(value: &_storage._categoryLevel5BottomStroke) }()
        case 72: try { try decoder.decodeSingularMessageField(value: &_storage._categoryLevel1InteriorStroke) }()
        case 73: try { try decoder.decodeSingularMessageField(value: &_storage._categoryLevel2InteriorStroke) }()
        case 74: try { try decoder.decodeSingularMessageField(value: &_storage._categoryLevel3InteriorStroke) }()
        case 75: try { try decoder.decodeSingularMessageField(value: &_storage._categoryLevel4InteriorStroke) }()
        case 76: try { try decoder.decodeSingularMessageField(value: &_storage._categoryLevel5InteriorStroke) }()
        case 77: try { try decoder.decodeSingularMessageField(value: &_storage._categoryLevel1LabelSeparatorStroke) }()
        case 78: try { try decoder.decodeSingularMessageField(value: &_storage._categoryLevel2LabelSeparatorStroke) }()
        case 79: try { try decoder.decodeSingularMessageField(value: &_storage._categoryLevel3LabelSeparatorStroke) }()
        case 80: try { try decoder.decodeSingularMessageField(value: &_storage._categoryLevel4LabelSeparatorStroke) }()
        case 81: try { try decoder.decodeSingularMessageField(value: &_storage._categoryLevel5LabelSeparatorStroke) }()
        case 82: try { try decoder.decodeSingularMessageField(value: &_storage._tableBodyPivotGroupHorizontalStroke) }()
        case 83: try { try decoder.decodeSingularMessageField(value: &_storage._tableBodyPivotGroupVerticalStroke) }()
        case 84: try { try decoder.decodeSingularMessageField(value: &_storage._tableBodyPivotDeemphasisHorizontalStroke) }()
        case 85: try { try decoder.decodeSingularMessageField(value: &_storage._tableBodyPivotEmphasisVerticalStroke) }()
        case 86: try { try decoder.decodeSingularMessageField(value: &_storage._headerColumnPivotGroupHorizontalStroke) }()
        case 87: try { try decoder.decodeSingularMessageField(value: &_storage._headerColumnPivotGroupDeemphasisStroke) }()
        case 88: try { try decoder.decodeSingularMessageField(value: &_storage._headerColumnPivotSeparatorStroke) }()
        case 89: try { try decoder.decodeSingularMessageField(value: &_storage._headerRowPivotGroupVerticalStroke) }()
        case 90: try { try decoder.decodeSingularMessageField(value: &_storage._headerRowPivotGroupDeemphasisStroke) }()
        case 91: try { try decoder.decodeSingularMessageField(value: &_storage._headerRowPivotTitleStroke) }()
        case 92: try { try decoder.decodeSingularMessageField(value: &_storage._footerRowPivotGroupVerticalStroke) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._bandedRows {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._bandedFill {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._deprecatedHeaderRowSeparatorStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._deprecatedHeaderRowBorderStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._deprecatedHeaderColumnBorderStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._deprecatedHeaderColumnSeparatorStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._deprecatedFooterRowSeparatorStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._deprecatedFooterRowBorderStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._deprecatedTableBodyHorizontalBorderStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._behavesLikeSpreadsheet {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._autoResize {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 22)
      } }()
      try { if let v = _storage._deprecatedHeaderRowHorizontalStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      } }()
      try { if let v = _storage._deprecatedHeaderRowVerticalStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
      } }()
      try { if let v = _storage._deprecatedHeaderColumnHorizontalStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 25)
      } }()
      try { if let v = _storage._deprecatedHeaderColumnVerticalStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
      } }()
      try { if let v = _storage._deprecatedFooterRowHorizontalStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 27)
      } }()
      try { if let v = _storage._deprecatedFooterRowVerticalStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 28)
      } }()
      try { if let v = _storage._deprecatedTableBodyVerticalBorderStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 29)
      } }()
      try { if let v = _storage._deprecatedTableBodyHorizontalStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 30)
      } }()
      try { if let v = _storage._deprecatedTableBodyVerticalStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 31)
      } }()
      try { if let v = _storage._strokePresetList {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 32)
      } }()
      try { if let v = _storage._vStrokesVisible {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 33)
      } }()
      try { if let v = _storage._hStrokesVisible {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 34)
      } }()
      try { if let v = _storage._hrSeparatorVisible {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 35)
      } }()
      try { if let v = _storage._hcSeparatorVisible {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 36)
      } }()
      try { if let v = _storage._footerSeparatorVisible {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 37)
      } }()
      try { if let v = _storage._tableBorderVisible {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 38)
      } }()
      try { if let v = _storage._tableHeaderBorderVisible {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 39)
      } }()
      try { if let v = _storage._obsoleteMasterFontSize {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 40)
      } }()
      try { if let v = _storage._masterFontFamily {
        try visitor.visitSingularStringField(value: v, fieldNumber: 41)
      } }()
      try { if let v = _storage._tableHcDividerVisible {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 42)
      } }()
      try { if let v = _storage._tableHrDividerVisible {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 43)
      } }()
      try { if let v = _storage._tableFooterDividerVisible {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 44)
      } }()
      try { if let v = _storage._writingDirection {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 45)
      } }()
      try { if let v = _storage._headerRowSeparatorStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 46)
      } }()
      try { if let v = _storage._headerRowBorderStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 47)
      } }()
      try { if let v = _storage._headerRowHorizontalStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 48)
      } }()
      try { if let v = _storage._headerRowVerticalStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 49)
      } }()
      try { if let v = _storage._headerColumnBorderStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 50)
      } }()
      try { if let v = _storage._headerColumnSeparatorStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 51)
      } }()
      try { if let v = _storage._headerColumnHorizontalStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 52)
      } }()
      try { if let v = _storage._headerColumnVerticalStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 53)
      } }()
      try { if let v = _storage._footerRowSeparatorStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 54)
      } }()
      try { if let v = _storage._footerRowBorderStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 55)
      } }()
      try { if let v = _storage._footerRowHorizontalStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 56)
      } }()
      try { if let v = _storage._footerRowVerticalStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 57)
      } }()
      try { if let v = _storage._tableBodyHorizontalBorderStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 58)
      } }()
      try { if let v = _storage._tableBodyVerticalBorderStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 59)
      } }()
      try { if let v = _storage._tableBodyHorizontalStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 60)
      } }()
      try { if let v = _storage._tableBodyVerticalStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 61)
      } }()
      try { if let v = _storage._categoryLevel1TopStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 62)
      } }()
      try { if let v = _storage._categoryLevel2TopStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 63)
      } }()
      try { if let v = _storage._categoryLevel3TopStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 64)
      } }()
      try { if let v = _storage._categoryLevel4TopStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 65)
      } }()
      try { if let v = _storage._categoryLevel5TopStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 66)
      } }()
      try { if let v = _storage._categoryLevel1BottomStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 67)
      } }()
      try { if let v = _storage._categoryLevel2BottomStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 68)
      } }()
      try { if let v = _storage._categoryLevel3BottomStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 69)
      } }()
      try { if let v = _storage._categoryLevel4BottomStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 70)
      } }()
      try { if let v = _storage._categoryLevel5BottomStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 71)
      } }()
      try { if let v = _storage._categoryLevel1InteriorStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 72)
      } }()
      try { if let v = _storage._categoryLevel2InteriorStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 73)
      } }()
      try { if let v = _storage._categoryLevel3InteriorStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 74)
      } }()
      try { if let v = _storage._categoryLevel4InteriorStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 75)
      } }()
      try { if let v = _storage._categoryLevel5InteriorStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 76)
      } }()
      try { if let v = _storage._categoryLevel1LabelSeparatorStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 77)
      } }()
      try { if let v = _storage._categoryLevel2LabelSeparatorStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 78)
      } }()
      try { if let v = _storage._categoryLevel3LabelSeparatorStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 79)
      } }()
      try { if let v = _storage._categoryLevel4LabelSeparatorStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 80)
      } }()
      try { if let v = _storage._categoryLevel5LabelSeparatorStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 81)
      } }()
      try { if let v = _storage._tableBodyPivotGroupHorizontalStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 82)
      } }()
      try { if let v = _storage._tableBodyPivotGroupVerticalStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 83)
      } }()
      try { if let v = _storage._tableBodyPivotDeemphasisHorizontalStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 84)
      } }()
      try { if let v = _storage._tableBodyPivotEmphasisVerticalStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 85)
      } }()
      try { if let v = _storage._headerColumnPivotGroupHorizontalStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 86)
      } }()
      try { if let v = _storage._headerColumnPivotGroupDeemphasisStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 87)
      } }()
      try { if let v = _storage._headerColumnPivotSeparatorStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 88)
      } }()
      try { if let v = _storage._headerRowPivotGroupVerticalStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 89)
      } }()
      try { if let v = _storage._headerRowPivotGroupDeemphasisStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 90)
      } }()
      try { if let v = _storage._headerRowPivotTitleStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 91)
      } }()
      try { if let v = _storage._footerRowPivotGroupVerticalStroke {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 92)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_TableStylePropertiesArchive, rhs: TST_TableStylePropertiesArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._bandedRows != rhs_storage._bandedRows {return false}
        if _storage._bandedFill != rhs_storage._bandedFill {return false}
        if _storage._behavesLikeSpreadsheet != rhs_storage._behavesLikeSpreadsheet {return false}
        if _storage._autoResize != rhs_storage._autoResize {return false}
        if _storage._deprecatedHeaderRowSeparatorStroke != rhs_storage._deprecatedHeaderRowSeparatorStroke {return false}
        if _storage._deprecatedHeaderRowBorderStroke != rhs_storage._deprecatedHeaderRowBorderStroke {return false}
        if _storage._deprecatedHeaderRowHorizontalStroke != rhs_storage._deprecatedHeaderRowHorizontalStroke {return false}
        if _storage._deprecatedHeaderRowVerticalStroke != rhs_storage._deprecatedHeaderRowVerticalStroke {return false}
        if _storage._deprecatedHeaderColumnBorderStroke != rhs_storage._deprecatedHeaderColumnBorderStroke {return false}
        if _storage._deprecatedHeaderColumnSeparatorStroke != rhs_storage._deprecatedHeaderColumnSeparatorStroke {return false}
        if _storage._deprecatedHeaderColumnHorizontalStroke != rhs_storage._deprecatedHeaderColumnHorizontalStroke {return false}
        if _storage._deprecatedHeaderColumnVerticalStroke != rhs_storage._deprecatedHeaderColumnVerticalStroke {return false}
        if _storage._deprecatedFooterRowSeparatorStroke != rhs_storage._deprecatedFooterRowSeparatorStroke {return false}
        if _storage._deprecatedFooterRowBorderStroke != rhs_storage._deprecatedFooterRowBorderStroke {return false}
        if _storage._deprecatedFooterRowHorizontalStroke != rhs_storage._deprecatedFooterRowHorizontalStroke {return false}
        if _storage._deprecatedFooterRowVerticalStroke != rhs_storage._deprecatedFooterRowVerticalStroke {return false}
        if _storage._deprecatedTableBodyHorizontalBorderStroke != rhs_storage._deprecatedTableBodyHorizontalBorderStroke {return false}
        if _storage._deprecatedTableBodyVerticalBorderStroke != rhs_storage._deprecatedTableBodyVerticalBorderStroke {return false}
        if _storage._deprecatedTableBodyHorizontalStroke != rhs_storage._deprecatedTableBodyHorizontalStroke {return false}
        if _storage._deprecatedTableBodyVerticalStroke != rhs_storage._deprecatedTableBodyVerticalStroke {return false}
        if _storage._strokePresetList != rhs_storage._strokePresetList {return false}
        if _storage._vStrokesVisible != rhs_storage._vStrokesVisible {return false}
        if _storage._hStrokesVisible != rhs_storage._hStrokesVisible {return false}
        if _storage._hrSeparatorVisible != rhs_storage._hrSeparatorVisible {return false}
        if _storage._hcSeparatorVisible != rhs_storage._hcSeparatorVisible {return false}
        if _storage._footerSeparatorVisible != rhs_storage._footerSeparatorVisible {return false}
        if _storage._tableBorderVisible != rhs_storage._tableBorderVisible {return false}
        if _storage._tableHeaderBorderVisible != rhs_storage._tableHeaderBorderVisible {return false}
        if _storage._tableHcDividerVisible != rhs_storage._tableHcDividerVisible {return false}
        if _storage._tableHrDividerVisible != rhs_storage._tableHrDividerVisible {return false}
        if _storage._tableFooterDividerVisible != rhs_storage._tableFooterDividerVisible {return false}
        if _storage._obsoleteMasterFontSize != rhs_storage._obsoleteMasterFontSize {return false}
        if _storage._masterFontFamily != rhs_storage._masterFontFamily {return false}
        if _storage._writingDirection != rhs_storage._writingDirection {return false}
        if _storage._headerRowSeparatorStroke != rhs_storage._headerRowSeparatorStroke {return false}
        if _storage._headerRowBorderStroke != rhs_storage._headerRowBorderStroke {return false}
        if _storage._headerRowHorizontalStroke != rhs_storage._headerRowHorizontalStroke {return false}
        if _storage._headerRowVerticalStroke != rhs_storage._headerRowVerticalStroke {return false}
        if _storage._headerColumnBorderStroke != rhs_storage._headerColumnBorderStroke {return false}
        if _storage._headerColumnSeparatorStroke != rhs_storage._headerColumnSeparatorStroke {return false}
        if _storage._headerColumnHorizontalStroke != rhs_storage._headerColumnHorizontalStroke {return false}
        if _storage._headerColumnVerticalStroke != rhs_storage._headerColumnVerticalStroke {return false}
        if _storage._footerRowSeparatorStroke != rhs_storage._footerRowSeparatorStroke {return false}
        if _storage._footerRowBorderStroke != rhs_storage._footerRowBorderStroke {return false}
        if _storage._footerRowHorizontalStroke != rhs_storage._footerRowHorizontalStroke {return false}
        if _storage._footerRowVerticalStroke != rhs_storage._footerRowVerticalStroke {return false}
        if _storage._tableBodyHorizontalBorderStroke != rhs_storage._tableBodyHorizontalBorderStroke {return false}
        if _storage._tableBodyVerticalBorderStroke != rhs_storage._tableBodyVerticalBorderStroke {return false}
        if _storage._tableBodyHorizontalStroke != rhs_storage._tableBodyHorizontalStroke {return false}
        if _storage._tableBodyVerticalStroke != rhs_storage._tableBodyVerticalStroke {return false}
        if _storage._categoryLevel1TopStroke != rhs_storage._categoryLevel1TopStroke {return false}
        if _storage._categoryLevel2TopStroke != rhs_storage._categoryLevel2TopStroke {return false}
        if _storage._categoryLevel3TopStroke != rhs_storage._categoryLevel3TopStroke {return false}
        if _storage._categoryLevel4TopStroke != rhs_storage._categoryLevel4TopStroke {return false}
        if _storage._categoryLevel5TopStroke != rhs_storage._categoryLevel5TopStroke {return false}
        if _storage._categoryLevel1BottomStroke != rhs_storage._categoryLevel1BottomStroke {return false}
        if _storage._categoryLevel2BottomStroke != rhs_storage._categoryLevel2BottomStroke {return false}
        if _storage._categoryLevel3BottomStroke != rhs_storage._categoryLevel3BottomStroke {return false}
        if _storage._categoryLevel4BottomStroke != rhs_storage._categoryLevel4BottomStroke {return false}
        if _storage._categoryLevel5BottomStroke != rhs_storage._categoryLevel5BottomStroke {return false}
        if _storage._categoryLevel1InteriorStroke != rhs_storage._categoryLevel1InteriorStroke {return false}
        if _storage._categoryLevel2InteriorStroke != rhs_storage._categoryLevel2InteriorStroke {return false}
        if _storage._categoryLevel3InteriorStroke != rhs_storage._categoryLevel3InteriorStroke {return false}
        if _storage._categoryLevel4InteriorStroke != rhs_storage._categoryLevel4InteriorStroke {return false}
        if _storage._categoryLevel5InteriorStroke != rhs_storage._categoryLevel5InteriorStroke {return false}
        if _storage._categoryLevel1LabelSeparatorStroke != rhs_storage._categoryLevel1LabelSeparatorStroke {return false}
        if _storage._categoryLevel2LabelSeparatorStroke != rhs_storage._categoryLevel2LabelSeparatorStroke {return false}
        if _storage._categoryLevel3LabelSeparatorStroke != rhs_storage._categoryLevel3LabelSeparatorStroke {return false}
        if _storage._categoryLevel4LabelSeparatorStroke != rhs_storage._categoryLevel4LabelSeparatorStroke {return false}
        if _storage._categoryLevel5LabelSeparatorStroke != rhs_storage._categoryLevel5LabelSeparatorStroke {return false}
        if _storage._tableBodyPivotGroupHorizontalStroke != rhs_storage._tableBodyPivotGroupHorizontalStroke {return false}
        if _storage._tableBodyPivotGroupVerticalStroke != rhs_storage._tableBodyPivotGroupVerticalStroke {return false}
        if _storage._tableBodyPivotDeemphasisHorizontalStroke != rhs_storage._tableBodyPivotDeemphasisHorizontalStroke {return false}
        if _storage._tableBodyPivotEmphasisVerticalStroke != rhs_storage._tableBodyPivotEmphasisVerticalStroke {return false}
        if _storage._headerColumnPivotGroupHorizontalStroke != rhs_storage._headerColumnPivotGroupHorizontalStroke {return false}
        if _storage._headerColumnPivotGroupDeemphasisStroke != rhs_storage._headerColumnPivotGroupDeemphasisStroke {return false}
        if _storage._headerColumnPivotSeparatorStroke != rhs_storage._headerColumnPivotSeparatorStroke {return false}
        if _storage._headerRowPivotGroupVerticalStroke != rhs_storage._headerRowPivotGroupVerticalStroke {return false}
        if _storage._headerRowPivotGroupDeemphasisStroke != rhs_storage._headerRowPivotGroupDeemphasisStroke {return false}
        if _storage._headerRowPivotTitleStroke != rhs_storage._headerRowPivotTitleStroke {return false}
        if _storage._footerRowPivotGroupVerticalStroke != rhs_storage._footerRowPivotGroupVerticalStroke {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_TableStylePresetArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TableStylePresetArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}index\0\u{1}image\0\u{3}style_network\0")

  public var isInitialized: Bool {
    if let v = self._image, !v.isInitialized {return false}
    if let v = self._styleNetwork, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._index) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._image) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._styleNetwork) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._index {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._image {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._styleNetwork {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_TableStylePresetArchive, rhs: TST_TableStylePresetArchive) -> Bool {
    if lhs._index != rhs._index {return false}
    if lhs._image != rhs._image {return false}
    if lhs._styleNetwork != rhs._styleNetwork {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_TableStrokePresetArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TableStrokePresetArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}index\0")

  public var isInitialized: Bool {
    if self._index == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self._index) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._index {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_TableStrokePresetArchive, rhs: TST_TableStrokePresetArchive) -> Bool {
    if lhs._index != rhs._index {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TST_ThemePresetsArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ThemePresetsArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}table_style_presets\0\u{3}table_cell_stroke_presets\0")

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.tableStylePresets) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.tableCellStrokePresets) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.tableStylePresets) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.tableCellStrokePresets) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.tableStylePresets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tableStylePresets, fieldNumber: 1)
    }
    if !self.tableCellStrokePresets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tableCellStrokePresets, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TST_ThemePresetsArchive, rhs: TST_ThemePresetsArchive) -> Bool {
    if lhs.tableStylePresets != rhs.tableStylePresets {return false}
    if lhs.tableCellStrokePresets != rhs.tableCellStrokePresets {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
