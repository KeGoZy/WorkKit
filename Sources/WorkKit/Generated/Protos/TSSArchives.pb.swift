// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: TSSArchives.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum TSS_ValueType: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
  case objectType = 0
  case intType = 1
  case floatType = 2
  case doubleType = 3

  init() {
    self = .objectType
  }

}

enum TSS_PropertyType: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
  case invalidPropertyType = 1
  case nullPropertyType = 2
  case integerPropertyType = 3
  case floatPropertyType = 4
  case doublePropertyType = 5
  case nsstringPropertyType = 6
  case tspobjectPropertyType = 7

  init() {
    self = .invalidPropertyType
  }

}

struct TSS_StyleArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  var styleIdentifier: String {
    get {return _styleIdentifier ?? String()}
    set {_styleIdentifier = newValue}
  }
  /// Returns true if `styleIdentifier` has been explicitly set.
  var hasStyleIdentifier: Bool {return self._styleIdentifier != nil}
  /// Clears the value of `styleIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearStyleIdentifier() {self._styleIdentifier = nil}

  var parent: TSP_Reference {
    get {return _parent ?? TSP_Reference()}
    set {_parent = newValue}
  }
  /// Returns true if `parent` has been explicitly set.
  var hasParent: Bool {return self._parent != nil}
  /// Clears the value of `parent`. Subsequent reads from it will return its default value.
  mutating func clearParent() {self._parent = nil}

  var isVariation: Bool {
    get {return _isVariation ?? false}
    set {_isVariation = newValue}
  }
  /// Returns true if `isVariation` has been explicitly set.
  var hasIsVariation: Bool {return self._isVariation != nil}
  /// Clears the value of `isVariation`. Subsequent reads from it will return its default value.
  mutating func clearIsVariation() {self._isVariation = nil}

  var stylesheet: TSP_Reference {
    get {return _stylesheet ?? TSP_Reference()}
    set {_stylesheet = newValue}
  }
  /// Returns true if `stylesheet` has been explicitly set.
  var hasStylesheet: Bool {return self._stylesheet != nil}
  /// Clears the value of `stylesheet`. Subsequent reads from it will return its default value.
  mutating func clearStylesheet() {self._stylesheet = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _name: String? = nil
  fileprivate var _styleIdentifier: String? = nil
  fileprivate var _parent: TSP_Reference? = nil
  fileprivate var _isVariation: Bool? = nil
  fileprivate var _stylesheet: TSP_Reference? = nil
}

struct TSS_StylesheetArchive: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var styles: [TSP_Reference] {
    get {return _storage._styles}
    set {_uniqueStorage()._styles = newValue}
  }

  var identifierToStyleMap: [TSS_StylesheetArchive.IdentifiedStyleEntry] {
    get {return _storage._identifierToStyleMap}
    set {_uniqueStorage()._identifierToStyleMap = newValue}
  }

  var parent: TSP_Reference {
    get {return _storage._parent ?? TSP_Reference()}
    set {_uniqueStorage()._parent = newValue}
  }
  /// Returns true if `parent` has been explicitly set.
  var hasParent: Bool {return _storage._parent != nil}
  /// Clears the value of `parent`. Subsequent reads from it will return its default value.
  mutating func clearParent() {_uniqueStorage()._parent = nil}

  var isLocked: Bool {
    get {return _storage._isLocked ?? true}
    set {_uniqueStorage()._isLocked = newValue}
  }
  /// Returns true if `isLocked` has been explicitly set.
  var hasIsLocked: Bool {return _storage._isLocked != nil}
  /// Clears the value of `isLocked`. Subsequent reads from it will return its default value.
  mutating func clearIsLocked() {_uniqueStorage()._isLocked = nil}

  var parentToChildrenStyleMap: [TSS_StylesheetArchive.StyleChildrenEntry] {
    get {return _storage._parentToChildrenStyleMap}
    set {_uniqueStorage()._parentToChildrenStyleMap = newValue}
  }

  var canCullStyles: Bool {
    get {return _storage._canCullStyles ?? false}
    set {_uniqueStorage()._canCullStyles = newValue}
  }
  /// Returns true if `canCullStyles` has been explicitly set.
  var hasCanCullStyles: Bool {return _storage._canCullStyles != nil}
  /// Clears the value of `canCullStyles`. Subsequent reads from it will return its default value.
  mutating func clearCanCullStyles() {_uniqueStorage()._canCullStyles = nil}

  var stylesFor100: TSS_StylesheetArchive.VersionedStyles {
    get {return _storage._stylesFor100 ?? TSS_StylesheetArchive.VersionedStyles()}
    set {_uniqueStorage()._stylesFor100 = newValue}
  }
  /// Returns true if `stylesFor100` has been explicitly set.
  var hasStylesFor100: Bool {return _storage._stylesFor100 != nil}
  /// Clears the value of `stylesFor100`. Subsequent reads from it will return its default value.
  mutating func clearStylesFor100() {_uniqueStorage()._stylesFor100 = nil}

  var stylesFor101: TSS_StylesheetArchive.VersionedStyles {
    get {return _storage._stylesFor101 ?? TSS_StylesheetArchive.VersionedStyles()}
    set {_uniqueStorage()._stylesFor101 = newValue}
  }
  /// Returns true if `stylesFor101` has been explicitly set.
  var hasStylesFor101: Bool {return _storage._stylesFor101 != nil}
  /// Clears the value of `stylesFor101`. Subsequent reads from it will return its default value.
  mutating func clearStylesFor101() {_uniqueStorage()._stylesFor101 = nil}

  var stylesFor102: TSS_StylesheetArchive.VersionedStyles {
    get {return _storage._stylesFor102 ?? TSS_StylesheetArchive.VersionedStyles()}
    set {_uniqueStorage()._stylesFor102 = newValue}
  }
  /// Returns true if `stylesFor102` has been explicitly set.
  var hasStylesFor102: Bool {return _storage._stylesFor102 != nil}
  /// Clears the value of `stylesFor102`. Subsequent reads from it will return its default value.
  mutating func clearStylesFor102() {_uniqueStorage()._stylesFor102 = nil}

  var stylesFor110: TSS_StylesheetArchive.VersionedStyles {
    get {return _storage._stylesFor110 ?? TSS_StylesheetArchive.VersionedStyles()}
    set {_uniqueStorage()._stylesFor110 = newValue}
  }
  /// Returns true if `stylesFor110` has been explicitly set.
  var hasStylesFor110: Bool {return _storage._stylesFor110 != nil}
  /// Clears the value of `stylesFor110`. Subsequent reads from it will return its default value.
  mutating func clearStylesFor110() {_uniqueStorage()._stylesFor110 = nil}

  var stylesFor111: TSS_StylesheetArchive.VersionedStyles {
    get {return _storage._stylesFor111 ?? TSS_StylesheetArchive.VersionedStyles()}
    set {_uniqueStorage()._stylesFor111 = newValue}
  }
  /// Returns true if `stylesFor111` has been explicitly set.
  var hasStylesFor111: Bool {return _storage._stylesFor111 != nil}
  /// Clears the value of `stylesFor111`. Subsequent reads from it will return its default value.
  mutating func clearStylesFor111() {_uniqueStorage()._stylesFor111 = nil}

  var stylesFor112: TSS_StylesheetArchive.VersionedStyles {
    get {return _storage._stylesFor112 ?? TSS_StylesheetArchive.VersionedStyles()}
    set {_uniqueStorage()._stylesFor112 = newValue}
  }
  /// Returns true if `stylesFor112` has been explicitly set.
  var hasStylesFor112: Bool {return _storage._stylesFor112 != nil}
  /// Clears the value of `stylesFor112`. Subsequent reads from it will return its default value.
  mutating func clearStylesFor112() {_uniqueStorage()._stylesFor112 = nil}

  var stylesFor120: TSS_StylesheetArchive.VersionedStyles {
    get {return _storage._stylesFor120 ?? TSS_StylesheetArchive.VersionedStyles()}
    set {_uniqueStorage()._stylesFor120 = newValue}
  }
  /// Returns true if `stylesFor120` has been explicitly set.
  var hasStylesFor120: Bool {return _storage._stylesFor120 != nil}
  /// Clears the value of `stylesFor120`. Subsequent reads from it will return its default value.
  mutating func clearStylesFor120() {_uniqueStorage()._stylesFor120 = nil}

  var stylesFor121: TSS_StylesheetArchive.VersionedStyles {
    get {return _storage._stylesFor121 ?? TSS_StylesheetArchive.VersionedStyles()}
    set {_uniqueStorage()._stylesFor121 = newValue}
  }
  /// Returns true if `stylesFor121` has been explicitly set.
  var hasStylesFor121: Bool {return _storage._stylesFor121 != nil}
  /// Clears the value of `stylesFor121`. Subsequent reads from it will return its default value.
  mutating func clearStylesFor121() {_uniqueStorage()._stylesFor121 = nil}

  var stylesFor122: TSS_StylesheetArchive.VersionedStyles {
    get {return _storage._stylesFor122 ?? TSS_StylesheetArchive.VersionedStyles()}
    set {_uniqueStorage()._stylesFor122 = newValue}
  }
  /// Returns true if `stylesFor122` has been explicitly set.
  var hasStylesFor122: Bool {return _storage._stylesFor122 != nil}
  /// Clears the value of `stylesFor122`. Subsequent reads from it will return its default value.
  mutating func clearStylesFor122() {_uniqueStorage()._stylesFor122 = nil}

  var stylesFor130: TSS_StylesheetArchive.VersionedStyles {
    get {return _storage._stylesFor130 ?? TSS_StylesheetArchive.VersionedStyles()}
    set {_uniqueStorage()._stylesFor130 = newValue}
  }
  /// Returns true if `stylesFor130` has been explicitly set.
  var hasStylesFor130: Bool {return _storage._stylesFor130 != nil}
  /// Clears the value of `stylesFor130`. Subsequent reads from it will return its default value.
  mutating func clearStylesFor130() {_uniqueStorage()._stylesFor130 = nil}

  var stylesFor131: TSS_StylesheetArchive.VersionedStyles {
    get {return _storage._stylesFor131 ?? TSS_StylesheetArchive.VersionedStyles()}
    set {_uniqueStorage()._stylesFor131 = newValue}
  }
  /// Returns true if `stylesFor131` has been explicitly set.
  var hasStylesFor131: Bool {return _storage._stylesFor131 != nil}
  /// Clears the value of `stylesFor131`. Subsequent reads from it will return its default value.
  mutating func clearStylesFor131() {_uniqueStorage()._stylesFor131 = nil}

  var stylesFor132: TSS_StylesheetArchive.VersionedStyles {
    get {return _storage._stylesFor132 ?? TSS_StylesheetArchive.VersionedStyles()}
    set {_uniqueStorage()._stylesFor132 = newValue}
  }
  /// Returns true if `stylesFor132` has been explicitly set.
  var hasStylesFor132: Bool {return _storage._stylesFor132 != nil}
  /// Clears the value of `stylesFor132`. Subsequent reads from it will return its default value.
  mutating func clearStylesFor132() {_uniqueStorage()._stylesFor132 = nil}

  var stylesFor140: TSS_StylesheetArchive.VersionedStyles {
    get {return _storage._stylesFor140 ?? TSS_StylesheetArchive.VersionedStyles()}
    set {_uniqueStorage()._stylesFor140 = newValue}
  }
  /// Returns true if `stylesFor140` has been explicitly set.
  var hasStylesFor140: Bool {return _storage._stylesFor140 != nil}
  /// Clears the value of `stylesFor140`. Subsequent reads from it will return its default value.
  mutating func clearStylesFor140() {_uniqueStorage()._stylesFor140 = nil}

  var stylesFor141: TSS_StylesheetArchive.VersionedStyles {
    get {return _storage._stylesFor141 ?? TSS_StylesheetArchive.VersionedStyles()}
    set {_uniqueStorage()._stylesFor141 = newValue}
  }
  /// Returns true if `stylesFor141` has been explicitly set.
  var hasStylesFor141: Bool {return _storage._stylesFor141 != nil}
  /// Clears the value of `stylesFor141`. Subsequent reads from it will return its default value.
  mutating func clearStylesFor141() {_uniqueStorage()._stylesFor141 = nil}

  var stylesFor142: TSS_StylesheetArchive.VersionedStyles {
    get {return _storage._stylesFor142 ?? TSS_StylesheetArchive.VersionedStyles()}
    set {_uniqueStorage()._stylesFor142 = newValue}
  }
  /// Returns true if `stylesFor142` has been explicitly set.
  var hasStylesFor142: Bool {return _storage._stylesFor142 != nil}
  /// Clears the value of `stylesFor142`. Subsequent reads from it will return its default value.
  mutating func clearStylesFor142() {_uniqueStorage()._stylesFor142 = nil}

  var stylesFor144: TSS_StylesheetArchive.VersionedStyles {
    get {return _storage._stylesFor144 ?? TSS_StylesheetArchive.VersionedStyles()}
    set {_uniqueStorage()._stylesFor144 = newValue}
  }
  /// Returns true if `stylesFor144` has been explicitly set.
  var hasStylesFor144: Bool {return _storage._stylesFor144 != nil}
  /// Clears the value of `stylesFor144`. Subsequent reads from it will return its default value.
  mutating func clearStylesFor144() {_uniqueStorage()._stylesFor144 = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct IdentifiedStyleEntry: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var identifier: String {
      get {return _identifier ?? String()}
      set {_identifier = newValue}
    }
    /// Returns true if `identifier` has been explicitly set.
    var hasIdentifier: Bool {return self._identifier != nil}
    /// Clears the value of `identifier`. Subsequent reads from it will return its default value.
    mutating func clearIdentifier() {self._identifier = nil}

    var style: TSP_Reference {
      get {return _style ?? TSP_Reference()}
      set {_style = newValue}
    }
    /// Returns true if `style` has been explicitly set.
    var hasStyle: Bool {return self._style != nil}
    /// Clears the value of `style`. Subsequent reads from it will return its default value.
    mutating func clearStyle() {self._style = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _identifier: String? = nil
    fileprivate var _style: TSP_Reference? = nil
  }

  struct StyleChildrenEntry: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var parent: TSP_Reference {
      get {return _parent ?? TSP_Reference()}
      set {_parent = newValue}
    }
    /// Returns true if `parent` has been explicitly set.
    var hasParent: Bool {return self._parent != nil}
    /// Clears the value of `parent`. Subsequent reads from it will return its default value.
    mutating func clearParent() {self._parent = nil}

    var children: [TSP_Reference] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _parent: TSP_Reference? = nil
  }

  struct VersionedStyles: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var styles: [TSP_Reference] = []

    var identifierToStyleMap: [TSS_StylesheetArchive.IdentifiedStyleEntry] = []

    var parentToChildrenStyleMap: [TSS_StylesheetArchive.StyleChildrenEntry] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct TSS_ThemeArchive: SwiftProtobuf.ExtensibleMessage, Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var legacyStylesheet: TSP_Reference {
    get {return _legacyStylesheet ?? TSP_Reference()}
    set {_legacyStylesheet = newValue}
  }
  /// Returns true if `legacyStylesheet` has been explicitly set.
  var hasLegacyStylesheet: Bool {return self._legacyStylesheet != nil}
  /// Clears the value of `legacyStylesheet`. Subsequent reads from it will return its default value.
  mutating func clearLegacyStylesheet() {self._legacyStylesheet = nil}

  var themeIdentifier: String {
    get {return _themeIdentifier ?? String()}
    set {_themeIdentifier = newValue}
  }
  /// Returns true if `themeIdentifier` has been explicitly set.
  var hasThemeIdentifier: Bool {return self._themeIdentifier != nil}
  /// Clears the value of `themeIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearThemeIdentifier() {self._themeIdentifier = nil}

  var documentStylesheet: TSP_Reference {
    get {return _documentStylesheet ?? TSP_Reference()}
    set {_documentStylesheet = newValue}
  }
  /// Returns true if `documentStylesheet` has been explicitly set.
  var hasDocumentStylesheet: Bool {return self._documentStylesheet != nil}
  /// Clears the value of `documentStylesheet`. Subsequent reads from it will return its default value.
  mutating func clearDocumentStylesheet() {self._documentStylesheet = nil}

  var oldUuidsForPresetReplacements: [TSP_UUID] = []

  var newUuidsForPresetReplacements: [TSP_UUID] = []

  var colorPresets: [TSP_Color] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
  fileprivate var _legacyStylesheet: TSP_Reference? = nil
  fileprivate var _themeIdentifier: String? = nil
  fileprivate var _documentStylesheet: TSP_Reference? = nil
}

struct TSS_ApplyThemeCommandArchive: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _storage._super ?? TSK_CommandArchive()}
    set {_uniqueStorage()._super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return _storage._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {_uniqueStorage()._super = nil}

  var commands: [TSP_Reference] {
    get {return _storage._commands}
    set {_uniqueStorage()._commands = newValue}
  }

  var oldTheme: TSP_Reference {
    get {return _storage._oldTheme ?? TSP_Reference()}
    set {_uniqueStorage()._oldTheme = newValue}
  }
  /// Returns true if `oldTheme` has been explicitly set.
  var hasOldTheme: Bool {return _storage._oldTheme != nil}
  /// Clears the value of `oldTheme`. Subsequent reads from it will return its default value.
  mutating func clearOldTheme() {_uniqueStorage()._oldTheme = nil}

  var newTheme: TSP_Reference {
    get {return _storage._newTheme ?? TSP_Reference()}
    set {_uniqueStorage()._newTheme = newValue}
  }
  /// Returns true if `newTheme` has been explicitly set.
  var hasNewTheme: Bool {return _storage._newTheme != nil}
  /// Clears the value of `newTheme`. Subsequent reads from it will return its default value.
  mutating func clearNewTheme() {_uniqueStorage()._newTheme = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct TSS_ApplyThemeChildCommandArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _super ?? TSK_CommandArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var parent: TSP_Reference {
    get {return _parent ?? TSP_Reference()}
    set {_parent = newValue}
  }
  /// Returns true if `parent` has been explicitly set.
  var hasParent: Bool {return self._parent != nil}
  /// Clears the value of `parent`. Subsequent reads from it will return its default value.
  mutating func clearParent() {self._parent = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSK_CommandArchive? = nil
  fileprivate var _parent: TSP_Reference? = nil
}

struct TSS_StyleUpdatePropertyMapCommandArchive: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _storage._super ?? TSK_CommandArchive()}
    set {_uniqueStorage()._super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return _storage._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {_uniqueStorage()._super = nil}

  var currentStyle: TSP_Reference {
    get {return _storage._currentStyle ?? TSP_Reference()}
    set {_uniqueStorage()._currentStyle = newValue}
  }
  /// Returns true if `currentStyle` has been explicitly set.
  var hasCurrentStyle: Bool {return _storage._currentStyle != nil}
  /// Clears the value of `currentStyle`. Subsequent reads from it will return its default value.
  mutating func clearCurrentStyle() {_uniqueStorage()._currentStyle = nil}

  var styleWithOldPropertyMap: TSP_Reference {
    get {return _storage._styleWithOldPropertyMap ?? TSP_Reference()}
    set {_uniqueStorage()._styleWithOldPropertyMap = newValue}
  }
  /// Returns true if `styleWithOldPropertyMap` has been explicitly set.
  var hasStyleWithOldPropertyMap: Bool {return _storage._styleWithOldPropertyMap != nil}
  /// Clears the value of `styleWithOldPropertyMap`. Subsequent reads from it will return its default value.
  mutating func clearStyleWithOldPropertyMap() {_uniqueStorage()._styleWithOldPropertyMap = nil}

  var styleWithNewPropertyMap: TSP_Reference {
    get {return _storage._styleWithNewPropertyMap ?? TSP_Reference()}
    set {_uniqueStorage()._styleWithNewPropertyMap = newValue}
  }
  /// Returns true if `styleWithNewPropertyMap` has been explicitly set.
  var hasStyleWithNewPropertyMap: Bool {return _storage._styleWithNewPropertyMap != nil}
  /// Clears the value of `styleWithNewPropertyMap`. Subsequent reads from it will return its default value.
  mutating func clearStyleWithNewPropertyMap() {_uniqueStorage()._styleWithNewPropertyMap = nil}

  var styleDiff: TSP_Reference {
    get {return _storage._styleDiff ?? TSP_Reference()}
    set {_uniqueStorage()._styleDiff = newValue}
  }
  /// Returns true if `styleDiff` has been explicitly set.
  var hasStyleDiff: Bool {return _storage._styleDiff != nil}
  /// Clears the value of `styleDiff`. Subsequent reads from it will return its default value.
  mutating func clearStyleDiff() {_uniqueStorage()._styleDiff = nil}

  var notifyForStyleClients: Bool {
    get {return _storage._notifyForStyleClients ?? true}
    set {_uniqueStorage()._notifyForStyleClients = newValue}
  }
  /// Returns true if `notifyForStyleClients` has been explicitly set.
  var hasNotifyForStyleClients: Bool {return _storage._notifyForStyleClients != nil}
  /// Clears the value of `notifyForStyleClients`. Subsequent reads from it will return its default value.
  mutating func clearNotifyForStyleClients() {_uniqueStorage()._notifyForStyleClients = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct TSS_ThemeReplacePresetCommandArchive: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _storage._super ?? TSK_CommandArchive()}
    set {_uniqueStorage()._super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return _storage._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {_uniqueStorage()._super = nil}

  var preset: TSP_Reference {
    get {return _storage._preset ?? TSP_Reference()}
    set {_uniqueStorage()._preset = newValue}
  }
  /// Returns true if `preset` has been explicitly set.
  var hasPreset: Bool {return _storage._preset != nil}
  /// Clears the value of `preset`. Subsequent reads from it will return its default value.
  mutating func clearPreset() {_uniqueStorage()._preset = nil}

  var oldPreset: TSP_Reference {
    get {return _storage._oldPreset ?? TSP_Reference()}
    set {_uniqueStorage()._oldPreset = newValue}
  }
  /// Returns true if `oldPreset` has been explicitly set.
  var hasOldPreset: Bool {return _storage._oldPreset != nil}
  /// Clears the value of `oldPreset`. Subsequent reads from it will return its default value.
  mutating func clearOldPreset() {_uniqueStorage()._oldPreset = nil}

  var index: UInt32 {
    get {return _storage._index ?? 0}
    set {_uniqueStorage()._index = newValue}
  }
  /// Returns true if `index` has been explicitly set.
  var hasIndex: Bool {return _storage._index != nil}
  /// Clears the value of `index`. Subsequent reads from it will return its default value.
  mutating func clearIndex() {_uniqueStorage()._index = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct TSS_ThemeReplaceColorPresetCommandArchive: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _storage._super ?? TSK_CommandArchive()}
    set {_uniqueStorage()._super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return _storage._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {_uniqueStorage()._super = nil}

  var theme: TSP_Reference {
    get {return _storage._theme ?? TSP_Reference()}
    set {_uniqueStorage()._theme = newValue}
  }
  /// Returns true if `theme` has been explicitly set.
  var hasTheme: Bool {return _storage._theme != nil}
  /// Clears the value of `theme`. Subsequent reads from it will return its default value.
  mutating func clearTheme() {_uniqueStorage()._theme = nil}

  var color: TSP_Color {
    get {return _storage._color ?? TSP_Color()}
    set {_uniqueStorage()._color = newValue}
  }
  /// Returns true if `color` has been explicitly set.
  var hasColor: Bool {return _storage._color != nil}
  /// Clears the value of `color`. Subsequent reads from it will return its default value.
  mutating func clearColor() {_uniqueStorage()._color = nil}

  var oldColor: TSP_Color {
    get {return _storage._oldColor ?? TSP_Color()}
    set {_uniqueStorage()._oldColor = newValue}
  }
  /// Returns true if `oldColor` has been explicitly set.
  var hasOldColor: Bool {return _storage._oldColor != nil}
  /// Clears the value of `oldColor`. Subsequent reads from it will return its default value.
  mutating func clearOldColor() {_uniqueStorage()._oldColor = nil}

  var index: UInt32 {
    get {return _storage._index ?? 0}
    set {_uniqueStorage()._index = newValue}
  }
  /// Returns true if `index` has been explicitly set.
  var hasIndex: Bool {return _storage._index != nil}
  /// Clears the value of `index`. Subsequent reads from it will return its default value.
  mutating func clearIndex() {_uniqueStorage()._index = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct TSS_ThemeAddStylePresetCommandArchive: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _storage._super ?? TSK_CommandArchive()}
    set {_uniqueStorage()._super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return _storage._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {_uniqueStorage()._super = nil}

  var theme: TSP_Reference {
    get {return _storage._theme ?? TSP_Reference()}
    set {_uniqueStorage()._theme = newValue}
  }
  /// Returns true if `theme` has been explicitly set.
  var hasTheme: Bool {return _storage._theme != nil}
  /// Clears the value of `theme`. Subsequent reads from it will return its default value.
  mutating func clearTheme() {_uniqueStorage()._theme = nil}

  var preset: TSP_Reference {
    get {return _storage._preset ?? TSP_Reference()}
    set {_uniqueStorage()._preset = newValue}
  }
  /// Returns true if `preset` has been explicitly set.
  var hasPreset: Bool {return _storage._preset != nil}
  /// Clears the value of `preset`. Subsequent reads from it will return its default value.
  mutating func clearPreset() {_uniqueStorage()._preset = nil}

  var presetKind: String {
    get {return _storage._presetKind ?? String()}
    set {_uniqueStorage()._presetKind = newValue}
  }
  /// Returns true if `presetKind` has been explicitly set.
  var hasPresetKind: Bool {return _storage._presetKind != nil}
  /// Clears the value of `presetKind`. Subsequent reads from it will return its default value.
  mutating func clearPresetKind() {_uniqueStorage()._presetKind = nil}

  var identifier: String {
    get {return _storage._identifier ?? String()}
    set {_uniqueStorage()._identifier = newValue}
  }
  /// Returns true if `identifier` has been explicitly set.
  var hasIdentifier: Bool {return _storage._identifier != nil}
  /// Clears the value of `identifier`. Subsequent reads from it will return its default value.
  mutating func clearIdentifier() {_uniqueStorage()._identifier = nil}

  var addPresetToStylesheet: Bool {
    get {return _storage._addPresetToStylesheet ?? false}
    set {_uniqueStorage()._addPresetToStylesheet = newValue}
  }
  /// Returns true if `addPresetToStylesheet` has been explicitly set.
  var hasAddPresetToStylesheet: Bool {return _storage._addPresetToStylesheet != nil}
  /// Clears the value of `addPresetToStylesheet`. Subsequent reads from it will return its default value.
  mutating func clearAddPresetToStylesheet() {_uniqueStorage()._addPresetToStylesheet = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct TSS_ThemeRemoveStylePresetCommandArchive: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _storage._super ?? TSK_CommandArchive()}
    set {_uniqueStorage()._super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return _storage._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {_uniqueStorage()._super = nil}

  var theme: TSP_Reference {
    get {return _storage._theme ?? TSP_Reference()}
    set {_uniqueStorage()._theme = newValue}
  }
  /// Returns true if `theme` has been explicitly set.
  var hasTheme: Bool {return _storage._theme != nil}
  /// Clears the value of `theme`. Subsequent reads from it will return its default value.
  mutating func clearTheme() {_uniqueStorage()._theme = nil}

  var preset: TSP_Reference {
    get {return _storage._preset ?? TSP_Reference()}
    set {_uniqueStorage()._preset = newValue}
  }
  /// Returns true if `preset` has been explicitly set.
  var hasPreset: Bool {return _storage._preset != nil}
  /// Clears the value of `preset`. Subsequent reads from it will return its default value.
  mutating func clearPreset() {_uniqueStorage()._preset = nil}

  var presetIndex: UInt32 {
    get {return _storage._presetIndex ?? 0}
    set {_uniqueStorage()._presetIndex = newValue}
  }
  /// Returns true if `presetIndex` has been explicitly set.
  var hasPresetIndex: Bool {return _storage._presetIndex != nil}
  /// Clears the value of `presetIndex`. Subsequent reads from it will return its default value.
  mutating func clearPresetIndex() {_uniqueStorage()._presetIndex = nil}

  var presetKind: String {
    get {return _storage._presetKind ?? String()}
    set {_uniqueStorage()._presetKind = newValue}
  }
  /// Returns true if `presetKind` has been explicitly set.
  var hasPresetKind: Bool {return _storage._presetKind != nil}
  /// Clears the value of `presetKind`. Subsequent reads from it will return its default value.
  mutating func clearPresetKind() {_uniqueStorage()._presetKind = nil}

  var identifier: String {
    get {return _storage._identifier ?? String()}
    set {_uniqueStorage()._identifier = newValue}
  }
  /// Returns true if `identifier` has been explicitly set.
  var hasIdentifier: Bool {return _storage._identifier != nil}
  /// Clears the value of `identifier`. Subsequent reads from it will return its default value.
  mutating func clearIdentifier() {_uniqueStorage()._identifier = nil}

  var replacementPreset: TSP_Reference {
    get {return _storage._replacementPreset ?? TSP_Reference()}
    set {_uniqueStorage()._replacementPreset = newValue}
  }
  /// Returns true if `replacementPreset` has been explicitly set.
  var hasReplacementPreset: Bool {return _storage._replacementPreset != nil}
  /// Clears the value of `replacementPreset`. Subsequent reads from it will return its default value.
  mutating func clearReplacementPreset() {_uniqueStorage()._replacementPreset = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct TSS_ThemeMovePresetCommandArchive: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _storage._super ?? TSK_CommandArchive()}
    set {_uniqueStorage()._super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return _storage._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {_uniqueStorage()._super = nil}

  var theme: TSP_Reference {
    get {return _storage._theme ?? TSP_Reference()}
    set {_uniqueStorage()._theme = newValue}
  }
  /// Returns true if `theme` has been explicitly set.
  var hasTheme: Bool {return _storage._theme != nil}
  /// Clears the value of `theme`. Subsequent reads from it will return its default value.
  mutating func clearTheme() {_uniqueStorage()._theme = nil}

  var presetID: TSP_UUID {
    get {return _storage._presetID ?? TSP_UUID()}
    set {_uniqueStorage()._presetID = newValue}
  }
  /// Returns true if `presetID` has been explicitly set.
  var hasPresetID: Bool {return _storage._presetID != nil}
  /// Clears the value of `presetID`. Subsequent reads from it will return its default value.
  mutating func clearPresetID() {_uniqueStorage()._presetID = nil}

  var newIndex: UInt32 {
    get {return _storage._newIndex ?? 0}
    set {_uniqueStorage()._newIndex = newValue}
  }
  /// Returns true if `newIndex` has been explicitly set.
  var hasNewIndex: Bool {return _storage._newIndex != nil}
  /// Clears the value of `newIndex`. Subsequent reads from it will return its default value.
  mutating func clearNewIndex() {_uniqueStorage()._newIndex = nil}

  var oldIndex: UInt32 {
    get {return _storage._oldIndex ?? 0}
    set {_uniqueStorage()._oldIndex = newValue}
  }
  /// Returns true if `oldIndex` has been explicitly set.
  var hasOldIndex: Bool {return _storage._oldIndex != nil}
  /// Clears the value of `oldIndex`. Subsequent reads from it will return its default value.
  mutating func clearOldIndex() {_uniqueStorage()._oldIndex = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct TSS_ThemeReplaceStylePresetAndDisconnectStylesCommandArchive: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSK_CommandArchive {
    get {return _storage._super ?? TSK_CommandArchive()}
    set {_uniqueStorage()._super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return _storage._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {_uniqueStorage()._super = nil}

  var preset: TSP_Reference {
    get {return _storage._preset ?? TSP_Reference()}
    set {_uniqueStorage()._preset = newValue}
  }
  /// Returns true if `preset` has been explicitly set.
  var hasPreset: Bool {return _storage._preset != nil}
  /// Clears the value of `preset`. Subsequent reads from it will return its default value.
  mutating func clearPreset() {_uniqueStorage()._preset = nil}

  var replacementPreset: TSP_Reference {
    get {return _storage._replacementPreset ?? TSP_Reference()}
    set {_uniqueStorage()._replacementPreset = newValue}
  }
  /// Returns true if `replacementPreset` has been explicitly set.
  var hasReplacementPreset: Bool {return _storage._replacementPreset != nil}
  /// Clears the value of `replacementPreset`. Subsequent reads from it will return its default value.
  mutating func clearReplacementPreset() {_uniqueStorage()._replacementPreset = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct TSS_CommandPropertyEntryArchive: SwiftProtobuf.ExtensibleMessage, Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var property: UInt32 {
    get {return _property ?? 0}
    set {_property = newValue}
  }
  /// Returns true if `property` has been explicitly set.
  var hasProperty: Bool {return self._property != nil}
  /// Clears the value of `property`. Subsequent reads from it will return its default value.
  mutating func clearProperty() {self._property = nil}

  var type: Int32 {
    get {return _type ?? 0}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var integerValue: Int32 {
    get {return _integerValue ?? 0}
    set {_integerValue = newValue}
  }
  /// Returns true if `integerValue` has been explicitly set.
  var hasIntegerValue: Bool {return self._integerValue != nil}
  /// Clears the value of `integerValue`. Subsequent reads from it will return its default value.
  mutating func clearIntegerValue() {self._integerValue = nil}

  var floatValue: Float {
    get {return _floatValue ?? 0}
    set {_floatValue = newValue}
  }
  /// Returns true if `floatValue` has been explicitly set.
  var hasFloatValue: Bool {return self._floatValue != nil}
  /// Clears the value of `floatValue`. Subsequent reads from it will return its default value.
  mutating func clearFloatValue() {self._floatValue = nil}

  var doubleValue: Double {
    get {return _doubleValue ?? 0}
    set {_doubleValue = newValue}
  }
  /// Returns true if `doubleValue` has been explicitly set.
  var hasDoubleValue: Bool {return self._doubleValue != nil}
  /// Clears the value of `doubleValue`. Subsequent reads from it will return its default value.
  mutating func clearDoubleValue() {self._doubleValue = nil}

  var stringValue: String {
    get {return _stringValue ?? String()}
    set {_stringValue = newValue}
  }
  /// Returns true if `stringValue` has been explicitly set.
  var hasStringValue: Bool {return self._stringValue != nil}
  /// Clears the value of `stringValue`. Subsequent reads from it will return its default value.
  mutating func clearStringValue() {self._stringValue = nil}

  var tspReference: TSP_Reference {
    get {return _tspReference ?? TSP_Reference()}
    set {_tspReference = newValue}
  }
  /// Returns true if `tspReference` has been explicitly set.
  var hasTspReference: Bool {return self._tspReference != nil}
  /// Clears the value of `tspReference`. Subsequent reads from it will return its default value.
  mutating func clearTspReference() {self._tspReference = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
  fileprivate var _property: UInt32? = nil
  fileprivate var _type: Int32? = nil
  fileprivate var _integerValue: Int32? = nil
  fileprivate var _floatValue: Float? = nil
  fileprivate var _doubleValue: Double? = nil
  fileprivate var _stringValue: String? = nil
  fileprivate var _tspReference: TSP_Reference? = nil
}

struct TSS_CommandPropertyMapArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var propertyEntries: [TSS_CommandPropertyEntryArchive] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Extension support defined in TSSArchives.proto.

// MARK: - Extension Properties

// Swift Extensions on the extended Messages to add easy access to the declared
// extension fields. The names are based on the extension field name from the proto
// declaration. To avoid naming collisions, the names are prefixed with the name of
// the scope where the extend directive occurs.

extension TSS_CommandPropertyEntryArchive {

  var TSS_color: TSP_Color {
    get {return getExtensionValue(ext: TSS_Extensions_color) ?? TSP_Color()}
    set {setExtensionValue(ext: TSS_Extensions_color, value: newValue)}
  }
  /// Returns true if extension `TSS_Extensions_color`
  /// has been explicitly set.
  var hasTSS_color: Bool {
    return hasExtensionValue(ext: TSS_Extensions_color)
  }
  /// Clears the value of extension `TSS_Extensions_color`.
  /// Subsequent reads from it will return its default value.
  mutating func clearTSS_color() {
    clearExtensionValue(ext: TSS_Extensions_color)
  }

}

// MARK: - File's ExtensionMap: TSS_Tssarchives_Extensions

/// A `SwiftProtobuf.SimpleExtensionMap` that includes all of the extensions defined by
/// this .proto file. It can be used any place an `SwiftProtobuf.ExtensionMap` is needed
/// in parsing, or it can be combined with other `SwiftProtobuf.SimpleExtensionMap`s to create
/// a larger `SwiftProtobuf.SimpleExtensionMap`.
let TSS_Tssarchives_Extensions: SwiftProtobuf.SimpleExtensionMap = [
  TSS_Extensions_color
]

// Extension Objects - The only reason these might be needed is when manually
// constructing a `SimpleExtensionMap`, otherwise, use the above _Extension Properties_
// accessors for the extension fields on the messages directly.

let TSS_Extensions_color = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<TSP_Color>, TSS_CommandPropertyEntryArchive>(
  _protobuf_fieldNumber: 8,
  fieldName: "TSS.color"
)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TSS"

extension TSS_ValueType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0ObjectType\0\u{1}IntType\0\u{1}FloatType\0\u{1}DoubleType\0")
}

extension TSS_PropertyType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}InvalidPropertyType\0\u{1}NullPropertyType\0\u{1}IntegerPropertyType\0\u{1}FloatPropertyType\0\u{1}DoublePropertyType\0\u{1}NSStringPropertyType\0\u{1}TSPObjectPropertyType\0")
}

extension TSS_StyleArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StyleArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}name\0\u{3}style_identifier\0\u{1}parent\0\u{3}is_variation\0\u{1}stylesheet\0")

  public var isInitialized: Bool {
    if let v = self._parent, !v.isInitialized {return false}
    if let v = self._stylesheet, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._styleIdentifier) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._parent) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self._isVariation) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._stylesheet) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._styleIdentifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._parent {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._isVariation {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._stylesheet {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSS_StyleArchive, rhs: TSS_StyleArchive) -> Bool {
    if lhs._name != rhs._name {return false}
    if lhs._styleIdentifier != rhs._styleIdentifier {return false}
    if lhs._parent != rhs._parent {return false}
    if lhs._isVariation != rhs._isVariation {return false}
    if lhs._stylesheet != rhs._stylesheet {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSS_StylesheetArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StylesheetArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}styles\0\u{3}identifier_to_style_map\0\u{1}parent\0\u{3}is_locked\0\u{3}parent_to_children_style_map\0\u{3}can_cull_styles\0\u{3}styles_for_10_0\0\u{3}styles_for_10_1\0\u{3}styles_for_10_2\0\u{3}styles_for_11_0\0\u{3}styles_for_11_1\0\u{3}styles_for_11_2\0\u{3}styles_for_12_0\0\u{3}styles_for_12_1\0\u{3}styles_for_12_2\0\u{3}styles_for_13_0\0\u{3}styles_for_13_1\0\u{3}styles_for_13_2\0\u{3}styles_for_14_0\0\u{3}styles_for_14_1\0\u{3}styles_for_14_2\0\u{3}styles_for_14_4\0")

  fileprivate class _StorageClass {
    var _styles: [TSP_Reference] = []
    var _identifierToStyleMap: [TSS_StylesheetArchive.IdentifiedStyleEntry] = []
    var _parent: TSP_Reference? = nil
    var _isLocked: Bool? = nil
    var _parentToChildrenStyleMap: [TSS_StylesheetArchive.StyleChildrenEntry] = []
    var _canCullStyles: Bool? = nil
    var _stylesFor100: TSS_StylesheetArchive.VersionedStyles? = nil
    var _stylesFor101: TSS_StylesheetArchive.VersionedStyles? = nil
    var _stylesFor102: TSS_StylesheetArchive.VersionedStyles? = nil
    var _stylesFor110: TSS_StylesheetArchive.VersionedStyles? = nil
    var _stylesFor111: TSS_StylesheetArchive.VersionedStyles? = nil
    var _stylesFor112: TSS_StylesheetArchive.VersionedStyles? = nil
    var _stylesFor120: TSS_StylesheetArchive.VersionedStyles? = nil
    var _stylesFor121: TSS_StylesheetArchive.VersionedStyles? = nil
    var _stylesFor122: TSS_StylesheetArchive.VersionedStyles? = nil
    var _stylesFor130: TSS_StylesheetArchive.VersionedStyles? = nil
    var _stylesFor131: TSS_StylesheetArchive.VersionedStyles? = nil
    var _stylesFor132: TSS_StylesheetArchive.VersionedStyles? = nil
    var _stylesFor140: TSS_StylesheetArchive.VersionedStyles? = nil
    var _stylesFor141: TSS_StylesheetArchive.VersionedStyles? = nil
    var _stylesFor142: TSS_StylesheetArchive.VersionedStyles? = nil
    var _stylesFor144: TSS_StylesheetArchive.VersionedStyles? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _styles = source._styles
      _identifierToStyleMap = source._identifierToStyleMap
      _parent = source._parent
      _isLocked = source._isLocked
      _parentToChildrenStyleMap = source._parentToChildrenStyleMap
      _canCullStyles = source._canCullStyles
      _stylesFor100 = source._stylesFor100
      _stylesFor101 = source._stylesFor101
      _stylesFor102 = source._stylesFor102
      _stylesFor110 = source._stylesFor110
      _stylesFor111 = source._stylesFor111
      _stylesFor112 = source._stylesFor112
      _stylesFor120 = source._stylesFor120
      _stylesFor121 = source._stylesFor121
      _stylesFor122 = source._stylesFor122
      _stylesFor130 = source._stylesFor130
      _stylesFor131 = source._stylesFor131
      _stylesFor132 = source._stylesFor132
      _stylesFor140 = source._stylesFor140
      _stylesFor141 = source._stylesFor141
      _stylesFor142 = source._stylesFor142
      _stylesFor144 = source._stylesFor144
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._styles) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._identifierToStyleMap) {return false}
      if let v = _storage._parent, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._parentToChildrenStyleMap) {return false}
      if let v = _storage._stylesFor100, !v.isInitialized {return false}
      if let v = _storage._stylesFor101, !v.isInitialized {return false}
      if let v = _storage._stylesFor102, !v.isInitialized {return false}
      if let v = _storage._stylesFor110, !v.isInitialized {return false}
      if let v = _storage._stylesFor111, !v.isInitialized {return false}
      if let v = _storage._stylesFor112, !v.isInitialized {return false}
      if let v = _storage._stylesFor120, !v.isInitialized {return false}
      if let v = _storage._stylesFor121, !v.isInitialized {return false}
      if let v = _storage._stylesFor122, !v.isInitialized {return false}
      if let v = _storage._stylesFor130, !v.isInitialized {return false}
      if let v = _storage._stylesFor131, !v.isInitialized {return false}
      if let v = _storage._stylesFor132, !v.isInitialized {return false}
      if let v = _storage._stylesFor140, !v.isInitialized {return false}
      if let v = _storage._stylesFor141, !v.isInitialized {return false}
      if let v = _storage._stylesFor142, !v.isInitialized {return false}
      if let v = _storage._stylesFor144, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeRepeatedMessageField(value: &_storage._styles) }()
        case 2: try { try decoder.decodeRepeatedMessageField(value: &_storage._identifierToStyleMap) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._parent) }()
        case 4: try { try decoder.decodeSingularBoolField(value: &_storage._isLocked) }()
        case 5: try { try decoder.decodeRepeatedMessageField(value: &_storage._parentToChildrenStyleMap) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._canCullStyles) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._stylesFor100) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._stylesFor101) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._stylesFor102) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._stylesFor110) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._stylesFor111) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._stylesFor112) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._stylesFor120) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._stylesFor121) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._stylesFor122) }()
        case 16: try { try decoder.decodeSingularMessageField(value: &_storage._stylesFor130) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._stylesFor131) }()
        case 18: try { try decoder.decodeSingularMessageField(value: &_storage._stylesFor132) }()
        case 19: try { try decoder.decodeSingularMessageField(value: &_storage._stylesFor140) }()
        case 20: try { try decoder.decodeSingularMessageField(value: &_storage._stylesFor141) }()
        case 21: try { try decoder.decodeSingularMessageField(value: &_storage._stylesFor142) }()
        case 22: try { try decoder.decodeSingularMessageField(value: &_storage._stylesFor144) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._styles.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._styles, fieldNumber: 1)
      }
      if !_storage._identifierToStyleMap.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._identifierToStyleMap, fieldNumber: 2)
      }
      try { if let v = _storage._parent {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._isLocked {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
      } }()
      if !_storage._parentToChildrenStyleMap.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._parentToChildrenStyleMap, fieldNumber: 5)
      }
      try { if let v = _storage._canCullStyles {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._stylesFor100 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._stylesFor101 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._stylesFor102 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._stylesFor110 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._stylesFor111 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._stylesFor112 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._stylesFor120 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._stylesFor121 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._stylesFor122 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._stylesFor130 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._stylesFor131 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._stylesFor132 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._stylesFor140 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._stylesFor141 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._stylesFor142 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._stylesFor144 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSS_StylesheetArchive, rhs: TSS_StylesheetArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._styles != rhs_storage._styles {return false}
        if _storage._identifierToStyleMap != rhs_storage._identifierToStyleMap {return false}
        if _storage._parent != rhs_storage._parent {return false}
        if _storage._isLocked != rhs_storage._isLocked {return false}
        if _storage._parentToChildrenStyleMap != rhs_storage._parentToChildrenStyleMap {return false}
        if _storage._canCullStyles != rhs_storage._canCullStyles {return false}
        if _storage._stylesFor100 != rhs_storage._stylesFor100 {return false}
        if _storage._stylesFor101 != rhs_storage._stylesFor101 {return false}
        if _storage._stylesFor102 != rhs_storage._stylesFor102 {return false}
        if _storage._stylesFor110 != rhs_storage._stylesFor110 {return false}
        if _storage._stylesFor111 != rhs_storage._stylesFor111 {return false}
        if _storage._stylesFor112 != rhs_storage._stylesFor112 {return false}
        if _storage._stylesFor120 != rhs_storage._stylesFor120 {return false}
        if _storage._stylesFor121 != rhs_storage._stylesFor121 {return false}
        if _storage._stylesFor122 != rhs_storage._stylesFor122 {return false}
        if _storage._stylesFor130 != rhs_storage._stylesFor130 {return false}
        if _storage._stylesFor131 != rhs_storage._stylesFor131 {return false}
        if _storage._stylesFor132 != rhs_storage._stylesFor132 {return false}
        if _storage._stylesFor140 != rhs_storage._stylesFor140 {return false}
        if _storage._stylesFor141 != rhs_storage._stylesFor141 {return false}
        if _storage._stylesFor142 != rhs_storage._stylesFor142 {return false}
        if _storage._stylesFor144 != rhs_storage._stylesFor144 {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSS_StylesheetArchive.IdentifiedStyleEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = TSS_StylesheetArchive.protoMessageName + ".IdentifiedStyleEntry"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}identifier\0\u{1}style\0")

  public var isInitialized: Bool {
    if self._identifier == nil {return false}
    if self._style == nil {return false}
    if let v = self._style, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._identifier) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._style) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._identifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._style {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSS_StylesheetArchive.IdentifiedStyleEntry, rhs: TSS_StylesheetArchive.IdentifiedStyleEntry) -> Bool {
    if lhs._identifier != rhs._identifier {return false}
    if lhs._style != rhs._style {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSS_StylesheetArchive.StyleChildrenEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = TSS_StylesheetArchive.protoMessageName + ".StyleChildrenEntry"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}parent\0\u{1}children\0")

  public var isInitialized: Bool {
    if self._parent == nil {return false}
    if let v = self._parent, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.children) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._parent) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.children) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._parent {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.children.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.children, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSS_StylesheetArchive.StyleChildrenEntry, rhs: TSS_StylesheetArchive.StyleChildrenEntry) -> Bool {
    if lhs._parent != rhs._parent {return false}
    if lhs.children != rhs.children {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSS_StylesheetArchive.VersionedStyles: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = TSS_StylesheetArchive.protoMessageName + ".VersionedStyles"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}styles\0\u{3}identifier_to_style_map\0\u{3}parent_to_children_style_map\0")

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.styles) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.identifierToStyleMap) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.parentToChildrenStyleMap) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.styles) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.identifierToStyleMap) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.parentToChildrenStyleMap) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.styles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.styles, fieldNumber: 1)
    }
    if !self.identifierToStyleMap.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.identifierToStyleMap, fieldNumber: 2)
    }
    if !self.parentToChildrenStyleMap.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.parentToChildrenStyleMap, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSS_StylesheetArchive.VersionedStyles, rhs: TSS_StylesheetArchive.VersionedStyles) -> Bool {
    if lhs.styles != rhs.styles {return false}
    if lhs.identifierToStyleMap != rhs.identifierToStyleMap {return false}
    if lhs.parentToChildrenStyleMap != rhs.parentToChildrenStyleMap {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSS_ThemeArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ThemeArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}legacy_stylesheet\0\u{4}\u{2}theme_identifier\0\u{3}document_stylesheet\0\u{3}old_uuids_for_preset_replacements\0\u{3}new_uuids_for_preset_replacements\0\u{4}\u{4}color_presets\0")

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    if let v = self._legacyStylesheet, !v.isInitialized {return false}
    if let v = self._documentStylesheet, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.oldUuidsForPresetReplacements) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.newUuidsForPresetReplacements) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.colorPresets) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._legacyStylesheet) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._themeIdentifier) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._documentStylesheet) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.oldUuidsForPresetReplacements) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.newUuidsForPresetReplacements) }()
      case 10: try { try decoder.decodeRepeatedMessageField(value: &self.colorPresets) }()
      case 100..<536870912:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: TSS_ThemeArchive.self, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._legacyStylesheet {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._themeIdentifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._documentStylesheet {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if !self.oldUuidsForPresetReplacements.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.oldUuidsForPresetReplacements, fieldNumber: 5)
    }
    if !self.newUuidsForPresetReplacements.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.newUuidsForPresetReplacements, fieldNumber: 6)
    }
    if !self.colorPresets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.colorPresets, fieldNumber: 10)
    }
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 536870912)
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSS_ThemeArchive, rhs: TSS_ThemeArchive) -> Bool {
    if lhs._legacyStylesheet != rhs._legacyStylesheet {return false}
    if lhs._themeIdentifier != rhs._themeIdentifier {return false}
    if lhs._documentStylesheet != rhs._documentStylesheet {return false}
    if lhs.oldUuidsForPresetReplacements != rhs.oldUuidsForPresetReplacements {return false}
    if lhs.newUuidsForPresetReplacements != rhs.newUuidsForPresetReplacements {return false}
    if lhs.colorPresets != rhs.colorPresets {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension TSS_ApplyThemeCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ApplyThemeCommandArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}super\0\u{1}commands\0\u{3}old_theme\0\u{3}new_theme\0")

  fileprivate class _StorageClass {
    var _super: TSK_CommandArchive? = nil
    var _commands: [TSP_Reference] = []
    var _oldTheme: TSP_Reference? = nil
    var _newTheme: TSP_Reference? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _super = source._super
      _commands = source._commands
      _oldTheme = source._oldTheme
      _newTheme = source._newTheme
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._super == nil {return false}
      if let v = _storage._super, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._commands) {return false}
      if let v = _storage._oldTheme, !v.isInitialized {return false}
      if let v = _storage._newTheme, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._super) }()
        case 2: try { try decoder.decodeRepeatedMessageField(value: &_storage._commands) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._oldTheme) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._newTheme) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._super {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      if !_storage._commands.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._commands, fieldNumber: 2)
      }
      try { if let v = _storage._oldTheme {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._newTheme {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSS_ApplyThemeCommandArchive, rhs: TSS_ApplyThemeCommandArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._super != rhs_storage._super {return false}
        if _storage._commands != rhs_storage._commands {return false}
        if _storage._oldTheme != rhs_storage._oldTheme {return false}
        if _storage._newTheme != rhs_storage._newTheme {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSS_ApplyThemeChildCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ApplyThemeChildCommandArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}super\0\u{1}parent\0")

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    if let v = self._parent, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._super) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._parent) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._parent {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSS_ApplyThemeChildCommandArchive, rhs: TSS_ApplyThemeChildCommandArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs._parent != rhs._parent {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSS_StyleUpdatePropertyMapCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StyleUpdatePropertyMapCommandArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}super\0\u{3}current_style\0\u{3}style_with_old_property_map\0\u{3}style_with_new_property_map\0\u{4}\u{2}notify_for_style_clients\0\u{3}style_diff\0")

  fileprivate class _StorageClass {
    var _super: TSK_CommandArchive? = nil
    var _currentStyle: TSP_Reference? = nil
    var _styleWithOldPropertyMap: TSP_Reference? = nil
    var _styleWithNewPropertyMap: TSP_Reference? = nil
    var _styleDiff: TSP_Reference? = nil
    var _notifyForStyleClients: Bool? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _super = source._super
      _currentStyle = source._currentStyle
      _styleWithOldPropertyMap = source._styleWithOldPropertyMap
      _styleWithNewPropertyMap = source._styleWithNewPropertyMap
      _styleDiff = source._styleDiff
      _notifyForStyleClients = source._notifyForStyleClients
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._super == nil {return false}
      if _storage._currentStyle == nil {return false}
      if let v = _storage._super, !v.isInitialized {return false}
      if let v = _storage._currentStyle, !v.isInitialized {return false}
      if let v = _storage._styleWithOldPropertyMap, !v.isInitialized {return false}
      if let v = _storage._styleWithNewPropertyMap, !v.isInitialized {return false}
      if let v = _storage._styleDiff, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._super) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._currentStyle) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._styleWithOldPropertyMap) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._styleWithNewPropertyMap) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._notifyForStyleClients) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._styleDiff) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._super {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._currentStyle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._styleWithOldPropertyMap {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._styleWithNewPropertyMap {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._notifyForStyleClients {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._styleDiff {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSS_StyleUpdatePropertyMapCommandArchive, rhs: TSS_StyleUpdatePropertyMapCommandArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._super != rhs_storage._super {return false}
        if _storage._currentStyle != rhs_storage._currentStyle {return false}
        if _storage._styleWithOldPropertyMap != rhs_storage._styleWithOldPropertyMap {return false}
        if _storage._styleWithNewPropertyMap != rhs_storage._styleWithNewPropertyMap {return false}
        if _storage._styleDiff != rhs_storage._styleDiff {return false}
        if _storage._notifyForStyleClients != rhs_storage._notifyForStyleClients {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSS_ThemeReplacePresetCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ThemeReplacePresetCommandArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}super\0\u{2}\u{2}preset\0\u{1}oldPreset\0\u{1}index\0")

  fileprivate class _StorageClass {
    var _super: TSK_CommandArchive? = nil
    var _preset: TSP_Reference? = nil
    var _oldPreset: TSP_Reference? = nil
    var _index: UInt32? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _super = source._super
      _preset = source._preset
      _oldPreset = source._oldPreset
      _index = source._index
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._super == nil {return false}
      if _storage._preset == nil {return false}
      if _storage._index == nil {return false}
      if let v = _storage._super, !v.isInitialized {return false}
      if let v = _storage._preset, !v.isInitialized {return false}
      if let v = _storage._oldPreset, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._super) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._preset) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._oldPreset) }()
        case 5: try { try decoder.decodeSingularUInt32Field(value: &_storage._index) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._super {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._preset {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._oldPreset {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._index {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSS_ThemeReplacePresetCommandArchive, rhs: TSS_ThemeReplacePresetCommandArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._super != rhs_storage._super {return false}
        if _storage._preset != rhs_storage._preset {return false}
        if _storage._oldPreset != rhs_storage._oldPreset {return false}
        if _storage._index != rhs_storage._index {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSS_ThemeReplaceColorPresetCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ThemeReplaceColorPresetCommandArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}super\0\u{1}theme\0\u{1}color\0\u{3}old_color\0\u{1}index\0")

  fileprivate class _StorageClass {
    var _super: TSK_CommandArchive? = nil
    var _theme: TSP_Reference? = nil
    var _color: TSP_Color? = nil
    var _oldColor: TSP_Color? = nil
    var _index: UInt32? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _super = source._super
      _theme = source._theme
      _color = source._color
      _oldColor = source._oldColor
      _index = source._index
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._super == nil {return false}
      if _storage._theme == nil {return false}
      if _storage._color == nil {return false}
      if _storage._oldColor == nil {return false}
      if _storage._index == nil {return false}
      if let v = _storage._super, !v.isInitialized {return false}
      if let v = _storage._theme, !v.isInitialized {return false}
      if let v = _storage._color, !v.isInitialized {return false}
      if let v = _storage._oldColor, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._super) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._theme) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._color) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._oldColor) }()
        case 5: try { try decoder.decodeSingularUInt32Field(value: &_storage._index) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._super {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._theme {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._color {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._oldColor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._index {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSS_ThemeReplaceColorPresetCommandArchive, rhs: TSS_ThemeReplaceColorPresetCommandArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._super != rhs_storage._super {return false}
        if _storage._theme != rhs_storage._theme {return false}
        if _storage._color != rhs_storage._color {return false}
        if _storage._oldColor != rhs_storage._oldColor {return false}
        if _storage._index != rhs_storage._index {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSS_ThemeAddStylePresetCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ThemeAddStylePresetCommandArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}super\0\u{1}theme\0\u{1}preset\0\u{3}preset_kind\0\u{1}identifier\0\u{3}add_preset_to_stylesheet\0")

  fileprivate class _StorageClass {
    var _super: TSK_CommandArchive? = nil
    var _theme: TSP_Reference? = nil
    var _preset: TSP_Reference? = nil
    var _presetKind: String? = nil
    var _identifier: String? = nil
    var _addPresetToStylesheet: Bool? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _super = source._super
      _theme = source._theme
      _preset = source._preset
      _presetKind = source._presetKind
      _identifier = source._identifier
      _addPresetToStylesheet = source._addPresetToStylesheet
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._super == nil {return false}
      if _storage._theme == nil {return false}
      if _storage._preset == nil {return false}
      if _storage._presetKind == nil {return false}
      if let v = _storage._super, !v.isInitialized {return false}
      if let v = _storage._theme, !v.isInitialized {return false}
      if let v = _storage._preset, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._super) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._theme) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._preset) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._presetKind) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._identifier) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._addPresetToStylesheet) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._super {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._theme {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._preset {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._presetKind {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._identifier {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._addPresetToStylesheet {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSS_ThemeAddStylePresetCommandArchive, rhs: TSS_ThemeAddStylePresetCommandArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._super != rhs_storage._super {return false}
        if _storage._theme != rhs_storage._theme {return false}
        if _storage._preset != rhs_storage._preset {return false}
        if _storage._presetKind != rhs_storage._presetKind {return false}
        if _storage._identifier != rhs_storage._identifier {return false}
        if _storage._addPresetToStylesheet != rhs_storage._addPresetToStylesheet {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSS_ThemeRemoveStylePresetCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ThemeRemoveStylePresetCommandArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}super\0\u{1}theme\0\u{1}preset\0\u{3}preset_index\0\u{3}preset_kind\0\u{1}identifier\0\u{3}replacement_preset\0")

  fileprivate class _StorageClass {
    var _super: TSK_CommandArchive? = nil
    var _theme: TSP_Reference? = nil
    var _preset: TSP_Reference? = nil
    var _presetIndex: UInt32? = nil
    var _presetKind: String? = nil
    var _identifier: String? = nil
    var _replacementPreset: TSP_Reference? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _super = source._super
      _theme = source._theme
      _preset = source._preset
      _presetIndex = source._presetIndex
      _presetKind = source._presetKind
      _identifier = source._identifier
      _replacementPreset = source._replacementPreset
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._super == nil {return false}
      if _storage._theme == nil {return false}
      if _storage._preset == nil {return false}
      if _storage._presetIndex == nil {return false}
      if _storage._presetKind == nil {return false}
      if let v = _storage._super, !v.isInitialized {return false}
      if let v = _storage._theme, !v.isInitialized {return false}
      if let v = _storage._preset, !v.isInitialized {return false}
      if let v = _storage._replacementPreset, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._super) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._theme) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._preset) }()
        case 4: try { try decoder.decodeSingularUInt32Field(value: &_storage._presetIndex) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._presetKind) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._identifier) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._replacementPreset) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._super {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._theme {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._preset {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._presetIndex {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._presetKind {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._identifier {
        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._replacementPreset {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSS_ThemeRemoveStylePresetCommandArchive, rhs: TSS_ThemeRemoveStylePresetCommandArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._super != rhs_storage._super {return false}
        if _storage._theme != rhs_storage._theme {return false}
        if _storage._preset != rhs_storage._preset {return false}
        if _storage._presetIndex != rhs_storage._presetIndex {return false}
        if _storage._presetKind != rhs_storage._presetKind {return false}
        if _storage._identifier != rhs_storage._identifier {return false}
        if _storage._replacementPreset != rhs_storage._replacementPreset {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSS_ThemeMovePresetCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ThemeMovePresetCommandArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}super\0\u{1}theme\0\u{3}preset_id\0\u{3}new_index\0\u{3}old_index\0")

  fileprivate class _StorageClass {
    var _super: TSK_CommandArchive? = nil
    var _theme: TSP_Reference? = nil
    var _presetID: TSP_UUID? = nil
    var _newIndex: UInt32? = nil
    var _oldIndex: UInt32? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _super = source._super
      _theme = source._theme
      _presetID = source._presetID
      _newIndex = source._newIndex
      _oldIndex = source._oldIndex
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._super == nil {return false}
      if _storage._theme == nil {return false}
      if _storage._presetID == nil {return false}
      if _storage._newIndex == nil {return false}
      if _storage._oldIndex == nil {return false}
      if let v = _storage._super, !v.isInitialized {return false}
      if let v = _storage._theme, !v.isInitialized {return false}
      if let v = _storage._presetID, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._super) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._theme) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._presetID) }()
        case 4: try { try decoder.decodeSingularUInt32Field(value: &_storage._newIndex) }()
        case 5: try { try decoder.decodeSingularUInt32Field(value: &_storage._oldIndex) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._super {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._theme {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._presetID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._newIndex {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._oldIndex {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSS_ThemeMovePresetCommandArchive, rhs: TSS_ThemeMovePresetCommandArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._super != rhs_storage._super {return false}
        if _storage._theme != rhs_storage._theme {return false}
        if _storage._presetID != rhs_storage._presetID {return false}
        if _storage._newIndex != rhs_storage._newIndex {return false}
        if _storage._oldIndex != rhs_storage._oldIndex {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSS_ThemeReplaceStylePresetAndDisconnectStylesCommandArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ThemeReplaceStylePresetAndDisconnectStylesCommandArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}super\0\u{1}preset\0\u{3}replacement_preset\0")

  fileprivate class _StorageClass {
    var _super: TSK_CommandArchive? = nil
    var _preset: TSP_Reference? = nil
    var _replacementPreset: TSP_Reference? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _super = source._super
      _preset = source._preset
      _replacementPreset = source._replacementPreset
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._super == nil {return false}
      if _storage._preset == nil {return false}
      if _storage._replacementPreset == nil {return false}
      if let v = _storage._super, !v.isInitialized {return false}
      if let v = _storage._preset, !v.isInitialized {return false}
      if let v = _storage._replacementPreset, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._super) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._preset) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._replacementPreset) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._super {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._preset {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._replacementPreset {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSS_ThemeReplaceStylePresetAndDisconnectStylesCommandArchive, rhs: TSS_ThemeReplaceStylePresetAndDisconnectStylesCommandArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._super != rhs_storage._super {return false}
        if _storage._preset != rhs_storage._preset {return false}
        if _storage._replacementPreset != rhs_storage._replacementPreset {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TSS_CommandPropertyEntryArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandPropertyEntryArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}property\0\u{1}type\0\u{3}integer_value\0\u{3}float_value\0\u{3}double_value\0\u{3}string_value\0\u{3}tsp_reference\0")

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    if self._property == nil {return false}
    if self._type == nil {return false}
    if let v = self._tspReference, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._property) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._type) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self._integerValue) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self._floatValue) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self._doubleValue) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._stringValue) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._tspReference) }()
      case 8..<2001:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: TSS_CommandPropertyEntryArchive.self, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._property {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._type {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._integerValue {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._floatValue {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._doubleValue {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._stringValue {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._tspReference {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 8, end: 2001)
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSS_CommandPropertyEntryArchive, rhs: TSS_CommandPropertyEntryArchive) -> Bool {
    if lhs._property != rhs._property {return false}
    if lhs._type != rhs._type {return false}
    if lhs._integerValue != rhs._integerValue {return false}
    if lhs._floatValue != rhs._floatValue {return false}
    if lhs._doubleValue != rhs._doubleValue {return false}
    if lhs._stringValue != rhs._stringValue {return false}
    if lhs._tspReference != rhs._tspReference {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension TSS_CommandPropertyMapArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommandPropertyMapArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}property_entries\0")

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.propertyEntries) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.propertyEntries) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.propertyEntries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.propertyEntries, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TSS_CommandPropertyMapArchive, rhs: TSS_CommandPropertyMapArchive) -> Bool {
    if lhs.propertyEntries != rhs.propertyEntries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
