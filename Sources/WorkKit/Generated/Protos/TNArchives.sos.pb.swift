// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: TNArchives.sos.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct TNSOS_SheetStylePropertyChangeSetArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var fill: TSDSOS_SpecFillArchive {
    get {return _fill ?? TSDSOS_SpecFillArchive()}
    set {_fill = newValue}
  }
  /// Returns true if `fill` has been explicitly set.
  var hasFill: Bool {return self._fill != nil}
  /// Clears the value of `fill`. Subsequent reads from it will return its default value.
  mutating func clearFill() {self._fill = nil}

  var fillUndefined: Bool {
    get {return _fillUndefined ?? false}
    set {_fillUndefined = newValue}
  }
  /// Returns true if `fillUndefined` has been explicitly set.
  var hasFillUndefined: Bool {return self._fillUndefined != nil}
  /// Clears the value of `fillUndefined`. Subsequent reads from it will return its default value.
  mutating func clearFillUndefined() {self._fillUndefined = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _fill: TSDSOS_SpecFillArchive? = nil
  fileprivate var _fillUndefined: Bool? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TNSOS"

extension TNSOS_SheetStylePropertyChangeSetArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SheetStylePropertyChangeSetArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}fill\0\u{3}fill_undefined\0")

  public var isInitialized: Bool {
    if let v = self._fill, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._fill) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._fillUndefined) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._fill {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._fillUndefined {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TNSOS_SheetStylePropertyChangeSetArchive, rhs: TNSOS_SheetStylePropertyChangeSetArchive) -> Bool {
    if lhs._fill != rhs._fill {return false}
    if lhs._fillUndefined != rhs._fillUndefined {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
