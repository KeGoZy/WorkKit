// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: TPArchives.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum TP_ViewScaleMode: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
  case userDefined = 0
  case fitWidth = 1
  case firPage = 2

  init() {
    self = .userDefined
  }

}

enum TP_ViewScaleModeiOS: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
  case undefined = 0
  case userDefined = 1
  case fitWidth = 2
  case fitMinimum = 3
  case fitPortraitWidth = 4

  init() {
    self = .undefined
  }

}

enum TP_PageViewState: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
  case oneUp = 0
  case twoUp = 1

  init() {
    self = .oneUp
  }

}

struct TP_DocumentArchive: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSA_DocumentArchive {
    get {return _storage._super ?? TSA_DocumentArchive()}
    set {_uniqueStorage()._super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return _storage._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {_uniqueStorage()._super = nil}

  var stylesheet: TSP_Reference {
    get {return _storage._stylesheet ?? TSP_Reference()}
    set {_uniqueStorage()._stylesheet = newValue}
  }
  /// Returns true if `stylesheet` has been explicitly set.
  var hasStylesheet: Bool {return _storage._stylesheet != nil}
  /// Clears the value of `stylesheet`. Subsequent reads from it will return its default value.
  mutating func clearStylesheet() {_uniqueStorage()._stylesheet = nil}

  var floatingDrawables: TSP_Reference {
    get {return _storage._floatingDrawables ?? TSP_Reference()}
    set {_uniqueStorage()._floatingDrawables = newValue}
  }
  /// Returns true if `floatingDrawables` has been explicitly set.
  var hasFloatingDrawables: Bool {return _storage._floatingDrawables != nil}
  /// Clears the value of `floatingDrawables`. Subsequent reads from it will return its default value.
  mutating func clearFloatingDrawables() {_uniqueStorage()._floatingDrawables = nil}

  var bodyStorage: TSP_Reference {
    get {return _storage._bodyStorage ?? TSP_Reference()}
    set {_uniqueStorage()._bodyStorage = newValue}
  }
  /// Returns true if `bodyStorage` has been explicitly set.
  var hasBodyStorage: Bool {return _storage._bodyStorage != nil}
  /// Clears the value of `bodyStorage`. Subsequent reads from it will return its default value.
  mutating func clearBodyStorage() {_uniqueStorage()._bodyStorage = nil}

  var section: TSP_Reference {
    get {return _storage._section ?? TSP_Reference()}
    set {_uniqueStorage()._section = newValue}
  }
  /// Returns true if `section` has been explicitly set.
  var hasSection: Bool {return _storage._section != nil}
  /// Clears the value of `section`. Subsequent reads from it will return its default value.
  mutating func clearSection() {_uniqueStorage()._section = nil}

  var theme: TSP_Reference {
    get {return _storage._theme ?? TSP_Reference()}
    set {_uniqueStorage()._theme = newValue}
  }
  /// Returns true if `theme` has been explicitly set.
  var hasTheme: Bool {return _storage._theme != nil}
  /// Clears the value of `theme`. Subsequent reads from it will return its default value.
  mutating func clearTheme() {_uniqueStorage()._theme = nil}

  var settings: TSP_Reference {
    get {return _storage._settings ?? TSP_Reference()}
    set {_uniqueStorage()._settings = newValue}
  }
  /// Returns true if `settings` has been explicitly set.
  var hasSettings: Bool {return _storage._settings != nil}
  /// Clears the value of `settings`. Subsequent reads from it will return its default value.
  mutating func clearSettings() {_uniqueStorage()._settings = nil}

  var deprecatedLayoutState: TSP_Reference {
    get {return _storage._deprecatedLayoutState ?? TSP_Reference()}
    set {_uniqueStorage()._deprecatedLayoutState = newValue}
  }
  /// Returns true if `deprecatedLayoutState` has been explicitly set.
  var hasDeprecatedLayoutState: Bool {return _storage._deprecatedLayoutState != nil}
  /// Clears the value of `deprecatedLayoutState`. Subsequent reads from it will return its default value.
  mutating func clearDeprecatedLayoutState() {_uniqueStorage()._deprecatedLayoutState = nil}

  var deprecatedViewState: TSP_Reference {
    get {return _storage._deprecatedViewState ?? TSP_Reference()}
    set {_uniqueStorage()._deprecatedViewState = newValue}
  }
  /// Returns true if `deprecatedViewState` has been explicitly set.
  var hasDeprecatedViewState: Bool {return _storage._deprecatedViewState != nil}
  /// Clears the value of `deprecatedViewState`. Subsequent reads from it will return its default value.
  mutating func clearDeprecatedViewState() {_uniqueStorage()._deprecatedViewState = nil}

  var citationRecords: [TSP_Reference] {
    get {return _storage._citationRecords}
    set {_uniqueStorage()._citationRecords = newValue}
  }

  var tocStyles: [TSP_Reference] {
    get {return _storage._tocStyles}
    set {_uniqueStorage()._tocStyles = newValue}
  }

  var changeSessions: [TSP_Reference] {
    get {return _storage._changeSessions}
    set {_uniqueStorage()._changeSessions = newValue}
  }

  var mostRecentChangeSession: TSP_Reference {
    get {return _storage._mostRecentChangeSession ?? TSP_Reference()}
    set {_uniqueStorage()._mostRecentChangeSession = newValue}
  }
  /// Returns true if `mostRecentChangeSession` has been explicitly set.
  var hasMostRecentChangeSession: Bool {return _storage._mostRecentChangeSession != nil}
  /// Clears the value of `mostRecentChangeSession`. Subsequent reads from it will return its default value.
  mutating func clearMostRecentChangeSession() {_uniqueStorage()._mostRecentChangeSession = nil}

  var drawablesZorder: TSP_Reference {
    get {return _storage._drawablesZorder ?? TSP_Reference()}
    set {_uniqueStorage()._drawablesZorder = newValue}
  }
  /// Returns true if `drawablesZorder` has been explicitly set.
  var hasDrawablesZorder: Bool {return _storage._drawablesZorder != nil}
  /// Clears the value of `drawablesZorder`. Subsequent reads from it will return its default value.
  mutating func clearDrawablesZorder() {_uniqueStorage()._drawablesZorder = nil}

  var usesSingleHeaderFooter: Bool {
    get {return _storage._usesSingleHeaderFooter ?? false}
    set {_uniqueStorage()._usesSingleHeaderFooter = newValue}
  }
  /// Returns true if `usesSingleHeaderFooter` has been explicitly set.
  var hasUsesSingleHeaderFooter: Bool {return _storage._usesSingleHeaderFooter != nil}
  /// Clears the value of `usesSingleHeaderFooter`. Subsequent reads from it will return its default value.
  mutating func clearUsesSingleHeaderFooter() {_uniqueStorage()._usesSingleHeaderFooter = nil}

  var pageWidth: Float {
    get {return _storage._pageWidth ?? 0}
    set {_uniqueStorage()._pageWidth = newValue}
  }
  /// Returns true if `pageWidth` has been explicitly set.
  var hasPageWidth: Bool {return _storage._pageWidth != nil}
  /// Clears the value of `pageWidth`. Subsequent reads from it will return its default value.
  mutating func clearPageWidth() {_uniqueStorage()._pageWidth = nil}

  var pageHeight: Float {
    get {return _storage._pageHeight ?? 0}
    set {_uniqueStorage()._pageHeight = newValue}
  }
  /// Returns true if `pageHeight` has been explicitly set.
  var hasPageHeight: Bool {return _storage._pageHeight != nil}
  /// Clears the value of `pageHeight`. Subsequent reads from it will return its default value.
  mutating func clearPageHeight() {_uniqueStorage()._pageHeight = nil}

  var leftMargin: Float {
    get {return _storage._leftMargin ?? 0}
    set {_uniqueStorage()._leftMargin = newValue}
  }
  /// Returns true if `leftMargin` has been explicitly set.
  var hasLeftMargin: Bool {return _storage._leftMargin != nil}
  /// Clears the value of `leftMargin`. Subsequent reads from it will return its default value.
  mutating func clearLeftMargin() {_uniqueStorage()._leftMargin = nil}

  var rightMargin: Float {
    get {return _storage._rightMargin ?? 0}
    set {_uniqueStorage()._rightMargin = newValue}
  }
  /// Returns true if `rightMargin` has been explicitly set.
  var hasRightMargin: Bool {return _storage._rightMargin != nil}
  /// Clears the value of `rightMargin`. Subsequent reads from it will return its default value.
  mutating func clearRightMargin() {_uniqueStorage()._rightMargin = nil}

  var topMargin: Float {
    get {return _storage._topMargin ?? 0}
    set {_uniqueStorage()._topMargin = newValue}
  }
  /// Returns true if `topMargin` has been explicitly set.
  var hasTopMargin: Bool {return _storage._topMargin != nil}
  /// Clears the value of `topMargin`. Subsequent reads from it will return its default value.
  mutating func clearTopMargin() {_uniqueStorage()._topMargin = nil}

  var bottomMargin: Float {
    get {return _storage._bottomMargin ?? 0}
    set {_uniqueStorage()._bottomMargin = newValue}
  }
  /// Returns true if `bottomMargin` has been explicitly set.
  var hasBottomMargin: Bool {return _storage._bottomMargin != nil}
  /// Clears the value of `bottomMargin`. Subsequent reads from it will return its default value.
  mutating func clearBottomMargin() {_uniqueStorage()._bottomMargin = nil}

  var headerMargin: Float {
    get {return _storage._headerMargin ?? 0}
    set {_uniqueStorage()._headerMargin = newValue}
  }
  /// Returns true if `headerMargin` has been explicitly set.
  var hasHeaderMargin: Bool {return _storage._headerMargin != nil}
  /// Clears the value of `headerMargin`. Subsequent reads from it will return its default value.
  mutating func clearHeaderMargin() {_uniqueStorage()._headerMargin = nil}

  var footerMargin: Float {
    get {return _storage._footerMargin ?? 0}
    set {_uniqueStorage()._footerMargin = newValue}
  }
  /// Returns true if `footerMargin` has been explicitly set.
  var hasFooterMargin: Bool {return _storage._footerMargin != nil}
  /// Clears the value of `footerMargin`. Subsequent reads from it will return its default value.
  mutating func clearFooterMargin() {_uniqueStorage()._footerMargin = nil}

  var pageScale: Float {
    get {return _storage._pageScale ?? 0}
    set {_uniqueStorage()._pageScale = newValue}
  }
  /// Returns true if `pageScale` has been explicitly set.
  var hasPageScale: Bool {return _storage._pageScale != nil}
  /// Clears the value of `pageScale`. Subsequent reads from it will return its default value.
  mutating func clearPageScale() {_uniqueStorage()._pageScale = nil}

  var laysOutBodyVertically: Bool {
    get {return _storage._laysOutBodyVertically ?? false}
    set {_uniqueStorage()._laysOutBodyVertically = newValue}
  }
  /// Returns true if `laysOutBodyVertically` has been explicitly set.
  var hasLaysOutBodyVertically: Bool {return _storage._laysOutBodyVertically != nil}
  /// Clears the value of `laysOutBodyVertically`. Subsequent reads from it will return its default value.
  mutating func clearLaysOutBodyVertically() {_uniqueStorage()._laysOutBodyVertically = nil}

  var changeTrackingEnabled: Bool {
    get {return _storage._changeTrackingEnabled ?? false}
    set {_uniqueStorage()._changeTrackingEnabled = newValue}
  }
  /// Returns true if `changeTrackingEnabled` has been explicitly set.
  var hasChangeTrackingEnabled: Bool {return _storage._changeTrackingEnabled != nil}
  /// Clears the value of `changeTrackingEnabled`. Subsequent reads from it will return its default value.
  mutating func clearChangeTrackingEnabled() {_uniqueStorage()._changeTrackingEnabled = nil}

  var tablesCustomFormatList: TSP_Reference {
    get {return _storage._tablesCustomFormatList ?? TSP_Reference()}
    set {_uniqueStorage()._tablesCustomFormatList = newValue}
  }
  /// Returns true if `tablesCustomFormatList` has been explicitly set.
  var hasTablesCustomFormatList: Bool {return _storage._tablesCustomFormatList != nil}
  /// Clears the value of `tablesCustomFormatList`. Subsequent reads from it will return its default value.
  mutating func clearTablesCustomFormatList() {_uniqueStorage()._tablesCustomFormatList = nil}

  var orientation: UInt32 {
    get {return _storage._orientation ?? 0}
    set {_uniqueStorage()._orientation = newValue}
  }
  /// Returns true if `orientation` has been explicitly set.
  var hasOrientation: Bool {return _storage._orientation != nil}
  /// Clears the value of `orientation`. Subsequent reads from it will return its default value.
  mutating func clearOrientation() {_uniqueStorage()._orientation = nil}

  var printerID: String {
    get {return _storage._printerID ?? String()}
    set {_uniqueStorage()._printerID = newValue}
  }
  /// Returns true if `printerID` has been explicitly set.
  var hasPrinterID: Bool {return _storage._printerID != nil}
  /// Clears the value of `printerID`. Subsequent reads from it will return its default value.
  mutating func clearPrinterID() {_uniqueStorage()._printerID = nil}

  var paperID: String {
    get {return _storage._paperID ?? String()}
    set {_uniqueStorage()._paperID = newValue}
  }
  /// Returns true if `paperID` has been explicitly set.
  var hasPaperID: Bool {return _storage._paperID != nil}
  /// Clears the value of `paperID`. Subsequent reads from it will return its default value.
  mutating func clearPaperID() {_uniqueStorage()._paperID = nil}

  var equationEnvironment: TSP_DataReference {
    get {return _storage._equationEnvironment ?? TSP_DataReference()}
    set {_uniqueStorage()._equationEnvironment = newValue}
  }
  /// Returns true if `equationEnvironment` has been explicitly set.
  var hasEquationEnvironment: Bool {return _storage._equationEnvironment != nil}
  /// Clears the value of `equationEnvironment`. Subsequent reads from it will return its default value.
  mutating func clearEquationEnvironment() {_uniqueStorage()._equationEnvironment = nil}

  var showInBookmarksListParagraphStylesPropertyInitialized: Bool {
    get {return _storage._showInBookmarksListParagraphStylesPropertyInitialized ?? false}
    set {_uniqueStorage()._showInBookmarksListParagraphStylesPropertyInitialized = newValue}
  }
  /// Returns true if `showInBookmarksListParagraphStylesPropertyInitialized` has been explicitly set.
  var hasShowInBookmarksListParagraphStylesPropertyInitialized: Bool {return _storage._showInBookmarksListParagraphStylesPropertyInitialized != nil}
  /// Clears the value of `showInBookmarksListParagraphStylesPropertyInitialized`. Subsequent reads from it will return its default value.
  mutating func clearShowInBookmarksListParagraphStylesPropertyInitialized() {_uniqueStorage()._showInBookmarksListParagraphStylesPropertyInitialized = nil}

  var flowInfoContainer: TSP_Reference {
    get {return _storage._flowInfoContainer ?? TSP_Reference()}
    set {_uniqueStorage()._flowInfoContainer = newValue}
  }
  /// Returns true if `flowInfoContainer` has been explicitly set.
  var hasFlowInfoContainer: Bool {return _storage._flowInfoContainer != nil}
  /// Clears the value of `flowInfoContainer`. Subsequent reads from it will return its default value.
  mutating func clearFlowInfoContainer() {_uniqueStorage()._flowInfoContainer = nil}

  var pageTemplates: [TSP_Reference] {
    get {return _storage._pageTemplates}
    set {_uniqueStorage()._pageTemplates = newValue}
  }

  var shouldUseAnchoredDrawableWrapSlop: Bool {
    get {return _storage._shouldUseAnchoredDrawableWrapSlop ?? false}
    set {_uniqueStorage()._shouldUseAnchoredDrawableWrapSlop = newValue}
  }
  /// Returns true if `shouldUseAnchoredDrawableWrapSlop` has been explicitly set.
  var hasShouldUseAnchoredDrawableWrapSlop: Bool {return _storage._shouldUseAnchoredDrawableWrapSlop != nil}
  /// Clears the value of `shouldUseAnchoredDrawableWrapSlop`. Subsequent reads from it will return its default value.
  mutating func clearShouldUseAnchoredDrawableWrapSlop() {_uniqueStorage()._shouldUseAnchoredDrawableWrapSlop = nil}

  var mergeData: TSP_Reference {
    get {return _storage._mergeData ?? TSP_Reference()}
    set {_uniqueStorage()._mergeData = newValue}
  }
  /// Returns true if `mergeData` has been explicitly set.
  var hasMergeData: Bool {return _storage._mergeData != nil}
  /// Clears the value of `mergeData`. Subsequent reads from it will return its default value.
  mutating func clearMergeData() {_uniqueStorage()._mergeData = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct TP_ThemeArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSS_ThemeArchive {
    get {return _super ?? TSS_ThemeArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSS_ThemeArchive? = nil
}

struct TP_SettingsArchive: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var body: Bool {
    get {return _storage._body ?? true}
    set {_uniqueStorage()._body = newValue}
  }
  /// Returns true if `body` has been explicitly set.
  var hasBody: Bool {return _storage._body != nil}
  /// Clears the value of `body`. Subsequent reads from it will return its default value.
  mutating func clearBody() {_uniqueStorage()._body = nil}

  var headers: Bool {
    get {return _storage._headers ?? true}
    set {_uniqueStorage()._headers = newValue}
  }
  /// Returns true if `headers` has been explicitly set.
  var hasHeaders: Bool {return _storage._headers != nil}
  /// Clears the value of `headers`. Subsequent reads from it will return its default value.
  mutating func clearHeaders() {_uniqueStorage()._headers = nil}

  var footers: Bool {
    get {return _storage._footers ?? true}
    set {_uniqueStorage()._footers = newValue}
  }
  /// Returns true if `footers` has been explicitly set.
  var hasFooters: Bool {return _storage._footers != nil}
  /// Clears the value of `footers`. Subsequent reads from it will return its default value.
  mutating func clearFooters() {_uniqueStorage()._footers = nil}

  var preview: Bool {
    get {return _storage._preview ?? true}
    set {_uniqueStorage()._preview = newValue}
  }
  /// Returns true if `preview` has been explicitly set.
  var hasPreview: Bool {return _storage._preview != nil}
  /// Clears the value of `preview`. Subsequent reads from it will return its default value.
  mutating func clearPreview() {_uniqueStorage()._preview = nil}

  var copyMovies: Bool {
    get {return _storage._copyMovies ?? true}
    set {_uniqueStorage()._copyMovies = newValue}
  }
  /// Returns true if `copyMovies` has been explicitly set.
  var hasCopyMovies: Bool {return _storage._copyMovies != nil}
  /// Clears the value of `copyMovies`. Subsequent reads from it will return its default value.
  mutating func clearCopyMovies() {_uniqueStorage()._copyMovies = nil}

  var copyAssets: Bool {
    get {return _storage._copyAssets ?? true}
    set {_uniqueStorage()._copyAssets = newValue}
  }
  /// Returns true if `copyAssets` has been explicitly set.
  var hasCopyAssets: Bool {return _storage._copyAssets != nil}
  /// Clears the value of `copyAssets`. Subsequent reads from it will return its default value.
  mutating func clearCopyAssets() {_uniqueStorage()._copyAssets = nil}

  var placeholderAuthoring: Bool {
    get {return _storage._placeholderAuthoring ?? false}
    set {_uniqueStorage()._placeholderAuthoring = newValue}
  }
  /// Returns true if `placeholderAuthoring` has been explicitly set.
  var hasPlaceholderAuthoring: Bool {return _storage._placeholderAuthoring != nil}
  /// Clears the value of `placeholderAuthoring`. Subsequent reads from it will return its default value.
  mutating func clearPlaceholderAuthoring() {_uniqueStorage()._placeholderAuthoring = nil}

  var linksEnabled: Bool {
    get {return _storage._linksEnabled ?? true}
    set {_uniqueStorage()._linksEnabled = newValue}
  }
  /// Returns true if `linksEnabled` has been explicitly set.
  var hasLinksEnabled: Bool {return _storage._linksEnabled != nil}
  /// Clears the value of `linksEnabled`. Subsequent reads from it will return its default value.
  mutating func clearLinksEnabled() {_uniqueStorage()._linksEnabled = nil}

  var hyphenation: Bool {
    get {return _storage._hyphenation ?? false}
    set {_uniqueStorage()._hyphenation = newValue}
  }
  /// Returns true if `hyphenation` has been explicitly set.
  var hasHyphenation: Bool {return _storage._hyphenation != nil}
  /// Clears the value of `hyphenation`. Subsequent reads from it will return its default value.
  mutating func clearHyphenation() {_uniqueStorage()._hyphenation = nil}

  var useLigatures: Bool {
    get {return _storage._useLigatures ?? false}
    set {_uniqueStorage()._useLigatures = newValue}
  }
  /// Returns true if `useLigatures` has been explicitly set.
  var hasUseLigatures: Bool {return _storage._useLigatures != nil}
  /// Clears the value of `useLigatures`. Subsequent reads from it will return its default value.
  mutating func clearUseLigatures() {_uniqueStorage()._useLigatures = nil}

  var tocLinksEnabled: Bool {
    get {return _storage._tocLinksEnabled ?? false}
    set {_uniqueStorage()._tocLinksEnabled = newValue}
  }
  /// Returns true if `tocLinksEnabled` has been explicitly set.
  var hasTocLinksEnabled: Bool {return _storage._tocLinksEnabled != nil}
  /// Clears the value of `tocLinksEnabled`. Subsequent reads from it will return its default value.
  mutating func clearTocLinksEnabled() {_uniqueStorage()._tocLinksEnabled = nil}

  var showCtMarkup: Bool {
    get {return _storage._showCtMarkup ?? true}
    set {_uniqueStorage()._showCtMarkup = newValue}
  }
  /// Returns true if `showCtMarkup` has been explicitly set.
  var hasShowCtMarkup: Bool {return _storage._showCtMarkup != nil}
  /// Clears the value of `showCtMarkup`. Subsequent reads from it will return its default value.
  mutating func clearShowCtMarkup() {_uniqueStorage()._showCtMarkup = nil}

  var showCtDeletions: Bool {
    get {return _storage._showCtDeletions ?? true}
    set {_uniqueStorage()._showCtDeletions = newValue}
  }
  /// Returns true if `showCtDeletions` has been explicitly set.
  var hasShowCtDeletions: Bool {return _storage._showCtDeletions != nil}
  /// Clears the value of `showCtDeletions`. Subsequent reads from it will return its default value.
  mutating func clearShowCtDeletions() {_uniqueStorage()._showCtDeletions = nil}

  var ctBubblesVisibility: Int32 {
    get {return _storage._ctBubblesVisibility ?? 0}
    set {_uniqueStorage()._ctBubblesVisibility = newValue}
  }
  /// Returns true if `ctBubblesVisibility` has been explicitly set.
  var hasCtBubblesVisibility: Bool {return _storage._ctBubblesVisibility != nil}
  /// Clears the value of `ctBubblesVisibility`. Subsequent reads from it will return its default value.
  mutating func clearCtBubblesVisibility() {_uniqueStorage()._ctBubblesVisibility = nil}

  var changeBarsVisible: Bool {
    get {return _storage._changeBarsVisible ?? true}
    set {_uniqueStorage()._changeBarsVisible = newValue}
  }
  /// Returns true if `changeBarsVisible` has been explicitly set.
  var hasChangeBarsVisible: Bool {return _storage._changeBarsVisible != nil}
  /// Clears the value of `changeBarsVisible`. Subsequent reads from it will return its default value.
  mutating func clearChangeBarsVisible() {_uniqueStorage()._changeBarsVisible = nil}

  var formatChangesVisible: Bool {
    get {return _storage._formatChangesVisible ?? true}
    set {_uniqueStorage()._formatChangesVisible = newValue}
  }
  /// Returns true if `formatChangesVisible` has been explicitly set.
  var hasFormatChangesVisible: Bool {return _storage._formatChangesVisible != nil}
  /// Clears the value of `formatChangesVisible`. Subsequent reads from it will return its default value.
  mutating func clearFormatChangesVisible() {_uniqueStorage()._formatChangesVisible = nil}

  var annotationsVisible: Bool {
    get {return _storage._annotationsVisible ?? true}
    set {_uniqueStorage()._annotationsVisible = newValue}
  }
  /// Returns true if `annotationsVisible` has been explicitly set.
  var hasAnnotationsVisible: Bool {return _storage._annotationsVisible != nil}
  /// Clears the value of `annotationsVisible`. Subsequent reads from it will return its default value.
  mutating func clearAnnotationsVisible() {_uniqueStorage()._annotationsVisible = nil}

  var documentIsRtl: Bool {
    get {return _storage._documentIsRtl ?? false}
    set {_uniqueStorage()._documentIsRtl = newValue}
  }
  /// Returns true if `documentIsRtl` has been explicitly set.
  var hasDocumentIsRtl: Bool {return _storage._documentIsRtl != nil}
  /// Clears the value of `documentIsRtl`. Subsequent reads from it will return its default value.
  mutating func clearDocumentIsRtl() {_uniqueStorage()._documentIsRtl = nil}

  var decimalTab: String {
    get {return _storage._decimalTab ?? String()}
    set {_uniqueStorage()._decimalTab = newValue}
  }
  /// Returns true if `decimalTab` has been explicitly set.
  var hasDecimalTab: Bool {return _storage._decimalTab != nil}
  /// Clears the value of `decimalTab`. Subsequent reads from it will return its default value.
  mutating func clearDecimalTab() {_uniqueStorage()._decimalTab = nil}

  var language: String {
    get {return _storage._language ?? String()}
    set {_uniqueStorage()._language = newValue}
  }
  /// Returns true if `language` has been explicitly set.
  var hasLanguage: Bool {return _storage._language != nil}
  /// Clears the value of `language`. Subsequent reads from it will return its default value.
  mutating func clearLanguage() {_uniqueStorage()._language = nil}

  var hyphenationLanguage: String {
    get {return _storage._hyphenationLanguage ?? String()}
    set {_uniqueStorage()._hyphenationLanguage = newValue}
  }
  /// Returns true if `hyphenationLanguage` has been explicitly set.
  var hasHyphenationLanguage: Bool {return _storage._hyphenationLanguage != nil}
  /// Clears the value of `hyphenationLanguage`. Subsequent reads from it will return its default value.
  mutating func clearHyphenationLanguage() {_uniqueStorage()._hyphenationLanguage = nil}

  var creationLocale: String {
    get {return _storage._creationLocale ?? String()}
    set {_uniqueStorage()._creationLocale = newValue}
  }
  /// Returns true if `creationLocale` has been explicitly set.
  var hasCreationLocale: Bool {return _storage._creationLocale != nil}
  /// Clears the value of `creationLocale`. Subsequent reads from it will return its default value.
  mutating func clearCreationLocale() {_uniqueStorage()._creationLocale = nil}

  var lastLocale: String {
    get {return _storage._lastLocale ?? String()}
    set {_uniqueStorage()._lastLocale = newValue}
  }
  /// Returns true if `lastLocale` has been explicitly set.
  var hasLastLocale: Bool {return _storage._lastLocale != nil}
  /// Clears the value of `lastLocale`. Subsequent reads from it will return its default value.
  mutating func clearLastLocale() {_uniqueStorage()._lastLocale = nil}

  var origTemplate: String {
    get {return _storage._origTemplate ?? String()}
    set {_uniqueStorage()._origTemplate = newValue}
  }
  /// Returns true if `origTemplate` has been explicitly set.
  var hasOrigTemplate: Bool {return _storage._origTemplate != nil}
  /// Clears the value of `origTemplate`. Subsequent reads from it will return its default value.
  mutating func clearOrigTemplate() {_uniqueStorage()._origTemplate = nil}

  var creationDate: String {
    get {return _storage._creationDate ?? String()}
    set {_uniqueStorage()._creationDate = newValue}
  }
  /// Returns true if `creationDate` has been explicitly set.
  var hasCreationDate: Bool {return _storage._creationDate != nil}
  /// Clears the value of `creationDate`. Subsequent reads from it will return its default value.
  mutating func clearCreationDate() {_uniqueStorage()._creationDate = nil}

  var bibliographyFormat: String {
    get {return _storage._bibliographyFormat ?? String()}
    set {_uniqueStorage()._bibliographyFormat = newValue}
  }
  /// Returns true if `bibliographyFormat` has been explicitly set.
  var hasBibliographyFormat: Bool {return _storage._bibliographyFormat != nil}
  /// Clears the value of `bibliographyFormat`. Subsequent reads from it will return its default value.
  mutating func clearBibliographyFormat() {_uniqueStorage()._bibliographyFormat = nil}

  var footnoteKind: TP_SettingsArchive.FootnoteKind {
    get {return _storage._footnoteKind ?? .kFootnoteKindFootnotes}
    set {_uniqueStorage()._footnoteKind = newValue}
  }
  /// Returns true if `footnoteKind` has been explicitly set.
  var hasFootnoteKind: Bool {return _storage._footnoteKind != nil}
  /// Clears the value of `footnoteKind`. Subsequent reads from it will return its default value.
  mutating func clearFootnoteKind() {_uniqueStorage()._footnoteKind = nil}

  var footnoteFormat: TP_SettingsArchive.FootnoteFormat {
    get {return _storage._footnoteFormat ?? .kFootnoteFormatNumeric}
    set {_uniqueStorage()._footnoteFormat = newValue}
  }
  /// Returns true if `footnoteFormat` has been explicitly set.
  var hasFootnoteFormat: Bool {return _storage._footnoteFormat != nil}
  /// Clears the value of `footnoteFormat`. Subsequent reads from it will return its default value.
  mutating func clearFootnoteFormat() {_uniqueStorage()._footnoteFormat = nil}

  var footnoteNumbering: TP_SettingsArchive.FootnoteNumbering {
    get {return _storage._footnoteNumbering ?? .kFootnoteNumberingContinuous}
    set {_uniqueStorage()._footnoteNumbering = newValue}
  }
  /// Returns true if `footnoteNumbering` has been explicitly set.
  var hasFootnoteNumbering: Bool {return _storage._footnoteNumbering != nil}
  /// Clears the value of `footnoteNumbering`. Subsequent reads from it will return its default value.
  mutating func clearFootnoteNumbering() {_uniqueStorage()._footnoteNumbering = nil}

  var footnoteGap: Int32 {
    get {return _storage._footnoteGap ?? 0}
    set {_uniqueStorage()._footnoteGap = newValue}
  }
  /// Returns true if `footnoteGap` has been explicitly set.
  var hasFootnoteGap: Bool {return _storage._footnoteGap != nil}
  /// Clears the value of `footnoteGap`. Subsequent reads from it will return its default value.
  mutating func clearFootnoteGap() {_uniqueStorage()._footnoteGap = nil}

  var facingPages: Bool {
    get {return _storage._facingPages ?? false}
    set {_uniqueStorage()._facingPages = newValue}
  }
  /// Returns true if `facingPages` has been explicitly set.
  var hasFacingPages: Bool {return _storage._facingPages != nil}
  /// Clears the value of `facingPages`. Subsequent reads from it will return its default value.
  mutating func clearFacingPages() {_uniqueStorage()._facingPages = nil}

  var sectionAuthoring: Bool {
    get {return _storage._sectionAuthoring ?? false}
    set {_uniqueStorage()._sectionAuthoring = newValue}
  }
  /// Returns true if `sectionAuthoring` has been explicitly set.
  var hasSectionAuthoring: Bool {return _storage._sectionAuthoring != nil}
  /// Clears the value of `sectionAuthoring`. Subsequent reads from it will return its default value.
  mutating func clearSectionAuthoring() {_uniqueStorage()._sectionAuthoring = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum FootnoteKind: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case kFootnoteKindFootnotes = 0
    case kFootnoteKindDocumentEndnotes = 1
    case kFootnoteKindSectionEndnotes = 2

    init() {
      self = .kFootnoteKindFootnotes
    }

  }

  enum FootnoteFormat: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case kFootnoteFormatNumeric = 0
    case kFootnoteFormatRoman = 1
    case kFootnoteFormatSymbolic = 2
    case kFootnoteFormatJapaneseNumeric = 3
    case kFootnoteFormatJapaneseIdeographic = 4
    case kFootnoteFormatArabicNumeric = 5

    init() {
      self = .kFootnoteFormatNumeric
    }

  }

  enum FootnoteNumbering: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case kFootnoteNumberingContinuous = 0
    case kFootnoteNumberingRestartEachPage = 1
    case kFootnoteNumberingRestartEachSection = 2

    init() {
      self = .kFootnoteNumberingContinuous
    }

  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct TP_PlaceholderArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `super`: TSWP_ShapeInfoArchive {
    get {return _super ?? TSWP_ShapeInfoArchive()}
    set {_super = newValue}
  }
  /// Returns true if ``super`` has been explicitly set.
  var hasSuper: Bool {return self._super != nil}
  /// Clears the value of ``super``. Subsequent reads from it will return its default value.
  mutating func clearSuper() {self._super = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _super: TSWP_ShapeInfoArchive? = nil
}

struct TP_DrawableTagPairsArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var drawableTagPairs: [TP_DrawableTagPairsArchive.DrawableTagPair] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct DrawableTagPair: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var tag: String {
      get {return _tag ?? String()}
      set {_tag = newValue}
    }
    /// Returns true if `tag` has been explicitly set.
    var hasTag: Bool {return self._tag != nil}
    /// Clears the value of `tag`. Subsequent reads from it will return its default value.
    mutating func clearTag() {self._tag = nil}

    var drawable: TSP_Reference {
      get {return _drawable ?? TSP_Reference()}
      set {_drawable = newValue}
    }
    /// Returns true if `drawable` has been explicitly set.
    var hasDrawable: Bool {return self._drawable != nil}
    /// Clears the value of `drawable`. Subsequent reads from it will return its default value.
    mutating func clearDrawable() {self._drawable = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _tag: String? = nil
    fileprivate var _drawable: TSP_Reference? = nil
  }

  init() {}
}

struct TP_FloatingDrawablesArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var pageGroups: [TP_FloatingDrawablesArchive.PageGroup] = []

  var drawableTagPairs: TP_DrawableTagPairsArchive {
    get {return _drawableTagPairs ?? TP_DrawableTagPairsArchive()}
    set {_drawableTagPairs = newValue}
  }
  /// Returns true if `drawableTagPairs` has been explicitly set.
  var hasDrawableTagPairs: Bool {return self._drawableTagPairs != nil}
  /// Clears the value of `drawableTagPairs`. Subsequent reads from it will return its default value.
  mutating func clearDrawableTagPairs() {self._drawableTagPairs = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct DrawableEntry: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var drawable: TSP_Reference {
      get {return _drawable ?? TSP_Reference()}
      set {_drawable = newValue}
    }
    /// Returns true if `drawable` has been explicitly set.
    var hasDrawable: Bool {return self._drawable != nil}
    /// Clears the value of `drawable`. Subsequent reads from it will return its default value.
    mutating func clearDrawable() {self._drawable = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _drawable: TSP_Reference? = nil
  }

  struct PageGroup: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var pageIndex: UInt32 {
      get {return _pageIndex ?? 0}
      set {_pageIndex = newValue}
    }
    /// Returns true if `pageIndex` has been explicitly set.
    var hasPageIndex: Bool {return self._pageIndex != nil}
    /// Clears the value of `pageIndex`. Subsequent reads from it will return its default value.
    mutating func clearPageIndex() {self._pageIndex = nil}

    var backgroundDrawables: [TP_FloatingDrawablesArchive.DrawableEntry] = []

    var foregroundDrawables: [TP_FloatingDrawablesArchive.DrawableEntry] = []

    var drawables: [TP_FloatingDrawablesArchive.DrawableEntry] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _pageIndex: UInt32? = nil
  }

  init() {}

  fileprivate var _drawableTagPairs: TP_DrawableTagPairsArchive? = nil
}

struct TP_DrawablesZOrderArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var drawables: [TSP_Reference] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct TP_SectionTemplateArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var headers: [TSP_Reference] = []

  var footers: [TSP_Reference] = []

  var sectionTemplateDrawables: [TSP_Reference] = []

  var pageTemplateUuidpath: TSP_UUIDPath {
    get {return _pageTemplateUuidpath ?? TSP_UUIDPath()}
    set {_pageTemplateUuidpath = newValue}
  }
  /// Returns true if `pageTemplateUuidpath` has been explicitly set.
  var hasPageTemplateUuidpath: Bool {return self._pageTemplateUuidpath != nil}
  /// Clears the value of `pageTemplateUuidpath`. Subsequent reads from it will return its default value.
  mutating func clearPageTemplateUuidpath() {self._pageTemplateUuidpath = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _pageTemplateUuidpath: TSP_UUIDPath? = nil
}

struct TP_PageTemplateArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  var sectionTemplateDrawables: [TSP_Reference] = []

  var placeholderDrawables: [TP_PageTemplateArchive.TagDrawablePair] = []

  var headersFootersMatchPreviousPage: Bool {
    get {return _headersFootersMatchPreviousPage ?? false}
    set {_headersFootersMatchPreviousPage = newValue}
  }
  /// Returns true if `headersFootersMatchPreviousPage` has been explicitly set.
  var hasHeadersFootersMatchPreviousPage: Bool {return self._headersFootersMatchPreviousPage != nil}
  /// Clears the value of `headersFootersMatchPreviousPage`. Subsequent reads from it will return its default value.
  mutating func clearHeadersFootersMatchPreviousPage() {self._headersFootersMatchPreviousPage = nil}

  var hideHeadersFooters: Bool {
    get {return _hideHeadersFooters ?? false}
    set {_hideHeadersFooters = newValue}
  }
  /// Returns true if `hideHeadersFooters` has been explicitly set.
  var hasHideHeadersFooters: Bool {return self._hideHeadersFooters != nil}
  /// Clears the value of `hideHeadersFooters`. Subsequent reads from it will return its default value.
  mutating func clearHideHeadersFooters() {self._hideHeadersFooters = nil}

  var backgroundFill: TSD_FillArchive {
    get {return _backgroundFill ?? TSD_FillArchive()}
    set {_backgroundFill = newValue}
  }
  /// Returns true if `backgroundFill` has been explicitly set.
  var hasBackgroundFill: Bool {return self._backgroundFill != nil}
  /// Clears the value of `backgroundFill`. Subsequent reads from it will return its default value.
  mutating func clearBackgroundFill() {self._backgroundFill = nil}

  var guideStorage: TSP_Reference {
    get {return _guideStorage ?? TSP_Reference()}
    set {_guideStorage = newValue}
  }
  /// Returns true if `guideStorage` has been explicitly set.
  var hasGuideStorage: Bool {return self._guideStorage != nil}
  /// Clears the value of `guideStorage`. Subsequent reads from it will return its default value.
  mutating func clearGuideStorage() {self._guideStorage = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct TagDrawablePair: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var tag: String {
      get {return _tag ?? String()}
      set {_tag = newValue}
    }
    /// Returns true if `tag` has been explicitly set.
    var hasTag: Bool {return self._tag != nil}
    /// Clears the value of `tag`. Subsequent reads from it will return its default value.
    mutating func clearTag() {self._tag = nil}

    var drawable: TSP_Reference {
      get {return _drawable ?? TSP_Reference()}
      set {_drawable = newValue}
    }
    /// Returns true if `drawable` has been explicitly set.
    var hasDrawable: Bool {return self._drawable != nil}
    /// Clears the value of `drawable`. Subsequent reads from it will return its default value.
    mutating func clearDrawable() {self._drawable = nil}

    var zIndex: UInt32 {
      get {return _zIndex ?? 0}
      set {_zIndex = newValue}
    }
    /// Returns true if `zIndex` has been explicitly set.
    var hasZIndex: Bool {return self._zIndex != nil}
    /// Clears the value of `zIndex`. Subsequent reads from it will return its default value.
    mutating func clearZIndex() {self._zIndex = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _tag: String? = nil
    fileprivate var _drawable: TSP_Reference? = nil
    fileprivate var _zIndex: UInt32? = nil
  }

  init() {}

  fileprivate var _name: String? = nil
  fileprivate var _headersFootersMatchPreviousPage: Bool? = nil
  fileprivate var _hideHeadersFooters: Bool? = nil
  fileprivate var _backgroundFill: TSD_FillArchive? = nil
  fileprivate var _guideStorage: TSP_Reference? = nil
}

struct TP_SectionArchive: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var obsoleteShowsHeader: Bool {
    get {return _storage._obsoleteShowsHeader ?? false}
    set {_uniqueStorage()._obsoleteShowsHeader = newValue}
  }
  /// Returns true if `obsoleteShowsHeader` has been explicitly set.
  var hasObsoleteShowsHeader: Bool {return _storage._obsoleteShowsHeader != nil}
  /// Clears the value of `obsoleteShowsHeader`. Subsequent reads from it will return its default value.
  mutating func clearObsoleteShowsHeader() {_uniqueStorage()._obsoleteShowsHeader = nil}

  var obsoleteShowsFooter: Bool {
    get {return _storage._obsoleteShowsFooter ?? false}
    set {_uniqueStorage()._obsoleteShowsFooter = newValue}
  }
  /// Returns true if `obsoleteShowsFooter` has been explicitly set.
  var hasObsoleteShowsFooter: Bool {return _storage._obsoleteShowsFooter != nil}
  /// Clears the value of `obsoleteShowsFooter`. Subsequent reads from it will return its default value.
  mutating func clearObsoleteShowsFooter() {_uniqueStorage()._obsoleteShowsFooter = nil}

  var obsoleteHeaders: [TSP_Reference] {
    get {return _storage._obsoleteHeaders}
    set {_uniqueStorage()._obsoleteHeaders = newValue}
  }

  var obsoleteFooters: [TSP_Reference] {
    get {return _storage._obsoleteFooters}
    set {_uniqueStorage()._obsoleteFooters = newValue}
  }

  var obsoleteLeftMargin: Float {
    get {return _storage._obsoleteLeftMargin ?? 0}
    set {_uniqueStorage()._obsoleteLeftMargin = newValue}
  }
  /// Returns true if `obsoleteLeftMargin` has been explicitly set.
  var hasObsoleteLeftMargin: Bool {return _storage._obsoleteLeftMargin != nil}
  /// Clears the value of `obsoleteLeftMargin`. Subsequent reads from it will return its default value.
  mutating func clearObsoleteLeftMargin() {_uniqueStorage()._obsoleteLeftMargin = nil}

  var obsoleteRightMargin: Float {
    get {return _storage._obsoleteRightMargin ?? 0}
    set {_uniqueStorage()._obsoleteRightMargin = newValue}
  }
  /// Returns true if `obsoleteRightMargin` has been explicitly set.
  var hasObsoleteRightMargin: Bool {return _storage._obsoleteRightMargin != nil}
  /// Clears the value of `obsoleteRightMargin`. Subsequent reads from it will return its default value.
  mutating func clearObsoleteRightMargin() {_uniqueStorage()._obsoleteRightMargin = nil}

  var obsoleteTopMargin: Float {
    get {return _storage._obsoleteTopMargin ?? 0}
    set {_uniqueStorage()._obsoleteTopMargin = newValue}
  }
  /// Returns true if `obsoleteTopMargin` has been explicitly set.
  var hasObsoleteTopMargin: Bool {return _storage._obsoleteTopMargin != nil}
  /// Clears the value of `obsoleteTopMargin`. Subsequent reads from it will return its default value.
  mutating func clearObsoleteTopMargin() {_uniqueStorage()._obsoleteTopMargin = nil}

  var obsoleteBottomMargin: Float {
    get {return _storage._obsoleteBottomMargin ?? 0}
    set {_uniqueStorage()._obsoleteBottomMargin = newValue}
  }
  /// Returns true if `obsoleteBottomMargin` has been explicitly set.
  var hasObsoleteBottomMargin: Bool {return _storage._obsoleteBottomMargin != nil}
  /// Clears the value of `obsoleteBottomMargin`. Subsequent reads from it will return its default value.
  mutating func clearObsoleteBottomMargin() {_uniqueStorage()._obsoleteBottomMargin = nil}

  var obsoleteHeaderPadding: Float {
    get {return _storage._obsoleteHeaderPadding ?? 0}
    set {_uniqueStorage()._obsoleteHeaderPadding = newValue}
  }
  /// Returns true if `obsoleteHeaderPadding` has been explicitly set.
  var hasObsoleteHeaderPadding: Bool {return _storage._obsoleteHeaderPadding != nil}
  /// Clears the value of `obsoleteHeaderPadding`. Subsequent reads from it will return its default value.
  mutating func clearObsoleteHeaderPadding() {_uniqueStorage()._obsoleteHeaderPadding = nil}

  var obsoleteFooterPadding: Float {
    get {return _storage._obsoleteFooterPadding ?? 0}
    set {_uniqueStorage()._obsoleteFooterPadding = newValue}
  }
  /// Returns true if `obsoleteFooterPadding` has been explicitly set.
  var hasObsoleteFooterPadding: Bool {return _storage._obsoleteFooterPadding != nil}
  /// Clears the value of `obsoleteFooterPadding`. Subsequent reads from it will return its default value.
  mutating func clearObsoleteFooterPadding() {_uniqueStorage()._obsoleteFooterPadding = nil}

  var obsoletePaperWidth: Float {
    get {return _storage._obsoletePaperWidth ?? 0}
    set {_uniqueStorage()._obsoletePaperWidth = newValue}
  }
  /// Returns true if `obsoletePaperWidth` has been explicitly set.
  var hasObsoletePaperWidth: Bool {return _storage._obsoletePaperWidth != nil}
  /// Clears the value of `obsoletePaperWidth`. Subsequent reads from it will return its default value.
  mutating func clearObsoletePaperWidth() {_uniqueStorage()._obsoletePaperWidth = nil}

  var obsoletePaperHeight: Float {
    get {return _storage._obsoletePaperHeight ?? 0}
    set {_uniqueStorage()._obsoletePaperHeight = newValue}
  }
  /// Returns true if `obsoletePaperHeight` has been explicitly set.
  var hasObsoletePaperHeight: Bool {return _storage._obsoletePaperHeight != nil}
  /// Clears the value of `obsoletePaperHeight`. Subsequent reads from it will return its default value.
  mutating func clearObsoletePaperHeight() {_uniqueStorage()._obsoletePaperHeight = nil}

  var obsoleteLandscapeMode: Bool {
    get {return _storage._obsoleteLandscapeMode ?? false}
    set {_uniqueStorage()._obsoleteLandscapeMode = newValue}
  }
  /// Returns true if `obsoleteLandscapeMode` has been explicitly set.
  var hasObsoleteLandscapeMode: Bool {return _storage._obsoleteLandscapeMode != nil}
  /// Clears the value of `obsoleteLandscapeMode`. Subsequent reads from it will return its default value.
  mutating func clearObsoleteLandscapeMode() {_uniqueStorage()._obsoleteLandscapeMode = nil}

  var obsoleteSectionTemplateDrawables: [TSP_Reference] {
    get {return _storage._obsoleteSectionTemplateDrawables}
    set {_uniqueStorage()._obsoleteSectionTemplateDrawables = newValue}
  }

  var obsoleteHeaderMargin: Float {
    get {return _storage._obsoleteHeaderMargin ?? 0}
    set {_uniqueStorage()._obsoleteHeaderMargin = newValue}
  }
  /// Returns true if `obsoleteHeaderMargin` has been explicitly set.
  var hasObsoleteHeaderMargin: Bool {return _storage._obsoleteHeaderMargin != nil}
  /// Clears the value of `obsoleteHeaderMargin`. Subsequent reads from it will return its default value.
  mutating func clearObsoleteHeaderMargin() {_uniqueStorage()._obsoleteHeaderMargin = nil}

  var obsoleteFooterMargin: Float {
    get {return _storage._obsoleteFooterMargin ?? 0}
    set {_uniqueStorage()._obsoleteFooterMargin = newValue}
  }
  /// Returns true if `obsoleteFooterMargin` has been explicitly set.
  var hasObsoleteFooterMargin: Bool {return _storage._obsoleteFooterMargin != nil}
  /// Clears the value of `obsoleteFooterMargin`. Subsequent reads from it will return its default value.
  mutating func clearObsoleteFooterMargin() {_uniqueStorage()._obsoleteFooterMargin = nil}

  var inheritPreviousHeaderFooter: Bool {
    get {return _storage._inheritPreviousHeaderFooter ?? false}
    set {_uniqueStorage()._inheritPreviousHeaderFooter = newValue}
  }
  /// Returns true if `inheritPreviousHeaderFooter` has been explicitly set.
  var hasInheritPreviousHeaderFooter: Bool {return _storage._inheritPreviousHeaderFooter != nil}
  /// Clears the value of `inheritPreviousHeaderFooter`. Subsequent reads from it will return its default value.
  mutating func clearInheritPreviousHeaderFooter() {_uniqueStorage()._inheritPreviousHeaderFooter = nil}

  var sectionTemplateFirstPageDifferent: Bool {
    get {return _storage._sectionTemplateFirstPageDifferent ?? false}
    set {_uniqueStorage()._sectionTemplateFirstPageDifferent = newValue}
  }
  /// Returns true if `sectionTemplateFirstPageDifferent` has been explicitly set.
  var hasSectionTemplateFirstPageDifferent: Bool {return _storage._sectionTemplateFirstPageDifferent != nil}
  /// Clears the value of `sectionTemplateFirstPageDifferent`. Subsequent reads from it will return its default value.
  mutating func clearSectionTemplateFirstPageDifferent() {_uniqueStorage()._sectionTemplateFirstPageDifferent = nil}

  var sectionTemplateEvenOddPagesDifferent: Bool {
    get {return _storage._sectionTemplateEvenOddPagesDifferent ?? false}
    set {_uniqueStorage()._sectionTemplateEvenOddPagesDifferent = newValue}
  }
  /// Returns true if `sectionTemplateEvenOddPagesDifferent` has been explicitly set.
  var hasSectionTemplateEvenOddPagesDifferent: Bool {return _storage._sectionTemplateEvenOddPagesDifferent != nil}
  /// Clears the value of `sectionTemplateEvenOddPagesDifferent`. Subsequent reads from it will return its default value.
  mutating func clearSectionTemplateEvenOddPagesDifferent() {_uniqueStorage()._sectionTemplateEvenOddPagesDifferent = nil}

  var sectionStartKind: UInt32 {
    get {return _storage._sectionStartKind ?? 0}
    set {_uniqueStorage()._sectionStartKind = newValue}
  }
  /// Returns true if `sectionStartKind` has been explicitly set.
  var hasSectionStartKind: Bool {return _storage._sectionStartKind != nil}
  /// Clears the value of `sectionStartKind`. Subsequent reads from it will return its default value.
  mutating func clearSectionStartKind() {_uniqueStorage()._sectionStartKind = nil}

  var sectionPageNumberKind: UInt32 {
    get {return _storage._sectionPageNumberKind ?? 0}
    set {_uniqueStorage()._sectionPageNumberKind = newValue}
  }
  /// Returns true if `sectionPageNumberKind` has been explicitly set.
  var hasSectionPageNumberKind: Bool {return _storage._sectionPageNumberKind != nil}
  /// Clears the value of `sectionPageNumberKind`. Subsequent reads from it will return its default value.
  mutating func clearSectionPageNumberKind() {_uniqueStorage()._sectionPageNumberKind = nil}

  var sectionPageNumberStart: UInt32 {
    get {return _storage._sectionPageNumberStart ?? 0}
    set {_uniqueStorage()._sectionPageNumberStart = newValue}
  }
  /// Returns true if `sectionPageNumberStart` has been explicitly set.
  var hasSectionPageNumberStart: Bool {return _storage._sectionPageNumberStart != nil}
  /// Clears the value of `sectionPageNumberStart`. Subsequent reads from it will return its default value.
  mutating func clearSectionPageNumberStart() {_uniqueStorage()._sectionPageNumberStart = nil}

  var firstSectionTemplatePage: TSP_Reference {
    get {return _storage._firstSectionTemplatePage ?? TSP_Reference()}
    set {_uniqueStorage()._firstSectionTemplatePage = newValue}
  }
  /// Returns true if `firstSectionTemplatePage` has been explicitly set.
  var hasFirstSectionTemplatePage: Bool {return _storage._firstSectionTemplatePage != nil}
  /// Clears the value of `firstSectionTemplatePage`. Subsequent reads from it will return its default value.
  mutating func clearFirstSectionTemplatePage() {_uniqueStorage()._firstSectionTemplatePage = nil}

  var evenSectionTemplatePage: TSP_Reference {
    get {return _storage._evenSectionTemplatePage ?? TSP_Reference()}
    set {_uniqueStorage()._evenSectionTemplatePage = newValue}
  }
  /// Returns true if `evenSectionTemplatePage` has been explicitly set.
  var hasEvenSectionTemplatePage: Bool {return _storage._evenSectionTemplatePage != nil}
  /// Clears the value of `evenSectionTemplatePage`. Subsequent reads from it will return its default value.
  mutating func clearEvenSectionTemplatePage() {_uniqueStorage()._evenSectionTemplatePage = nil}

  var oddSectionTemplatePage: TSP_Reference {
    get {return _storage._oddSectionTemplatePage ?? TSP_Reference()}
    set {_uniqueStorage()._oddSectionTemplatePage = newValue}
  }
  /// Returns true if `oddSectionTemplatePage` has been explicitly set.
  var hasOddSectionTemplatePage: Bool {return _storage._oddSectionTemplatePage != nil}
  /// Clears the value of `oddSectionTemplatePage`. Subsequent reads from it will return its default value.
  mutating func clearOddSectionTemplatePage() {_uniqueStorage()._oddSectionTemplatePage = nil}

  var name: String {
    get {return _storage._name ?? String()}
    set {_uniqueStorage()._name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {_uniqueStorage()._name = nil}

  var sectionTemplateFirstPageHidesHeaderFooter: Bool {
    get {return _storage._sectionTemplateFirstPageHidesHeaderFooter ?? false}
    set {_uniqueStorage()._sectionTemplateFirstPageHidesHeaderFooter = newValue}
  }
  /// Returns true if `sectionTemplateFirstPageHidesHeaderFooter` has been explicitly set.
  var hasSectionTemplateFirstPageHidesHeaderFooter: Bool {return _storage._sectionTemplateFirstPageHidesHeaderFooter != nil}
  /// Clears the value of `sectionTemplateFirstPageHidesHeaderFooter`. Subsequent reads from it will return its default value.
  mutating func clearSectionTemplateFirstPageHidesHeaderFooter() {_uniqueStorage()._sectionTemplateFirstPageHidesHeaderFooter = nil}

  var userDefinedGuideStorage: TSP_Reference {
    get {return _storage._userDefinedGuideStorage ?? TSP_Reference()}
    set {_uniqueStorage()._userDefinedGuideStorage = newValue}
  }
  /// Returns true if `userDefinedGuideStorage` has been explicitly set.
  var hasUserDefinedGuideStorage: Bool {return _storage._userDefinedGuideStorage != nil}
  /// Clears the value of `userDefinedGuideStorage`. Subsequent reads from it will return its default value.
  mutating func clearUserDefinedGuideStorage() {_uniqueStorage()._userDefinedGuideStorage = nil}

  var backgroundFill: TSD_FillArchive {
    get {return _storage._backgroundFill ?? TSD_FillArchive()}
    set {_uniqueStorage()._backgroundFill = newValue}
  }
  /// Returns true if `backgroundFill` has been explicitly set.
  var hasBackgroundFill: Bool {return _storage._backgroundFill != nil}
  /// Clears the value of `backgroundFill`. Subsequent reads from it will return its default value.
  mutating func clearBackgroundFill() {_uniqueStorage()._backgroundFill = nil}

  var sectionHyperlinkUuid: TSP_UUID {
    get {return _storage._sectionHyperlinkUuid ?? TSP_UUID()}
    set {_uniqueStorage()._sectionHyperlinkUuid = newValue}
  }
  /// Returns true if `sectionHyperlinkUuid` has been explicitly set.
  var hasSectionHyperlinkUuid: Bool {return _storage._sectionHyperlinkUuid != nil}
  /// Clears the value of `sectionHyperlinkUuid`. Subsequent reads from it will return its default value.
  mutating func clearSectionHyperlinkUuid() {_uniqueStorage()._sectionHyperlinkUuid = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct TP_DoublePoint: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var x: Double {
    get {return _x ?? 0}
    set {_x = newValue}
  }
  /// Returns true if `x` has been explicitly set.
  var hasX: Bool {return self._x != nil}
  /// Clears the value of `x`. Subsequent reads from it will return its default value.
  mutating func clearX() {self._x = nil}

  var y: Double {
    get {return _y ?? 0}
    set {_y = newValue}
  }
  /// Returns true if `y` has been explicitly set.
  var hasY: Bool {return self._y != nil}
  /// Clears the value of `y`. Subsequent reads from it will return its default value.
  mutating func clearY() {self._y = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _x: Double? = nil
  fileprivate var _y: Double? = nil
}

struct TP_DoubleSize: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var width: Double {
    get {return _width ?? 0}
    set {_width = newValue}
  }
  /// Returns true if `width` has been explicitly set.
  var hasWidth: Bool {return self._width != nil}
  /// Clears the value of `width`. Subsequent reads from it will return its default value.
  mutating func clearWidth() {self._width = nil}

  var height: Double {
    get {return _height ?? 0}
    set {_height = newValue}
  }
  /// Returns true if `height` has been explicitly set.
  var hasHeight: Bool {return self._height != nil}
  /// Clears the value of `height`. Subsequent reads from it will return its default value.
  mutating func clearHeight() {self._height = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _width: Double? = nil
  fileprivate var _height: Double? = nil
}

struct TP_AnchorPosArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// NOTE: This field was marked as deprecated in the .proto file.
  var attachment: TSP_Reference {
    get {return _attachment ?? TSP_Reference()}
    set {_attachment = newValue}
  }
  /// Returns true if `attachment` has been explicitly set.
  var hasAttachment: Bool {return self._attachment != nil}
  /// Clears the value of `attachment`. Subsequent reads from it will return its default value.
  mutating func clearAttachment() {self._attachment = nil}

  var position: TSP_Point {
    get {return _position ?? TSP_Point()}
    set {_position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  var hasPosition: Bool {return self._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  mutating func clearPosition() {self._position = nil}

  var drawableUuidPath: TSP_UUIDPath {
    get {return _drawableUuidPath ?? TSP_UUIDPath()}
    set {_drawableUuidPath = newValue}
  }
  /// Returns true if `drawableUuidPath` has been explicitly set.
  var hasDrawableUuidPath: Bool {return self._drawableUuidPath != nil}
  /// Clears the value of `drawableUuidPath`. Subsequent reads from it will return its default value.
  mutating func clearDrawableUuidPath() {self._drawableUuidPath = nil}

  var doublePosition: TP_DoublePoint {
    get {return _doublePosition ?? TP_DoublePoint()}
    set {_doublePosition = newValue}
  }
  /// Returns true if `doublePosition` has been explicitly set.
  var hasDoublePosition: Bool {return self._doublePosition != nil}
  /// Clears the value of `doublePosition`. Subsequent reads from it will return its default value.
  mutating func clearDoublePosition() {self._doublePosition = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _attachment: TSP_Reference? = nil
  fileprivate var _position: TSP_Point? = nil
  fileprivate var _drawableUuidPath: TSP_UUIDPath? = nil
  fileprivate var _doublePosition: TP_DoublePoint? = nil
}

struct TP_TargetHintArchive: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var frameOrigin: TSP_Point {
    get {return _storage._frameOrigin ?? TSP_Point()}
    set {_uniqueStorage()._frameOrigin = newValue}
  }
  /// Returns true if `frameOrigin` has been explicitly set.
  var hasFrameOrigin: Bool {return _storage._frameOrigin != nil}
  /// Clears the value of `frameOrigin`. Subsequent reads from it will return its default value.
  mutating func clearFrameOrigin() {_uniqueStorage()._frameOrigin = nil}

  var frameSize: TSP_Size {
    get {return _storage._frameSize ?? TSP_Size()}
    set {_uniqueStorage()._frameSize = newValue}
  }
  /// Returns true if `frameSize` has been explicitly set.
  var hasFrameSize: Bool {return _storage._frameSize != nil}
  /// Clears the value of `frameSize`. Subsequent reads from it will return its default value.
  mutating func clearFrameSize() {_uniqueStorage()._frameSize = nil}

  var range: TSP_Range {
    get {return _storage._range ?? TSP_Range()}
    set {_uniqueStorage()._range = newValue}
  }
  /// Returns true if `range` has been explicitly set.
  var hasRange: Bool {return _storage._range != nil}
  /// Clears the value of `range`. Subsequent reads from it will return its default value.
  mutating func clearRange() {_uniqueStorage()._range = nil}

  var nextWidowPullsDownFromCharIndex: UInt32 {
    get {return _storage._nextWidowPullsDownFromCharIndex ?? 0}
    set {_uniqueStorage()._nextWidowPullsDownFromCharIndex = newValue}
  }
  /// Returns true if `nextWidowPullsDownFromCharIndex` has been explicitly set.
  var hasNextWidowPullsDownFromCharIndex: Bool {return _storage._nextWidowPullsDownFromCharIndex != nil}
  /// Clears the value of `nextWidowPullsDownFromCharIndex`. Subsequent reads from it will return its default value.
  mutating func clearNextWidowPullsDownFromCharIndex() {_uniqueStorage()._nextWidowPullsDownFromCharIndex = nil}

  var anchoredRange: TSP_Range {
    get {return _storage._anchoredRange ?? TSP_Range()}
    set {_uniqueStorage()._anchoredRange = newValue}
  }
  /// Returns true if `anchoredRange` has been explicitly set.
  var hasAnchoredRange: Bool {return _storage._anchoredRange != nil}
  /// Clears the value of `anchoredRange`. Subsequent reads from it will return its default value.
  mutating func clearAnchoredRange() {_uniqueStorage()._anchoredRange = nil}

  var columnCount: UInt32 {
    get {return _storage._columnCount ?? 0}
    set {_uniqueStorage()._columnCount = newValue}
  }
  /// Returns true if `columnCount` has been explicitly set.
  var hasColumnCount: Bool {return _storage._columnCount != nil}
  /// Clears the value of `columnCount`. Subsequent reads from it will return its default value.
  mutating func clearColumnCount() {_uniqueStorage()._columnCount = nil}

  var lineFragmentCount: UInt32 {
    get {return _storage._lineFragmentCount ?? 0}
    set {_uniqueStorage()._lineFragmentCount = newValue}
  }
  /// Returns true if `lineFragmentCount` has been explicitly set.
  var hasLineFragmentCount: Bool {return _storage._lineFragmentCount != nil}
  /// Clears the value of `lineFragmentCount`. Subsequent reads from it will return its default value.
  mutating func clearLineFragmentCount() {_uniqueStorage()._lineFragmentCount = nil}

  var doubleOrigin: TP_DoublePoint {
    get {return _storage._doubleOrigin ?? TP_DoublePoint()}
    set {_uniqueStorage()._doubleOrigin = newValue}
  }
  /// Returns true if `doubleOrigin` has been explicitly set.
  var hasDoubleOrigin: Bool {return _storage._doubleOrigin != nil}
  /// Clears the value of `doubleOrigin`. Subsequent reads from it will return its default value.
  mutating func clearDoubleOrigin() {_uniqueStorage()._doubleOrigin = nil}

  var doubleSize: TP_DoubleSize {
    get {return _storage._doubleSize ?? TP_DoubleSize()}
    set {_uniqueStorage()._doubleSize = newValue}
  }
  /// Returns true if `doubleSize` has been explicitly set.
  var hasDoubleSize: Bool {return _storage._doubleSize != nil}
  /// Clears the value of `doubleSize`. Subsequent reads from it will return its default value.
  mutating func clearDoubleSize() {_uniqueStorage()._doubleSize = nil}

  var endOfLayout: Bool {
    get {return _storage._endOfLayout ?? false}
    set {_uniqueStorage()._endOfLayout = newValue}
  }
  /// Returns true if `endOfLayout` has been explicitly set.
  var hasEndOfLayout: Bool {return _storage._endOfLayout != nil}
  /// Clears the value of `endOfLayout`. Subsequent reads from it will return its default value.
  mutating func clearEndOfLayout() {_uniqueStorage()._endOfLayout = nil}

  var lastLineIsEmptyAndHasListLabel: Bool {
    get {return _storage._lastLineIsEmptyAndHasListLabel ?? false}
    set {_uniqueStorage()._lastLineIsEmptyAndHasListLabel = newValue}
  }
  /// Returns true if `lastLineIsEmptyAndHasListLabel` has been explicitly set.
  var hasLastLineIsEmptyAndHasListLabel: Bool {return _storage._lastLineIsEmptyAndHasListLabel != nil}
  /// Clears the value of `lastLineIsEmptyAndHasListLabel`. Subsequent reads from it will return its default value.
  mutating func clearLastLineIsEmptyAndHasListLabel() {_uniqueStorage()._lastLineIsEmptyAndHasListLabel = nil}

  var textIsVertical: Bool {
    get {return _storage._textIsVertical ?? false}
    set {_uniqueStorage()._textIsVertical = newValue}
  }
  /// Returns true if `textIsVertical` has been explicitly set.
  var hasTextIsVertical: Bool {return _storage._textIsVertical != nil}
  /// Clears the value of `textIsVertical`. Subsequent reads from it will return its default value.
  mutating func clearTextIsVertical() {_uniqueStorage()._textIsVertical = nil}

  var terminatedByBreak: Bool {
    get {return _storage._terminatedByBreak ?? false}
    set {_uniqueStorage()._terminatedByBreak = newValue}
  }
  /// Returns true if `terminatedByBreak` has been explicitly set.
  var hasTerminatedByBreak: Bool {return _storage._terminatedByBreak != nil}
  /// Clears the value of `terminatedByBreak`. Subsequent reads from it will return its default value.
  mutating func clearTerminatedByBreak() {_uniqueStorage()._terminatedByBreak = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct TP_PageHintArchive: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var pageKind: TP_PageHintArchive.PageKind {
    get {return _storage._pageKind ?? .kPageKindNone}
    set {_uniqueStorage()._pageKind = newValue}
  }
  /// Returns true if `pageKind` has been explicitly set.
  var hasPageKind: Bool {return _storage._pageKind != nil}
  /// Clears the value of `pageKind`. Subsequent reads from it will return its default value.
  mutating func clearPageKind() {_uniqueStorage()._pageKind = nil}

  var targetHints: [TP_TargetHintArchive] {
    get {return _storage._targetHints}
    set {_uniqueStorage()._targetHints = newValue}
  }

  var footnoteAutoNumberRange: TSP_Range {
    get {return _storage._footnoteAutoNumberRange ?? TSP_Range()}
    set {_uniqueStorage()._footnoteAutoNumberRange = newValue}
  }
  /// Returns true if `footnoteAutoNumberRange` has been explicitly set.
  var hasFootnoteAutoNumberRange: Bool {return _storage._footnoteAutoNumberRange != nil}
  /// Clears the value of `footnoteAutoNumberRange`. Subsequent reads from it will return its default value.
  mutating func clearFootnoteAutoNumberRange() {_uniqueStorage()._footnoteAutoNumberRange = nil}

  var footnoteLayoutRange: TSP_Range {
    get {return _storage._footnoteLayoutRange ?? TSP_Range()}
    set {_uniqueStorage()._footnoteLayoutRange = newValue}
  }
  /// Returns true if `footnoteLayoutRange` has been explicitly set.
  var hasFootnoteLayoutRange: Bool {return _storage._footnoteLayoutRange != nil}
  /// Clears the value of `footnoteLayoutRange`. Subsequent reads from it will return its default value.
  mutating func clearFootnoteLayoutRange() {_uniqueStorage()._footnoteLayoutRange = nil}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var firstChildHint: TSP_Reference {
    get {return _storage._firstChildHint ?? TSP_Reference()}
    set {_uniqueStorage()._firstChildHint = newValue}
  }
  /// Returns true if `firstChildHint` has been explicitly set.
  var hasFirstChildHint: Bool {return _storage._firstChildHint != nil}
  /// Clears the value of `firstChildHint`. Subsequent reads from it will return its default value.
  mutating func clearFirstChildHint() {_uniqueStorage()._firstChildHint = nil}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var lastChildHint: TSP_Reference {
    get {return _storage._lastChildHint ?? TSP_Reference()}
    set {_uniqueStorage()._lastChildHint = newValue}
  }
  /// Returns true if `lastChildHint` has been explicitly set.
  var hasLastChildHint: Bool {return _storage._lastChildHint != nil}
  /// Clears the value of `lastChildHint`. Subsequent reads from it will return its default value.
  mutating func clearLastChildHint() {_uniqueStorage()._lastChildHint = nil}

  var anchoredAttachmentsMap: [TP_AnchorPosArchive] {
    get {return _storage._anchoredAttachmentsMap}
    set {_uniqueStorage()._anchoredAttachmentsMap = newValue}
  }

  var versionNumber: UInt32 {
    get {return _storage._versionNumber ?? 0}
    set {_uniqueStorage()._versionNumber = newValue}
  }
  /// Returns true if `versionNumber` has been explicitly set.
  var hasVersionNumber: Bool {return _storage._versionNumber != nil}
  /// Clears the value of `versionNumber`. Subsequent reads from it will return its default value.
  mutating func clearVersionNumber() {_uniqueStorage()._versionNumber = nil}

  var platformID: UInt32 {
    get {return _storage._platformID ?? 0}
    set {_uniqueStorage()._platformID = newValue}
  }
  /// Returns true if `platformID` has been explicitly set.
  var hasPlatformID: Bool {return _storage._platformID != nil}
  /// Clears the value of `platformID`. Subsequent reads from it will return its default value.
  mutating func clearPlatformID() {_uniqueStorage()._platformID = nil}

  var childHints: [TSP_Reference] {
    get {return _storage._childHints}
    set {_uniqueStorage()._childHints = newValue}
  }

  var partitionedAttachmentUuids: [TSP_UUID] {
    get {return _storage._partitionedAttachmentUuids}
    set {_uniqueStorage()._partitionedAttachmentUuids = newValue}
  }

  var textFlows: [TSP_Reference] {
    get {return _storage._textFlows}
    set {_uniqueStorage()._textFlows = newValue}
  }

  var flowHints: [TP_TargetHintArchive] {
    get {return _storage._flowHints}
    set {_uniqueStorage()._flowHints = newValue}
  }

  /// NOTE: This field was marked as deprecated in the .proto file.
  var pageSide: TP_PageHintArchive.PageSide {
    get {return _storage._pageSide ?? .kTppageSideUnknown}
    set {_uniqueStorage()._pageSide = newValue}
  }
  /// Returns true if `pageSide` has been explicitly set.
  var hasPageSide: Bool {return _storage._pageSide != nil}
  /// Clears the value of `pageSide`. Subsequent reads from it will return its default value.
  mutating func clearPageSide() {_uniqueStorage()._pageSide = nil}

  var pageColumn: UInt32 {
    get {return _storage._pageColumn ?? 0}
    set {_uniqueStorage()._pageColumn = newValue}
  }
  /// Returns true if `pageColumn` has been explicitly set.
  var hasPageColumn: Bool {return _storage._pageColumn != nil}
  /// Clears the value of `pageColumn`. Subsequent reads from it will return its default value.
  mutating func clearPageColumn() {_uniqueStorage()._pageColumn = nil}

  var pageRow: UInt32 {
    get {return _storage._pageRow ?? 0}
    set {_uniqueStorage()._pageRow = newValue}
  }
  /// Returns true if `pageRow` has been explicitly set.
  var hasPageRow: Bool {return _storage._pageRow != nil}
  /// Clears the value of `pageRow`. Subsequent reads from it will return its default value.
  mutating func clearPageRow() {_uniqueStorage()._pageRow = nil}

  var topicNumberHints: TP_TopicNumberHintsArchive {
    get {return _storage._topicNumberHints ?? TP_TopicNumberHintsArchive()}
    set {_uniqueStorage()._topicNumberHints = newValue}
  }
  /// Returns true if `topicNumberHints` has been explicitly set.
  var hasTopicNumberHints: Bool {return _storage._topicNumberHints != nil}
  /// Clears the value of `topicNumberHints`. Subsequent reads from it will return its default value.
  mutating func clearTopicNumberHints() {_uniqueStorage()._topicNumberHints = nil}

  var flowTopicNumberHints: [TP_TopicNumberHintsArchive] {
    get {return _storage._flowTopicNumberHints}
    set {_uniqueStorage()._flowTopicNumberHints = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum PageKind: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case kPageKindNone = 0
    case kPageKindText = 1
    case kPageKindFiller = 2
    case kPageKindOrphan = 3
    case kPageKindEndnote = 4
    case kPageKindDirty = 5
    case kTppageKindPageLayout = 6

    init() {
      self = .kPageKindNone
    }

  }

  enum PageSide: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case kTppageSideUnknown = 0
    case kTppageSideLeft = 1
    case kTppageSideRight = 2

    init() {
      self = .kTppageSideUnknown
    }

  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct TP_NullChildHintArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct TP_SectionHintArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var pageHints: [TP_PageHintArchive] = []

  var startPageIndex: UInt32 {
    get {return _startPageIndex ?? 0}
    set {_startPageIndex = newValue}
  }
  /// Returns true if `startPageIndex` has been explicitly set.
  var hasStartPageIndex: Bool {return self._startPageIndex != nil}
  /// Clears the value of `startPageIndex`. Subsequent reads from it will return its default value.
  mutating func clearStartPageIndex() {self._startPageIndex = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _startPageIndex: UInt32? = nil
}

struct TP_TextboxHintArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var range: TSP_Range {
    get {return _range ?? TSP_Range()}
    set {_range = newValue}
  }
  /// Returns true if `range` has been explicitly set.
  var hasRange: Bool {return self._range != nil}
  /// Clears the value of `range`. Subsequent reads from it will return its default value.
  mutating func clearRange() {self._range = nil}

  var size: TSP_Size {
    get {return _size ?? TSP_Size()}
    set {_size = newValue}
  }
  /// Returns true if `size` has been explicitly set.
  var hasSize: Bool {return self._size != nil}
  /// Clears the value of `size`. Subsequent reads from it will return its default value.
  mutating func clearSize() {self._size = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _range: TSP_Range? = nil
  fileprivate var _size: TSP_Size? = nil
}

struct TP_TopicNumberHintLevelDataArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var number: UInt32 {
    get {return _number ?? 0}
    set {_number = newValue}
  }
  /// Returns true if `number` has been explicitly set.
  var hasNumber: Bool {return self._number != nil}
  /// Clears the value of `number`. Subsequent reads from it will return its default value.
  mutating func clearNumber() {self._number = nil}

  var labelType: UInt32 {
    get {return _labelType ?? 0}
    set {_labelType = newValue}
  }
  /// Returns true if `labelType` has been explicitly set.
  var hasLabelType: Bool {return self._labelType != nil}
  /// Clears the value of `labelType`. Subsequent reads from it will return its default value.
  mutating func clearLabelType() {self._labelType = nil}

  var numberType: UInt32 {
    get {return _numberType ?? 0}
    set {_numberType = newValue}
  }
  /// Returns true if `numberType` has been explicitly set.
  var hasNumberType: Bool {return self._numberType != nil}
  /// Clears the value of `numberType`. Subsequent reads from it will return its default value.
  mutating func clearNumberType() {self._numberType = nil}

  var isTiered: Bool {
    get {return _isTiered ?? false}
    set {_isTiered = newValue}
  }
  /// Returns true if `isTiered` has been explicitly set.
  var hasIsTiered: Bool {return self._isTiered != nil}
  /// Clears the value of `isTiered`. Subsequent reads from it will return its default value.
  mutating func clearIsTiered() {self._isTiered = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _number: UInt32? = nil
  fileprivate var _labelType: UInt32? = nil
  fileprivate var _numberType: UInt32? = nil
  fileprivate var _isTiered: Bool? = nil
}

struct TP_TopicNumberHintEntryArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var listStyle: TSP_Reference {
    get {return _listStyle ?? TSP_Reference()}
    set {_listStyle = newValue}
  }
  /// Returns true if `listStyle` has been explicitly set.
  var hasListStyle: Bool {return self._listStyle != nil}
  /// Clears the value of `listStyle`. Subsequent reads from it will return its default value.
  mutating func clearListStyle() {self._listStyle = nil}

  var topicNumbers: [TP_TopicNumberHintLevelDataArchive] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _listStyle: TSP_Reference? = nil
}

struct TP_TopicNumberHintsArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var topicNumbersMap: [TP_TopicNumberHintEntryArchive] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct TP_LayoutStateArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sectionIndex: UInt32 {
    get {return _sectionIndex ?? 0}
    set {_sectionIndex = newValue}
  }
  /// Returns true if `sectionIndex` has been explicitly set.
  var hasSectionIndex: Bool {return self._sectionIndex != nil}
  /// Clears the value of `sectionIndex`. Subsequent reads from it will return its default value.
  mutating func clearSectionIndex() {self._sectionIndex = nil}

  var sectionPageIndex: UInt32 {
    get {return _sectionPageIndex ?? 0}
    set {_sectionPageIndex = newValue}
  }
  /// Returns true if `sectionPageIndex` has been explicitly set.
  var hasSectionPageIndex: Bool {return self._sectionPageIndex != nil}
  /// Clears the value of `sectionPageIndex`. Subsequent reads from it will return its default value.
  mutating func clearSectionPageIndex() {self._sectionPageIndex = nil}

  var documentPageIndex: UInt32 {
    get {return _documentPageIndex ?? 0}
    set {_documentPageIndex = newValue}
  }
  /// Returns true if `documentPageIndex` has been explicitly set.
  var hasDocumentPageIndex: Bool {return self._documentPageIndex != nil}
  /// Clears the value of `documentPageIndex`. Subsequent reads from it will return its default value.
  mutating func clearDocumentPageIndex() {self._documentPageIndex = nil}

  var lastPageCount: UInt32 {
    get {return _lastPageCount ?? 0}
    set {_lastPageCount = newValue}
  }
  /// Returns true if `lastPageCount` has been explicitly set.
  var hasLastPageCount: Bool {return self._lastPageCount != nil}
  /// Clears the value of `lastPageCount`. Subsequent reads from it will return its default value.
  mutating func clearLastPageCount() {self._lastPageCount = nil}

  var sectionHints: [TP_SectionHintArchive] = []

  var bodyLength: UInt32 {
    get {return _bodyLength ?? 0}
    set {_bodyLength = newValue}
  }
  /// Returns true if `bodyLength` has been explicitly set.
  var hasBodyLength: Bool {return self._bodyLength != nil}
  /// Clears the value of `bodyLength`. Subsequent reads from it will return its default value.
  mutating func clearBodyLength() {self._bodyLength = nil}

  var missingFonts: [String] = []

  var osVersion: Int32 {
    get {return _osVersion ?? 0}
    set {_osVersion = newValue}
  }
  /// Returns true if `osVersion` has been explicitly set.
  var hasOsVersion: Bool {return self._osVersion != nil}
  /// Clears the value of `osVersion`. Subsequent reads from it will return its default value.
  mutating func clearOsVersion() {self._osVersion = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _sectionIndex: UInt32? = nil
  fileprivate var _sectionPageIndex: UInt32? = nil
  fileprivate var _documentPageIndex: UInt32? = nil
  fileprivate var _lastPageCount: UInt32? = nil
  fileprivate var _bodyLength: UInt32? = nil
  fileprivate var _osVersion: Int32? = nil
}

struct TP_CanvasSelectionArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// NOTE: This field was marked as deprecated in the .proto file.
  var deprecatedType: TSWP_SelectionType {
    get {return _deprecatedType ?? .normalDeprecated}
    set {_deprecatedType = newValue}
  }
  /// Returns true if `deprecatedType` has been explicitly set.
  var hasDeprecatedType: Bool {return self._deprecatedType != nil}
  /// Clears the value of `deprecatedType`. Subsequent reads from it will return its default value.
  mutating func clearDeprecatedType() {self._deprecatedType = nil}

  var visualDefinitionRange: TSP_Range {
    get {return _visualDefinitionRange ?? TSP_Range()}
    set {_visualDefinitionRange = newValue}
  }
  /// Returns true if `visualDefinitionRange` has been explicitly set.
  var hasVisualDefinitionRange: Bool {return self._visualDefinitionRange != nil}
  /// Clears the value of `visualDefinitionRange`. Subsequent reads from it will return its default value.
  mutating func clearVisualDefinitionRange() {self._visualDefinitionRange = nil}

  var styleInsertionBehavior: TSWP_StyleInsertionBehavior {
    get {return _styleInsertionBehavior ?? .noGrow}
    set {_styleInsertionBehavior = newValue}
  }
  /// Returns true if `styleInsertionBehavior` has been explicitly set.
  var hasStyleInsertionBehavior: Bool {return self._styleInsertionBehavior != nil}
  /// Clears the value of `styleInsertionBehavior`. Subsequent reads from it will return its default value.
  mutating func clearStyleInsertionBehavior() {self._styleInsertionBehavior = nil}

  var caretAffinity: TSWP_CaretAffinity {
    get {return _caretAffinity ?? .start}
    set {_caretAffinity = newValue}
  }
  /// Returns true if `caretAffinity` has been explicitly set.
  var hasCaretAffinity: Bool {return self._caretAffinity != nil}
  /// Clears the value of `caretAffinity`. Subsequent reads from it will return its default value.
  mutating func clearCaretAffinity() {self._caretAffinity = nil}

  var infos: [TSP_Reference] = []

  var excludedInfos: [TSP_Reference] = []

  var additionalInfos: [TSP_Reference] = []

  var deprecatedContainer: TSP_Reference {
    get {return _deprecatedContainer ?? TSP_Reference()}
    set {_deprecatedContainer = newValue}
  }
  /// Returns true if `deprecatedContainer` has been explicitly set.
  var hasDeprecatedContainer: Bool {return self._deprecatedContainer != nil}
  /// Clears the value of `deprecatedContainer`. Subsequent reads from it will return its default value.
  mutating func clearDeprecatedContainer() {self._deprecatedContainer = nil}

  var leadingEdge: Bool {
    get {return _leadingEdge ?? false}
    set {_leadingEdge = newValue}
  }
  /// Returns true if `leadingEdge` has been explicitly set.
  var hasLeadingEdge: Bool {return self._leadingEdge != nil}
  /// Clears the value of `leadingEdge`. Subsequent reads from it will return its default value.
  mutating func clearLeadingEdge() {self._leadingEdge = nil}

  var leadingCharIndex: UInt32 {
    get {return _leadingCharIndex ?? 0}
    set {_leadingCharIndex = newValue}
  }
  /// Returns true if `leadingCharIndex` has been explicitly set.
  var hasLeadingCharIndex: Bool {return self._leadingCharIndex != nil}
  /// Clears the value of `leadingCharIndex`. Subsequent reads from it will return its default value.
  mutating func clearLeadingCharIndex() {self._leadingCharIndex = nil}

  var type: TSWP_SelectionType {
    get {return _type ?? .normalDeprecated}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var ranges: [TSP_Range] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _deprecatedType: TSWP_SelectionType? = nil
  fileprivate var _visualDefinitionRange: TSP_Range? = nil
  fileprivate var _styleInsertionBehavior: TSWP_StyleInsertionBehavior? = nil
  fileprivate var _caretAffinity: TSWP_CaretAffinity? = nil
  fileprivate var _deprecatedContainer: TSP_Reference? = nil
  fileprivate var _leadingEdge: Bool? = nil
  fileprivate var _leadingCharIndex: UInt32? = nil
  fileprivate var _type: TSWP_SelectionType? = nil
}

struct TP_AllFootnoteSelectionArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct TP_UIStateArchive: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var obsoleteViewScale: Float {
    get {return _storage._obsoleteViewScale ?? 0}
    set {_uniqueStorage()._obsoleteViewScale = newValue}
  }
  /// Returns true if `obsoleteViewScale` has been explicitly set.
  var hasObsoleteViewScale: Bool {return _storage._obsoleteViewScale != nil}
  /// Clears the value of `obsoleteViewScale`. Subsequent reads from it will return its default value.
  mutating func clearObsoleteViewScale() {_uniqueStorage()._obsoleteViewScale = nil}

  var visibleRectOrigin: TSP_Point {
    get {return _storage._visibleRectOrigin ?? TSP_Point()}
    set {_uniqueStorage()._visibleRectOrigin = newValue}
  }
  /// Returns true if `visibleRectOrigin` has been explicitly set.
  var hasVisibleRectOrigin: Bool {return _storage._visibleRectOrigin != nil}
  /// Clears the value of `visibleRectOrigin`. Subsequent reads from it will return its default value.
  mutating func clearVisibleRectOrigin() {_uniqueStorage()._visibleRectOrigin = nil}

  var obsoleteLandscape: Bool {
    get {return _storage._obsoleteLandscape ?? false}
    set {_uniqueStorage()._obsoleteLandscape = newValue}
  }
  /// Returns true if `obsoleteLandscape` has been explicitly set.
  var hasObsoleteLandscape: Bool {return _storage._obsoleteLandscape != nil}
  /// Clears the value of `obsoleteLandscape`. Subsequent reads from it will return its default value.
  mutating func clearObsoleteLandscape() {_uniqueStorage()._obsoleteLandscape = nil}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var selection: TSP_Reference {
    get {return _storage._selection ?? TSP_Reference()}
    set {_uniqueStorage()._selection = newValue}
  }
  /// Returns true if `selection` has been explicitly set.
  var hasSelection: Bool {return _storage._selection != nil}
  /// Clears the value of `selection`. Subsequent reads from it will return its default value.
  mutating func clearSelection() {_uniqueStorage()._selection = nil}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var selectionModel: TSP_Reference {
    get {return _storage._selectionModel ?? TSP_Reference()}
    set {_uniqueStorage()._selectionModel = newValue}
  }
  /// Returns true if `selectionModel` has been explicitly set.
  var hasSelectionModel: Bool {return _storage._selectionModel != nil}
  /// Clears the value of `selectionModel`. Subsequent reads from it will return its default value.
  mutating func clearSelectionModel() {_uniqueStorage()._selectionModel = nil}

  var sectionTemplateDrawablesSelectable: Bool {
    get {return _storage._sectionTemplateDrawablesSelectable ?? false}
    set {_uniqueStorage()._sectionTemplateDrawablesSelectable = newValue}
  }
  /// Returns true if `sectionTemplateDrawablesSelectable` has been explicitly set.
  var hasSectionTemplateDrawablesSelectable: Bool {return _storage._sectionTemplateDrawablesSelectable != nil}
  /// Clears the value of `sectionTemplateDrawablesSelectable`. Subsequent reads from it will return its default value.
  mutating func clearSectionTemplateDrawablesSelectable() {_uniqueStorage()._sectionTemplateDrawablesSelectable = nil}

  var visibleRectSize: TSP_Size {
    get {return _storage._visibleRectSize ?? TSP_Size()}
    set {_uniqueStorage()._visibleRectSize = newValue}
  }
  /// Returns true if `visibleRectSize` has been explicitly set.
  var hasVisibleRectSize: Bool {return _storage._visibleRectSize != nil}
  /// Clears the value of `visibleRectSize`. Subsequent reads from it will return its default value.
  mutating func clearVisibleRectSize() {_uniqueStorage()._visibleRectSize = nil}

  var chartUiState: [TSCH_ChartUIState] {
    get {return _storage._chartUiState}
    set {_uniqueStorage()._chartUiState = newValue}
  }

  var rulerVisible: Bool {
    get {return _storage._rulerVisible ?? true}
    set {_uniqueStorage()._rulerVisible = newValue}
  }
  /// Returns true if `rulerVisible` has been explicitly set.
  var hasRulerVisible: Bool {return _storage._rulerVisible != nil}
  /// Clears the value of `rulerVisible`. Subsequent reads from it will return its default value.
  mutating func clearRulerVisible() {_uniqueStorage()._rulerVisible = nil}

  var layoutBordersVisible: Bool {
    get {return _storage._layoutBordersVisible ?? false}
    set {_uniqueStorage()._layoutBordersVisible = newValue}
  }
  /// Returns true if `layoutBordersVisible` has been explicitly set.
  var hasLayoutBordersVisible: Bool {return _storage._layoutBordersVisible != nil}
  /// Clears the value of `layoutBordersVisible`. Subsequent reads from it will return its default value.
  mutating func clearLayoutBordersVisible() {_uniqueStorage()._layoutBordersVisible = nil}

  var wordCountHudVisible: Bool {
    get {return _storage._wordCountHudVisible ?? false}
    set {_uniqueStorage()._wordCountHudVisible = newValue}
  }
  /// Returns true if `wordCountHudVisible` has been explicitly set.
  var hasWordCountHudVisible: Bool {return _storage._wordCountHudVisible != nil}
  /// Clears the value of `wordCountHudVisible`. Subsequent reads from it will return its default value.
  mutating func clearWordCountHudVisible() {_uniqueStorage()._wordCountHudVisible = nil}

  var showsComments: Bool {
    get {return _storage._showsComments ?? true}
    set {_uniqueStorage()._showsComments = newValue}
  }
  /// Returns true if `showsComments` has been explicitly set.
  var hasShowsComments: Bool {return _storage._showsComments != nil}
  /// Clears the value of `showsComments`. Subsequent reads from it will return its default value.
  mutating func clearShowsComments() {_uniqueStorage()._showsComments = nil}

  var showsPageNavigator: Bool {
    get {return _storage._showsPageNavigator ?? false}
    set {_uniqueStorage()._showsPageNavigator = newValue}
  }
  /// Returns true if `showsPageNavigator` has been explicitly set.
  var hasShowsPageNavigator: Bool {return _storage._showsPageNavigator != nil}
  /// Clears the value of `showsPageNavigator`. Subsequent reads from it will return its default value.
  mutating func clearShowsPageNavigator() {_uniqueStorage()._showsPageNavigator = nil}

  var viewScaleMode: TP_ViewScaleMode {
    get {return _storage._viewScaleMode ?? .userDefined}
    set {_uniqueStorage()._viewScaleMode = newValue}
  }
  /// Returns true if `viewScaleMode` has been explicitly set.
  var hasViewScaleMode: Bool {return _storage._viewScaleMode != nil}
  /// Clears the value of `viewScaleMode`. Subsequent reads from it will return its default value.
  mutating func clearViewScaleMode() {_uniqueStorage()._viewScaleMode = nil}

  var viewScale: Float {
    get {return _storage._viewScale ?? 1.25}
    set {_uniqueStorage()._viewScale = newValue}
  }
  /// Returns true if `viewScale` has been explicitly set.
  var hasViewScale: Bool {return _storage._viewScale != nil}
  /// Clears the value of `viewScale`. Subsequent reads from it will return its default value.
  mutating func clearViewScale() {_uniqueStorage()._viewScale = nil}

  var windowFrameOrigin: TSP_Point {
    get {return _storage._windowFrameOrigin ?? TSP_Point()}
    set {_uniqueStorage()._windowFrameOrigin = newValue}
  }
  /// Returns true if `windowFrameOrigin` has been explicitly set.
  var hasWindowFrameOrigin: Bool {return _storage._windowFrameOrigin != nil}
  /// Clears the value of `windowFrameOrigin`. Subsequent reads from it will return its default value.
  mutating func clearWindowFrameOrigin() {_uniqueStorage()._windowFrameOrigin = nil}

  var windowFrameSize: TSP_Size {
    get {return _storage._windowFrameSize ?? TSP_Size()}
    set {_uniqueStorage()._windowFrameSize = newValue}
  }
  /// Returns true if `windowFrameSize` has been explicitly set.
  var hasWindowFrameSize: Bool {return _storage._windowFrameSize != nil}
  /// Clears the value of `windowFrameSize`. Subsequent reads from it will return its default value.
  mutating func clearWindowFrameSize() {_uniqueStorage()._windowFrameSize = nil}

  var selectedInspectorSwitchSegmentIdentifier: String {
    get {return _storage._selectedInspectorSwitchSegmentIdentifier ?? String()}
    set {_uniqueStorage()._selectedInspectorSwitchSegmentIdentifier = newValue}
  }
  /// Returns true if `selectedInspectorSwitchSegmentIdentifier` has been explicitly set.
  var hasSelectedInspectorSwitchSegmentIdentifier: Bool {return _storage._selectedInspectorSwitchSegmentIdentifier != nil}
  /// Clears the value of `selectedInspectorSwitchSegmentIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearSelectedInspectorSwitchSegmentIdentifier() {_uniqueStorage()._selectedInspectorSwitchSegmentIdentifier = nil}

  var inspectorHidden: Bool {
    get {return _storage._inspectorHidden ?? false}
    set {_uniqueStorage()._inspectorHidden = newValue}
  }
  /// Returns true if `inspectorHidden` has been explicitly set.
  var hasInspectorHidden: Bool {return _storage._inspectorHidden != nil}
  /// Clears the value of `inspectorHidden`. Subsequent reads from it will return its default value.
  mutating func clearInspectorHidden() {_uniqueStorage()._inspectorHidden = nil}

  var wordCountHudType: UInt32 {
    get {return _storage._wordCountHudType ?? 0}
    set {_uniqueStorage()._wordCountHudType = newValue}
  }
  /// Returns true if `wordCountHudType` has been explicitly set.
  var hasWordCountHudType: Bool {return _storage._wordCountHudType != nil}
  /// Clears the value of `wordCountHudType`. Subsequent reads from it will return its default value.
  mutating func clearWordCountHudType() {_uniqueStorage()._wordCountHudType = nil}

  var wordCountHudXPosition: Float {
    get {return _storage._wordCountHudXPosition ?? 0}
    set {_uniqueStorage()._wordCountHudXPosition = newValue}
  }
  /// Returns true if `wordCountHudXPosition` has been explicitly set.
  var hasWordCountHudXPosition: Bool {return _storage._wordCountHudXPosition != nil}
  /// Clears the value of `wordCountHudXPosition`. Subsequent reads from it will return its default value.
  mutating func clearWordCountHudXPosition() {_uniqueStorage()._wordCountHudXPosition = nil}

  var wordCountHudYPosition: Float {
    get {return _storage._wordCountHudYPosition ?? 0}
    set {_uniqueStorage()._wordCountHudYPosition = newValue}
  }
  /// Returns true if `wordCountHudYPosition` has been explicitly set.
  var hasWordCountHudYPosition: Bool {return _storage._wordCountHudYPosition != nil}
  /// Clears the value of `wordCountHudYPosition`. Subsequent reads from it will return its default value.
  mutating func clearWordCountHudYPosition() {_uniqueStorage()._wordCountHudYPosition = nil}

  var showUserDefinedGuides: Bool {
    get {return _storage._showUserDefinedGuides ?? true}
    set {_uniqueStorage()._showUserDefinedGuides = newValue}
  }
  /// Returns true if `showUserDefinedGuides` has been explicitly set.
  var hasShowUserDefinedGuides: Bool {return _storage._showUserDefinedGuides != nil}
  /// Clears the value of `showUserDefinedGuides`. Subsequent reads from it will return its default value.
  mutating func clearShowUserDefinedGuides() {_uniqueStorage()._showUserDefinedGuides = nil}

  var shouldShowCommentSidebar: Bool {
    get {return _storage._shouldShowCommentSidebar ?? false}
    set {_uniqueStorage()._shouldShowCommentSidebar = newValue}
  }
  /// Returns true if `shouldShowCommentSidebar` has been explicitly set.
  var hasShouldShowCommentSidebar: Bool {return _storage._shouldShowCommentSidebar != nil}
  /// Clears the value of `shouldShowCommentSidebar`. Subsequent reads from it will return its default value.
  mutating func clearShouldShowCommentSidebar() {_uniqueStorage()._shouldShowCommentSidebar = nil}

  var compatibilitySelectionPath: TSK_SelectionPathArchive {
    get {return _storage._compatibilitySelectionPath ?? TSK_SelectionPathArchive()}
    set {_uniqueStorage()._compatibilitySelectionPath = newValue}
  }
  /// Returns true if `compatibilitySelectionPath` has been explicitly set.
  var hasCompatibilitySelectionPath: Bool {return _storage._compatibilitySelectionPath != nil}
  /// Clears the value of `compatibilitySelectionPath`. Subsequent reads from it will return its default value.
  mutating func clearCompatibilitySelectionPath() {_uniqueStorage()._compatibilitySelectionPath = nil}

  var showsCtmarkup: Bool {
    get {return _storage._showsCtmarkup ?? true}
    set {_uniqueStorage()._showsCtmarkup = newValue}
  }
  /// Returns true if `showsCtmarkup` has been explicitly set.
  var hasShowsCtmarkup: Bool {return _storage._showsCtmarkup != nil}
  /// Clears the value of `showsCtmarkup`. Subsequent reads from it will return its default value.
  mutating func clearShowsCtmarkup() {_uniqueStorage()._showsCtmarkup = nil}

  var showsCtdeletions: Bool {
    get {return _storage._showsCtdeletions ?? true}
    set {_uniqueStorage()._showsCtdeletions = newValue}
  }
  /// Returns true if `showsCtdeletions` has been explicitly set.
  var hasShowsCtdeletions: Bool {return _storage._showsCtdeletions != nil}
  /// Clears the value of `showsCtdeletions`. Subsequent reads from it will return its default value.
  mutating func clearShowsCtdeletions() {_uniqueStorage()._showsCtdeletions = nil}

  var changeTrackingPaused: Bool {
    get {return _storage._changeTrackingPaused ?? false}
    set {_uniqueStorage()._changeTrackingPaused = newValue}
  }
  /// Returns true if `changeTrackingPaused` has been explicitly set.
  var hasChangeTrackingPaused: Bool {return _storage._changeTrackingPaused != nil}
  /// Clears the value of `changeTrackingPaused`. Subsequent reads from it will return its default value.
  mutating func clearChangeTrackingPaused() {_uniqueStorage()._changeTrackingPaused = nil}

  var compatibility2SelectionPath: TSK_SelectionPathArchive {
    get {return _storage._compatibility2SelectionPath ?? TSK_SelectionPathArchive()}
    set {_uniqueStorage()._compatibility2SelectionPath = newValue}
  }
  /// Returns true if `compatibility2SelectionPath` has been explicitly set.
  var hasCompatibility2SelectionPath: Bool {return _storage._compatibility2SelectionPath != nil}
  /// Clears the value of `compatibility2SelectionPath`. Subsequent reads from it will return its default value.
  mutating func clearCompatibility2SelectionPath() {_uniqueStorage()._compatibility2SelectionPath = nil}

  var filteredAuthorName: String {
    get {return _storage._filteredAuthorName ?? String()}
    set {_uniqueStorage()._filteredAuthorName = newValue}
  }
  /// Returns true if `filteredAuthorName` has been explicitly set.
  var hasFilteredAuthorName: Bool {return _storage._filteredAuthorName != nil}
  /// Clears the value of `filteredAuthorName`. Subsequent reads from it will return its default value.
  mutating func clearFilteredAuthorName() {_uniqueStorage()._filteredAuthorName = nil}

  var viewScaleModeIos: TP_ViewScaleModeiOS {
    get {return _storage._viewScaleModeIos ?? .userDefined}
    set {_uniqueStorage()._viewScaleModeIos = newValue}
  }
  /// Returns true if `viewScaleModeIos` has been explicitly set.
  var hasViewScaleModeIos: Bool {return _storage._viewScaleModeIos != nil}
  /// Clears the value of `viewScaleModeIos`. Subsequent reads from it will return its default value.
  mutating func clearViewScaleModeIos() {_uniqueStorage()._viewScaleModeIos = nil}

  var filteredAuthor: TSP_Reference {
    get {return _storage._filteredAuthor ?? TSP_Reference()}
    set {_uniqueStorage()._filteredAuthor = newValue}
  }
  /// Returns true if `filteredAuthor` has been explicitly set.
  var hasFilteredAuthor: Bool {return _storage._filteredAuthor != nil}
  /// Clears the value of `filteredAuthor`. Subsequent reads from it will return its default value.
  mutating func clearFilteredAuthor() {_uniqueStorage()._filteredAuthor = nil}

  var pageViewState: TP_PageViewState {
    get {return _storage._pageViewState ?? .oneUp}
    set {_uniqueStorage()._pageViewState = newValue}
  }
  /// Returns true if `pageViewState` has been explicitly set.
  var hasPageViewState: Bool {return _storage._pageViewState != nil}
  /// Clears the value of `pageViewState`. Subsequent reads from it will return its default value.
  mutating func clearPageViewState() {_uniqueStorage()._pageViewState = nil}

  var pencilAnnotationsHidden: Bool {
    get {return _storage._pencilAnnotationsHidden ?? false}
    set {_uniqueStorage()._pencilAnnotationsHidden = newValue}
  }
  /// Returns true if `pencilAnnotationsHidden` has been explicitly set.
  var hasPencilAnnotationsHidden: Bool {return _storage._pencilAnnotationsHidden != nil}
  /// Clears the value of `pencilAnnotationsHidden`. Subsequent reads from it will return its default value.
  mutating func clearPencilAnnotationsHidden() {_uniqueStorage()._pencilAnnotationsHidden = nil}

  var freehandDrawingToolkitState: TSP_Reference {
    get {return _storage._freehandDrawingToolkitState ?? TSP_Reference()}
    set {_uniqueStorage()._freehandDrawingToolkitState = newValue}
  }
  /// Returns true if `freehandDrawingToolkitState` has been explicitly set.
  var hasFreehandDrawingToolkitState: Bool {return _storage._freehandDrawingToolkitState != nil}
  /// Clears the value of `freehandDrawingToolkitState`. Subsequent reads from it will return its default value.
  mutating func clearFreehandDrawingToolkitState() {_uniqueStorage()._freehandDrawingToolkitState = nil}

  var presentationAutoScrollSpeed: Float {
    get {return _storage._presentationAutoScrollSpeed ?? 0}
    set {_uniqueStorage()._presentationAutoScrollSpeed = newValue}
  }
  /// Returns true if `presentationAutoScrollSpeed` has been explicitly set.
  var hasPresentationAutoScrollSpeed: Bool {return _storage._presentationAutoScrollSpeed != nil}
  /// Clears the value of `presentationAutoScrollSpeed`. Subsequent reads from it will return its default value.
  mutating func clearPresentationAutoScrollSpeed() {_uniqueStorage()._presentationAutoScrollSpeed = nil}

  var selectionPathTransformer: TSP_Reference {
    get {return _storage._selectionPathTransformer ?? TSP_Reference()}
    set {_uniqueStorage()._selectionPathTransformer = newValue}
  }
  /// Returns true if `selectionPathTransformer` has been explicitly set.
  var hasSelectionPathTransformer: Bool {return _storage._selectionPathTransformer != nil}
  /// Clears the value of `selectionPathTransformer`. Subsequent reads from it will return its default value.
  mutating func clearSelectionPathTransformer() {_uniqueStorage()._selectionPathTransformer = nil}

  var showsTocNavigator: Bool {
    get {return _storage._showsTocNavigator ?? false}
    set {_uniqueStorage()._showsTocNavigator = newValue}
  }
  /// Returns true if `showsTocNavigator` has been explicitly set.
  var hasShowsTocNavigator: Bool {return _storage._showsTocNavigator != nil}
  /// Clears the value of `showsTocNavigator`. Subsequent reads from it will return its default value.
  mutating func clearShowsTocNavigator() {_uniqueStorage()._showsTocNavigator = nil}

  var showUserDefinedPageTemplateGuides: Bool {
    get {return _storage._showUserDefinedPageTemplateGuides ?? true}
    set {_uniqueStorage()._showUserDefinedPageTemplateGuides = newValue}
  }
  /// Returns true if `showUserDefinedPageTemplateGuides` has been explicitly set.
  var hasShowUserDefinedPageTemplateGuides: Bool {return _storage._showUserDefinedPageTemplateGuides != nil}
  /// Clears the value of `showUserDefinedPageTemplateGuides`. Subsequent reads from it will return its default value.
  mutating func clearShowUserDefinedPageTemplateGuides() {_uniqueStorage()._showUserDefinedPageTemplateGuides = nil}

  var editingDisabled: Bool {
    get {return _storage._editingDisabled ?? false}
    set {_uniqueStorage()._editingDisabled = newValue}
  }
  /// Returns true if `editingDisabled` has been explicitly set.
  var hasEditingDisabled: Bool {return _storage._editingDisabled != nil}
  /// Clears the value of `editingDisabled`. Subsequent reads from it will return its default value.
  mutating func clearEditingDisabled() {_uniqueStorage()._editingDisabled = nil}

  var pencilAnnotationUiState: TSP_Reference {
    get {return _storage._pencilAnnotationUiState ?? TSP_Reference()}
    set {_uniqueStorage()._pencilAnnotationUiState = newValue}
  }
  /// Returns true if `pencilAnnotationUiState` has been explicitly set.
  var hasPencilAnnotationUiState: Bool {return _storage._pencilAnnotationUiState != nil}
  /// Clears the value of `pencilAnnotationUiState`. Subsequent reads from it will return its default value.
  mutating func clearPencilAnnotationUiState() {_uniqueStorage()._pencilAnnotationUiState = nil}

  var showsFlowMode: Bool {
    get {return _storage._showsFlowMode ?? false}
    set {_uniqueStorage()._showsFlowMode = newValue}
  }
  /// Returns true if `showsFlowMode` has been explicitly set.
  var hasShowsFlowMode: Bool {return _storage._showsFlowMode != nil}
  /// Clears the value of `showsFlowMode`. Subsequent reads from it will return its default value.
  mutating func clearShowsFlowMode() {_uniqueStorage()._showsFlowMode = nil}

  var mailMergeSettings: TP_MailMergeSettingsArchive {
    get {return _storage._mailMergeSettings ?? TP_MailMergeSettingsArchive()}
    set {_uniqueStorage()._mailMergeSettings = newValue}
  }
  /// Returns true if `mailMergeSettings` has been explicitly set.
  var hasMailMergeSettings: Bool {return _storage._mailMergeSettings != nil}
  /// Clears the value of `mailMergeSettings`. Subsequent reads from it will return its default value.
  mutating func clearMailMergeSettings() {_uniqueStorage()._mailMergeSettings = nil}

  var showsActivityStream: Bool {
    get {return _storage._showsActivityStream ?? false}
    set {_uniqueStorage()._showsActivityStream = newValue}
  }
  /// Returns true if `showsActivityStream` has been explicitly set.
  var hasShowsActivityStream: Bool {return _storage._showsActivityStream != nil}
  /// Clears the value of `showsActivityStream`. Subsequent reads from it will return its default value.
  mutating func clearShowsActivityStream() {_uniqueStorage()._showsActivityStream = nil}

  var tocOrPageNavWidth: Float {
    get {return _storage._tocOrPageNavWidth ?? 0}
    set {_uniqueStorage()._tocOrPageNavWidth = newValue}
  }
  /// Returns true if `tocOrPageNavWidth` has been explicitly set.
  var hasTocOrPageNavWidth: Bool {return _storage._tocOrPageNavWidth != nil}
  /// Clears the value of `tocOrPageNavWidth`. Subsequent reads from it will return its default value.
  mutating func clearTocOrPageNavWidth() {_uniqueStorage()._tocOrPageNavWidth = nil}

  var activityOrAnnotationWidth: Float {
    get {return _storage._activityOrAnnotationWidth ?? 0}
    set {_uniqueStorage()._activityOrAnnotationWidth = newValue}
  }
  /// Returns true if `activityOrAnnotationWidth` has been explicitly set.
  var hasActivityOrAnnotationWidth: Bool {return _storage._activityOrAnnotationWidth != nil}
  /// Clears the value of `activityOrAnnotationWidth`. Subsequent reads from it will return its default value.
  mutating func clearActivityOrAnnotationWidth() {_uniqueStorage()._activityOrAnnotationWidth = nil}

  var selectionPath: TSK_SelectionPathArchive {
    get {return _storage._selectionPath ?? TSK_SelectionPathArchive()}
    set {_uniqueStorage()._selectionPath = newValue}
  }
  /// Returns true if `selectionPath` has been explicitly set.
  var hasSelectionPath: Bool {return _storage._selectionPath != nil}
  /// Clears the value of `selectionPath`. Subsequent reads from it will return its default value.
  mutating func clearSelectionPath() {_uniqueStorage()._selectionPath = nil}

  var flowModeFontScale: Float {
    get {return _storage._flowModeFontScale ?? 0}
    set {_uniqueStorage()._flowModeFontScale = newValue}
  }
  /// Returns true if `flowModeFontScale` has been explicitly set.
  var hasFlowModeFontScale: Bool {return _storage._flowModeFontScale != nil}
  /// Clears the value of `flowModeFontScale`. Subsequent reads from it will return its default value.
  mutating func clearFlowModeFontScale() {_uniqueStorage()._flowModeFontScale = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct TP_ViewStateRootArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var layoutState: TSP_Reference {
    get {return _layoutState ?? TSP_Reference()}
    set {_layoutState = newValue}
  }
  /// Returns true if `layoutState` has been explicitly set.
  var hasLayoutState: Bool {return self._layoutState != nil}
  /// Clears the value of `layoutState`. Subsequent reads from it will return its default value.
  mutating func clearLayoutState() {self._layoutState = nil}

  var viewState: TSP_Reference {
    get {return _viewState ?? TSP_Reference()}
    set {_viewState = newValue}
  }
  /// Returns true if `viewState` has been explicitly set.
  var hasViewState: Bool {return self._viewState != nil}
  /// Clears the value of `viewState`. Subsequent reads from it will return its default value.
  mutating func clearViewState() {self._viewState = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _layoutState: TSP_Reference? = nil
  fileprivate var _viewState: TSP_Reference? = nil
}

struct TP_UserDefinedGuideMapArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var userDefinedGuideStorages: [TP_UserDefinedGuideMapArchive.UserDefinedGuide] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct UserDefinedGuide: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var pageIndex: UInt32 {
      get {return _pageIndex ?? 0}
      set {_pageIndex = newValue}
    }
    /// Returns true if `pageIndex` has been explicitly set.
    var hasPageIndex: Bool {return self._pageIndex != nil}
    /// Clears the value of `pageIndex`. Subsequent reads from it will return its default value.
    mutating func clearPageIndex() {self._pageIndex = nil}

    var guideStorage: TSP_Reference {
      get {return _guideStorage ?? TSP_Reference()}
      set {_guideStorage = newValue}
    }
    /// Returns true if `guideStorage` has been explicitly set.
    var hasGuideStorage: Bool {return self._guideStorage != nil}
    /// Clears the value of `guideStorage`. Subsequent reads from it will return its default value.
    mutating func clearGuideStorage() {self._guideStorage = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _pageIndex: UInt32? = nil
    fileprivate var _guideStorage: TSP_Reference? = nil
  }

  init() {}
}

struct TP_SectionSelectionArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sections: [TSP_Reference] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct TP_SectionSelectionTransformerArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var originalSelection: TSP_Reference {
    get {return _originalSelection ?? TSP_Reference()}
    set {_originalSelection = newValue}
  }
  /// Returns true if `originalSelection` has been explicitly set.
  var hasOriginalSelection: Bool {return self._originalSelection != nil}
  /// Clears the value of `originalSelection`. Subsequent reads from it will return its default value.
  mutating func clearOriginalSelection() {self._originalSelection = nil}

  var storageUuidPath: TSP_UUIDPath {
    get {return _storageUuidPath ?? TSP_UUIDPath()}
    set {_storageUuidPath = newValue}
  }
  /// Returns true if `storageUuidPath` has been explicitly set.
  var hasStorageUuidPath: Bool {return self._storageUuidPath != nil}
  /// Clears the value of `storageUuidPath`. Subsequent reads from it will return its default value.
  mutating func clearStorageUuidPath() {self._storageUuidPath = nil}

  var sectionUuidPaths: [TSP_UUIDPath] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _originalSelection: TSP_Reference? = nil
  fileprivate var _storageUuidPath: TSP_UUIDPath? = nil
}

struct TP_SectionPasteboardObjectArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var textStorage: TSP_Reference {
    get {return _textStorage ?? TSP_Reference()}
    set {_textStorage = newValue}
  }
  /// Returns true if `textStorage` has been explicitly set.
  var hasTextStorage: Bool {return self._textStorage != nil}
  /// Clears the value of `textStorage`. Subsequent reads from it will return its default value.
  mutating func clearTextStorage() {self._textStorage = nil}

  var pageCount: UInt32 {
    get {return _pageCount ?? 0}
    set {_pageCount = newValue}
  }
  /// Returns true if `pageCount` has been explicitly set.
  var hasPageCount: Bool {return self._pageCount != nil}
  /// Clears the value of `pageCount`. Subsequent reads from it will return its default value.
  mutating func clearPageCount() {self._pageCount = nil}

  var pageDrawables: [TP_SectionPasteboardObjectArchive.PageDrawables] = []

  var orderedDrawables: [TSP_Reference] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct PageDrawables: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var pageIndex: UInt32 {
      get {return _pageIndex ?? 0}
      set {_pageIndex = newValue}
    }
    /// Returns true if `pageIndex` has been explicitly set.
    var hasPageIndex: Bool {return self._pageIndex != nil}
    /// Clears the value of `pageIndex`. Subsequent reads from it will return its default value.
    mutating func clearPageIndex() {self._pageIndex = nil}

    var drawableTagPairs: TP_DrawableTagPairsArchive {
      get {return _drawableTagPairs ?? TP_DrawableTagPairsArchive()}
      set {_drawableTagPairs = newValue}
    }
    /// Returns true if `drawableTagPairs` has been explicitly set.
    var hasDrawableTagPairs: Bool {return self._drawableTagPairs != nil}
    /// Clears the value of `drawableTagPairs`. Subsequent reads from it will return its default value.
    mutating func clearDrawableTagPairs() {self._drawableTagPairs = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _pageIndex: UInt32? = nil
    fileprivate var _drawableTagPairs: TP_DrawableTagPairsArchive? = nil
  }

  init() {}

  fileprivate var _textStorage: TSP_Reference? = nil
  fileprivate var _pageCount: UInt32? = nil
}

struct TP_SectionsAppNativeObjectArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sectionPasteboardObjects: [TSP_Reference] = []

  var pageTemplates: [TP_SectionsAppNativeObjectArchive.PageTemplatesEntry] = []

  var flows: [TSP_Reference] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct PageTemplatesEntry: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var key: TSP_UUID {
      get {return _key ?? TSP_UUID()}
      set {_key = newValue}
    }
    /// Returns true if `key` has been explicitly set.
    var hasKey: Bool {return self._key != nil}
    /// Clears the value of `key`. Subsequent reads from it will return its default value.
    mutating func clearKey() {self._key = nil}

    var value: TSP_Reference {
      get {return _value ?? TSP_Reference()}
      set {_value = newValue}
    }
    /// Returns true if `value` has been explicitly set.
    var hasValue: Bool {return self._value != nil}
    /// Clears the value of `value`. Subsequent reads from it will return its default value.
    mutating func clearValue() {self._value = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _key: TSP_UUID? = nil
    fileprivate var _value: TSP_Reference? = nil
  }

  init() {}
}

struct TP_MailMergeSettingsArchive: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var substituteClosest: Bool {
    get {return _storage._substituteClosest ?? true}
    set {_uniqueStorage()._substituteClosest = newValue}
  }
  /// Returns true if `substituteClosest` has been explicitly set.
  var hasSubstituteClosest: Bool {return _storage._substituteClosest != nil}
  /// Clears the value of `substituteClosest`. Subsequent reads from it will return its default value.
  mutating func clearSubstituteClosest() {_uniqueStorage()._substituteClosest = nil}

  var dataHasHeaderRow: Bool {
    get {return _storage._dataHasHeaderRow ?? true}
    set {_uniqueStorage()._dataHasHeaderRow = newValue}
  }
  /// Returns true if `dataHasHeaderRow` has been explicitly set.
  var hasDataHasHeaderRow: Bool {return _storage._dataHasHeaderRow != nil}
  /// Clears the value of `dataHasHeaderRow`. Subsequent reads from it will return its default value.
  mutating func clearDataHasHeaderRow() {_uniqueStorage()._dataHasHeaderRow = nil}

  var currentDataSource: TP_MailMergeSettingsArchive.CurrentDataSource {
    get {return _storage._currentDataSource ?? .kContactsDataSource}
    set {_uniqueStorage()._currentDataSource = newValue}
  }
  /// Returns true if `currentDataSource` has been explicitly set.
  var hasCurrentDataSource: Bool {return _storage._currentDataSource != nil}
  /// Clears the value of `currentDataSource`. Subsequent reads from it will return its default value.
  mutating func clearCurrentDataSource() {_uniqueStorage()._currentDataSource = nil}

  var contactsGroupIdentifier: String {
    get {return _storage._contactsGroupIdentifier ?? String()}
    set {_uniqueStorage()._contactsGroupIdentifier = newValue}
  }
  /// Returns true if `contactsGroupIdentifier` has been explicitly set.
  var hasContactsGroupIdentifier: Bool {return _storage._contactsGroupIdentifier != nil}
  /// Clears the value of `contactsGroupIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearContactsGroupIdentifier() {_uniqueStorage()._contactsGroupIdentifier = nil}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var numbersDocumentURL: String {
    get {return _storage._numbersDocumentURL ?? String()}
    set {_uniqueStorage()._numbersDocumentURL = newValue}
  }
  /// Returns true if `numbersDocumentURL` has been explicitly set.
  var hasNumbersDocumentURL: Bool {return _storage._numbersDocumentURL != nil}
  /// Clears the value of `numbersDocumentURL`. Subsequent reads from it will return its default value.
  mutating func clearNumbersDocumentURL() {_uniqueStorage()._numbersDocumentURL = nil}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var numbersTableUuid: TSP_UUID {
    get {return _storage._numbersTableUuid ?? TSP_UUID()}
    set {_uniqueStorage()._numbersTableUuid = newValue}
  }
  /// Returns true if `numbersTableUuid` has been explicitly set.
  var hasNumbersTableUuid: Bool {return _storage._numbersTableUuid != nil}
  /// Clears the value of `numbersTableUuid`. Subsequent reads from it will return its default value.
  mutating func clearNumbersTableUuid() {_uniqueStorage()._numbersTableUuid = nil}

  /// NOTE: This field was marked as deprecated in the .proto file.
  var numbersBookmarkData: Data {
    get {return _storage._numbersBookmarkData ?? Data()}
    set {_uniqueStorage()._numbersBookmarkData = newValue}
  }
  /// Returns true if `numbersBookmarkData` has been explicitly set.
  var hasNumbersBookmarkData: Bool {return _storage._numbersBookmarkData != nil}
  /// Clears the value of `numbersBookmarkData`. Subsequent reads from it will return its default value.
  mutating func clearNumbersBookmarkData() {_uniqueStorage()._numbersBookmarkData = nil}

  var numbersDataSource: TP_MailMergeSettingsArchive.NumbersDataSourceArchive {
    get {return _storage._numbersDataSource ?? TP_MailMergeSettingsArchive.NumbersDataSourceArchive()}
    set {_uniqueStorage()._numbersDataSource = newValue}
  }
  /// Returns true if `numbersDataSource` has been explicitly set.
  var hasNumbersDataSource: Bool {return _storage._numbersDataSource != nil}
  /// Clears the value of `numbersDataSource`. Subsequent reads from it will return its default value.
  mutating func clearNumbersDataSource() {_uniqueStorage()._numbersDataSource = nil}

  var mergingNumbersDataSource: TP_MailMergeSettingsArchive.NumbersDataSourceArchive {
    get {return _storage._mergingNumbersDataSource ?? TP_MailMergeSettingsArchive.NumbersDataSourceArchive()}
    set {_uniqueStorage()._mergingNumbersDataSource = newValue}
  }
  /// Returns true if `mergingNumbersDataSource` has been explicitly set.
  var hasMergingNumbersDataSource: Bool {return _storage._mergingNumbersDataSource != nil}
  /// Clears the value of `mergingNumbersDataSource`. Subsequent reads from it will return its default value.
  mutating func clearMergingNumbersDataSource() {_uniqueStorage()._mergingNumbersDataSource = nil}

  var contactsFieldsMap: [TP_MailMergeSettingsArchive.ContactsFieldsMapEntry] {
    get {return _storage._contactsFieldsMap}
    set {_uniqueStorage()._contactsFieldsMap = newValue}
  }

  var numbersFieldsMap: [TP_MailMergeSettingsArchive.NumbersFieldsMapEntry] {
    get {return _storage._numbersFieldsMap}
    set {_uniqueStorage()._numbersFieldsMap = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum CurrentDataSource: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case kContactsDataSource = 0
    case kNumbersDataSource = 1

    init() {
      self = .kContactsDataSource
    }

  }

  struct NumbersDataSourceArchive: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var bookmarkData: Data {
      get {return _bookmarkData ?? Data()}
      set {_bookmarkData = newValue}
    }
    /// Returns true if `bookmarkData` has been explicitly set.
    var hasBookmarkData: Bool {return self._bookmarkData != nil}
    /// Clears the value of `bookmarkData`. Subsequent reads from it will return its default value.
    mutating func clearBookmarkData() {self._bookmarkData = nil}

    var tableUuid: TSP_UUID {
      get {return _tableUuid ?? TSP_UUID()}
      set {_tableUuid = newValue}
    }
    /// Returns true if `tableUuid` has been explicitly set.
    var hasTableUuid: Bool {return self._tableUuid != nil}
    /// Clears the value of `tableUuid`. Subsequent reads from it will return its default value.
    mutating func clearTableUuid() {self._tableUuid = nil}

    var documentUuid: TSP_UUID {
      get {return _documentUuid ?? TSP_UUID()}
      set {_documentUuid = newValue}
    }
    /// Returns true if `documentUuid` has been explicitly set.
    var hasDocumentUuid: Bool {return self._documentUuid != nil}
    /// Clears the value of `documentUuid`. Subsequent reads from it will return its default value.
    mutating func clearDocumentUuid() {self._documentUuid = nil}

    var mergeFieldTypes: [TSWP_MergeFieldTypeArchive] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _bookmarkData: Data? = nil
    fileprivate var _tableUuid: TSP_UUID? = nil
    fileprivate var _documentUuid: TSP_UUID? = nil
  }

  struct ContactsFieldsMapEntry: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var key: String {
      get {return _key ?? String()}
      set {_key = newValue}
    }
    /// Returns true if `key` has been explicitly set.
    var hasKey: Bool {return self._key != nil}
    /// Clears the value of `key`. Subsequent reads from it will return its default value.
    mutating func clearKey() {self._key = nil}

    var value: TSWP_MergeFieldTypeArchive {
      get {return _value ?? TSWP_MergeFieldTypeArchive()}
      set {_value = newValue}
    }
    /// Returns true if `value` has been explicitly set.
    var hasValue: Bool {return self._value != nil}
    /// Clears the value of `value`. Subsequent reads from it will return its default value.
    mutating func clearValue() {self._value = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _key: String? = nil
    fileprivate var _value: TSWP_MergeFieldTypeArchive? = nil
  }

  struct NumbersFieldsMapEntry: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var key: String {
      get {return _key ?? String()}
      set {_key = newValue}
    }
    /// Returns true if `key` has been explicitly set.
    var hasKey: Bool {return self._key != nil}
    /// Clears the value of `key`. Subsequent reads from it will return its default value.
    mutating func clearKey() {self._key = nil}

    var value: TSWP_MergeFieldTypeArchive {
      get {return _value ?? TSWP_MergeFieldTypeArchive()}
      set {_value = newValue}
    }
    /// Returns true if `value` has been explicitly set.
    var hasValue: Bool {return self._value != nil}
    /// Clears the value of `value`. Subsequent reads from it will return its default value.
    mutating func clearValue() {self._value = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _key: String? = nil
    fileprivate var _value: TSWP_MergeFieldTypeArchive? = nil
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "TP"

extension TP_ViewScaleMode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0ViewScaleMode_UserDefined\0\u{1}ViewScaleMode_FitWidth\0\u{1}ViewScaleMode_FirPage\0")
}

extension TP_ViewScaleModeiOS: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0ViewScaleModeiOS_Undefined\0\u{1}ViewScaleModeiOS_UserDefined\0\u{1}ViewScaleModeiOS_FitWidth\0\u{1}ViewScaleModeiOS_FitMinimum\0\u{1}ViewScaleModeiOS_FitPortraitWidth\0")
}

extension TP_PageViewState: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0PageViewState_OneUp\0\u{1}PageViewState_TwoUp\0")
}

extension TP_DocumentArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DocumentArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\u{2}stylesheet\0\u{3}floating_drawables\0\u{3}body_storage\0\u{1}section\0\u{1}theme\0\u{1}settings\0\u{4}\u{4}deprecated_layout_state\0\u{3}deprecated_view_state\0\u{3}citation_records\0\u{3}toc_styles\0\u{1}super\0\u{3}change_sessions\0\u{3}most_recent_change_session\0\u{4}\u{3}drawables_zorder\0\u{3}uses_single_header_footer\0\u{4}\u{9}page_width\0\u{3}page_height\0\u{3}left_margin\0\u{3}right_margin\0\u{3}top_margin\0\u{3}bottom_margin\0\u{3}header_margin\0\u{3}footer_margin\0\u{3}page_scale\0\u{3}lays_out_body_vertically\0\u{3}change_tracking_enabled\0\u{3}tables_custom_format_list\0\u{1}orientation\0\u{3}printer_id\0\u{3}paper_id\0\u{3}equation_environment\0\u{3}show_in_bookmarks_list_paragraph_styles_property_initialized\0\u{3}flow_info_container\0\u{3}page_templates\0\u{3}should_use_anchored_drawable_wrap_slop\0\u{3}merge_data\0")

  fileprivate class _StorageClass {
    var _super: TSA_DocumentArchive? = nil
    var _stylesheet: TSP_Reference? = nil
    var _floatingDrawables: TSP_Reference? = nil
    var _bodyStorage: TSP_Reference? = nil
    var _section: TSP_Reference? = nil
    var _theme: TSP_Reference? = nil
    var _settings: TSP_Reference? = nil
    var _deprecatedLayoutState: TSP_Reference? = nil
    var _deprecatedViewState: TSP_Reference? = nil
    var _citationRecords: [TSP_Reference] = []
    var _tocStyles: [TSP_Reference] = []
    var _changeSessions: [TSP_Reference] = []
    var _mostRecentChangeSession: TSP_Reference? = nil
    var _drawablesZorder: TSP_Reference? = nil
    var _usesSingleHeaderFooter: Bool? = nil
    var _pageWidth: Float? = nil
    var _pageHeight: Float? = nil
    var _leftMargin: Float? = nil
    var _rightMargin: Float? = nil
    var _topMargin: Float? = nil
    var _bottomMargin: Float? = nil
    var _headerMargin: Float? = nil
    var _footerMargin: Float? = nil
    var _pageScale: Float? = nil
    var _laysOutBodyVertically: Bool? = nil
    var _changeTrackingEnabled: Bool? = nil
    var _tablesCustomFormatList: TSP_Reference? = nil
    var _orientation: UInt32? = nil
    var _printerID: String? = nil
    var _paperID: String? = nil
    var _equationEnvironment: TSP_DataReference? = nil
    var _showInBookmarksListParagraphStylesPropertyInitialized: Bool? = nil
    var _flowInfoContainer: TSP_Reference? = nil
    var _pageTemplates: [TSP_Reference] = []
    var _shouldUseAnchoredDrawableWrapSlop: Bool? = nil
    var _mergeData: TSP_Reference? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _super = source._super
      _stylesheet = source._stylesheet
      _floatingDrawables = source._floatingDrawables
      _bodyStorage = source._bodyStorage
      _section = source._section
      _theme = source._theme
      _settings = source._settings
      _deprecatedLayoutState = source._deprecatedLayoutState
      _deprecatedViewState = source._deprecatedViewState
      _citationRecords = source._citationRecords
      _tocStyles = source._tocStyles
      _changeSessions = source._changeSessions
      _mostRecentChangeSession = source._mostRecentChangeSession
      _drawablesZorder = source._drawablesZorder
      _usesSingleHeaderFooter = source._usesSingleHeaderFooter
      _pageWidth = source._pageWidth
      _pageHeight = source._pageHeight
      _leftMargin = source._leftMargin
      _rightMargin = source._rightMargin
      _topMargin = source._topMargin
      _bottomMargin = source._bottomMargin
      _headerMargin = source._headerMargin
      _footerMargin = source._footerMargin
      _pageScale = source._pageScale
      _laysOutBodyVertically = source._laysOutBodyVertically
      _changeTrackingEnabled = source._changeTrackingEnabled
      _tablesCustomFormatList = source._tablesCustomFormatList
      _orientation = source._orientation
      _printerID = source._printerID
      _paperID = source._paperID
      _equationEnvironment = source._equationEnvironment
      _showInBookmarksListParagraphStylesPropertyInitialized = source._showInBookmarksListParagraphStylesPropertyInitialized
      _flowInfoContainer = source._flowInfoContainer
      _pageTemplates = source._pageTemplates
      _shouldUseAnchoredDrawableWrapSlop = source._shouldUseAnchoredDrawableWrapSlop
      _mergeData = source._mergeData
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._super == nil {return false}
      if let v = _storage._super, !v.isInitialized {return false}
      if let v = _storage._stylesheet, !v.isInitialized {return false}
      if let v = _storage._floatingDrawables, !v.isInitialized {return false}
      if let v = _storage._bodyStorage, !v.isInitialized {return false}
      if let v = _storage._section, !v.isInitialized {return false}
      if let v = _storage._theme, !v.isInitialized {return false}
      if let v = _storage._settings, !v.isInitialized {return false}
      if let v = _storage._deprecatedLayoutState, !v.isInitialized {return false}
      if let v = _storage._deprecatedViewState, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._citationRecords) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._tocStyles) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._changeSessions) {return false}
      if let v = _storage._mostRecentChangeSession, !v.isInitialized {return false}
      if let v = _storage._drawablesZorder, !v.isInitialized {return false}
      if let v = _storage._tablesCustomFormatList, !v.isInitialized {return false}
      if let v = _storage._equationEnvironment, !v.isInitialized {return false}
      if let v = _storage._flowInfoContainer, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._pageTemplates) {return false}
      if let v = _storage._mergeData, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._stylesheet) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._floatingDrawables) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._bodyStorage) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._section) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._theme) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._settings) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._deprecatedLayoutState) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._deprecatedViewState) }()
        case 13: try { try decoder.decodeRepeatedMessageField(value: &_storage._citationRecords) }()
        case 14: try { try decoder.decodeRepeatedMessageField(value: &_storage._tocStyles) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._super) }()
        case 16: try { try decoder.decodeRepeatedMessageField(value: &_storage._changeSessions) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._mostRecentChangeSession) }()
        case 20: try { try decoder.decodeSingularMessageField(value: &_storage._drawablesZorder) }()
        case 21: try { try decoder.decodeSingularBoolField(value: &_storage._usesSingleHeaderFooter) }()
        case 30: try { try decoder.decodeSingularFloatField(value: &_storage._pageWidth) }()
        case 31: try { try decoder.decodeSingularFloatField(value: &_storage._pageHeight) }()
        case 32: try { try decoder.decodeSingularFloatField(value: &_storage._leftMargin) }()
        case 33: try { try decoder.decodeSingularFloatField(value: &_storage._rightMargin) }()
        case 34: try { try decoder.decodeSingularFloatField(value: &_storage._topMargin) }()
        case 35: try { try decoder.decodeSingularFloatField(value: &_storage._bottomMargin) }()
        case 36: try { try decoder.decodeSingularFloatField(value: &_storage._headerMargin) }()
        case 37: try { try decoder.decodeSingularFloatField(value: &_storage._footerMargin) }()
        case 38: try { try decoder.decodeSingularFloatField(value: &_storage._pageScale) }()
        case 39: try { try decoder.decodeSingularBoolField(value: &_storage._laysOutBodyVertically) }()
        case 40: try { try decoder.decodeSingularBoolField(value: &_storage._changeTrackingEnabled) }()
        case 41: try { try decoder.decodeSingularMessageField(value: &_storage._tablesCustomFormatList) }()
        case 42: try { try decoder.decodeSingularUInt32Field(value: &_storage._orientation) }()
        case 43: try { try decoder.decodeSingularStringField(value: &_storage._printerID) }()
        case 44: try { try decoder.decodeSingularStringField(value: &_storage._paperID) }()
        case 45: try { try decoder.decodeSingularMessageField(value: &_storage._equationEnvironment) }()
        case 46: try { try decoder.decodeSingularBoolField(value: &_storage._showInBookmarksListParagraphStylesPropertyInitialized) }()
        case 47: try { try decoder.decodeSingularMessageField(value: &_storage._flowInfoContainer) }()
        case 48: try { try decoder.decodeRepeatedMessageField(value: &_storage._pageTemplates) }()
        case 49: try { try decoder.decodeSingularBoolField(value: &_storage._shouldUseAnchoredDrawableWrapSlop) }()
        case 50: try { try decoder.decodeSingularMessageField(value: &_storage._mergeData) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._stylesheet {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._floatingDrawables {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._bodyStorage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._section {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._theme {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._settings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._deprecatedLayoutState {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._deprecatedViewState {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      if !_storage._citationRecords.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._citationRecords, fieldNumber: 13)
      }
      if !_storage._tocStyles.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._tocStyles, fieldNumber: 14)
      }
      try { if let v = _storage._super {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      if !_storage._changeSessions.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._changeSessions, fieldNumber: 16)
      }
      try { if let v = _storage._mostRecentChangeSession {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._drawablesZorder {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._usesSingleHeaderFooter {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._pageWidth {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 30)
      } }()
      try { if let v = _storage._pageHeight {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 31)
      } }()
      try { if let v = _storage._leftMargin {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 32)
      } }()
      try { if let v = _storage._rightMargin {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 33)
      } }()
      try { if let v = _storage._topMargin {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 34)
      } }()
      try { if let v = _storage._bottomMargin {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 35)
      } }()
      try { if let v = _storage._headerMargin {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 36)
      } }()
      try { if let v = _storage._footerMargin {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 37)
      } }()
      try { if let v = _storage._pageScale {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 38)
      } }()
      try { if let v = _storage._laysOutBodyVertically {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 39)
      } }()
      try { if let v = _storage._changeTrackingEnabled {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 40)
      } }()
      try { if let v = _storage._tablesCustomFormatList {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 41)
      } }()
      try { if let v = _storage._orientation {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 42)
      } }()
      try { if let v = _storage._printerID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 43)
      } }()
      try { if let v = _storage._paperID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 44)
      } }()
      try { if let v = _storage._equationEnvironment {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 45)
      } }()
      try { if let v = _storage._showInBookmarksListParagraphStylesPropertyInitialized {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 46)
      } }()
      try { if let v = _storage._flowInfoContainer {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 47)
      } }()
      if !_storage._pageTemplates.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._pageTemplates, fieldNumber: 48)
      }
      try { if let v = _storage._shouldUseAnchoredDrawableWrapSlop {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 49)
      } }()
      try { if let v = _storage._mergeData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 50)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TP_DocumentArchive, rhs: TP_DocumentArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._super != rhs_storage._super {return false}
        if _storage._stylesheet != rhs_storage._stylesheet {return false}
        if _storage._floatingDrawables != rhs_storage._floatingDrawables {return false}
        if _storage._bodyStorage != rhs_storage._bodyStorage {return false}
        if _storage._section != rhs_storage._section {return false}
        if _storage._theme != rhs_storage._theme {return false}
        if _storage._settings != rhs_storage._settings {return false}
        if _storage._deprecatedLayoutState != rhs_storage._deprecatedLayoutState {return false}
        if _storage._deprecatedViewState != rhs_storage._deprecatedViewState {return false}
        if _storage._citationRecords != rhs_storage._citationRecords {return false}
        if _storage._tocStyles != rhs_storage._tocStyles {return false}
        if _storage._changeSessions != rhs_storage._changeSessions {return false}
        if _storage._mostRecentChangeSession != rhs_storage._mostRecentChangeSession {return false}
        if _storage._drawablesZorder != rhs_storage._drawablesZorder {return false}
        if _storage._usesSingleHeaderFooter != rhs_storage._usesSingleHeaderFooter {return false}
        if _storage._pageWidth != rhs_storage._pageWidth {return false}
        if _storage._pageHeight != rhs_storage._pageHeight {return false}
        if _storage._leftMargin != rhs_storage._leftMargin {return false}
        if _storage._rightMargin != rhs_storage._rightMargin {return false}
        if _storage._topMargin != rhs_storage._topMargin {return false}
        if _storage._bottomMargin != rhs_storage._bottomMargin {return false}
        if _storage._headerMargin != rhs_storage._headerMargin {return false}
        if _storage._footerMargin != rhs_storage._footerMargin {return false}
        if _storage._pageScale != rhs_storage._pageScale {return false}
        if _storage._laysOutBodyVertically != rhs_storage._laysOutBodyVertically {return false}
        if _storage._changeTrackingEnabled != rhs_storage._changeTrackingEnabled {return false}
        if _storage._tablesCustomFormatList != rhs_storage._tablesCustomFormatList {return false}
        if _storage._orientation != rhs_storage._orientation {return false}
        if _storage._printerID != rhs_storage._printerID {return false}
        if _storage._paperID != rhs_storage._paperID {return false}
        if _storage._equationEnvironment != rhs_storage._equationEnvironment {return false}
        if _storage._showInBookmarksListParagraphStylesPropertyInitialized != rhs_storage._showInBookmarksListParagraphStylesPropertyInitialized {return false}
        if _storage._flowInfoContainer != rhs_storage._flowInfoContainer {return false}
        if _storage._pageTemplates != rhs_storage._pageTemplates {return false}
        if _storage._shouldUseAnchoredDrawableWrapSlop != rhs_storage._shouldUseAnchoredDrawableWrapSlop {return false}
        if _storage._mergeData != rhs_storage._mergeData {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TP_ThemeArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ThemeArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}super\0")

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._super) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TP_ThemeArchive, rhs: TP_ThemeArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TP_SettingsArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SettingsArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}body\0\u{1}headers\0\u{1}footers\0\u{1}preview\0\u{3}copy_movies\0\u{3}copy_assets\0\u{3}placeholder_authoring\0\u{3}links_enabled\0\u{1}hyphenation\0\u{3}use_ligatures\0\u{3}toc_links_enabled\0\u{3}show_ct_markup\0\u{3}show_ct_deletions\0\u{3}ct_bubbles_visibility\0\u{3}change_bars_visible\0\u{3}format_changes_visible\0\u{3}annotations_visible\0\u{3}document_is_rtl\0\u{4}\u{2}decimal_tab\0\u{1}language\0\u{3}hyphenation_language\0\u{3}creation_locale\0\u{3}last_locale\0\u{3}orig_template\0\u{3}creation_date\0\u{3}bibliography_format\0\u{4}\u{3}footnote_kind\0\u{3}footnote_format\0\u{3}footnote_numbering\0\u{3}footnote_gap\0\u{3}facing_pages\0\u{4}\u{6}section_authoring\0")

  fileprivate class _StorageClass {
    var _body: Bool? = nil
    var _headers: Bool? = nil
    var _footers: Bool? = nil
    var _preview: Bool? = nil
    var _copyMovies: Bool? = nil
    var _copyAssets: Bool? = nil
    var _placeholderAuthoring: Bool? = nil
    var _linksEnabled: Bool? = nil
    var _hyphenation: Bool? = nil
    var _useLigatures: Bool? = nil
    var _tocLinksEnabled: Bool? = nil
    var _showCtMarkup: Bool? = nil
    var _showCtDeletions: Bool? = nil
    var _ctBubblesVisibility: Int32? = nil
    var _changeBarsVisible: Bool? = nil
    var _formatChangesVisible: Bool? = nil
    var _annotationsVisible: Bool? = nil
    var _documentIsRtl: Bool? = nil
    var _decimalTab: String? = nil
    var _language: String? = nil
    var _hyphenationLanguage: String? = nil
    var _creationLocale: String? = nil
    var _lastLocale: String? = nil
    var _origTemplate: String? = nil
    var _creationDate: String? = nil
    var _bibliographyFormat: String? = nil
    var _footnoteKind: TP_SettingsArchive.FootnoteKind? = nil
    var _footnoteFormat: TP_SettingsArchive.FootnoteFormat? = nil
    var _footnoteNumbering: TP_SettingsArchive.FootnoteNumbering? = nil
    var _footnoteGap: Int32? = nil
    var _facingPages: Bool? = nil
    var _sectionAuthoring: Bool? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _body = source._body
      _headers = source._headers
      _footers = source._footers
      _preview = source._preview
      _copyMovies = source._copyMovies
      _copyAssets = source._copyAssets
      _placeholderAuthoring = source._placeholderAuthoring
      _linksEnabled = source._linksEnabled
      _hyphenation = source._hyphenation
      _useLigatures = source._useLigatures
      _tocLinksEnabled = source._tocLinksEnabled
      _showCtMarkup = source._showCtMarkup
      _showCtDeletions = source._showCtDeletions
      _ctBubblesVisibility = source._ctBubblesVisibility
      _changeBarsVisible = source._changeBarsVisible
      _formatChangesVisible = source._formatChangesVisible
      _annotationsVisible = source._annotationsVisible
      _documentIsRtl = source._documentIsRtl
      _decimalTab = source._decimalTab
      _language = source._language
      _hyphenationLanguage = source._hyphenationLanguage
      _creationLocale = source._creationLocale
      _lastLocale = source._lastLocale
      _origTemplate = source._origTemplate
      _creationDate = source._creationDate
      _bibliographyFormat = source._bibliographyFormat
      _footnoteKind = source._footnoteKind
      _footnoteFormat = source._footnoteFormat
      _footnoteNumbering = source._footnoteNumbering
      _footnoteGap = source._footnoteGap
      _facingPages = source._facingPages
      _sectionAuthoring = source._sectionAuthoring
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularBoolField(value: &_storage._body) }()
        case 2: try { try decoder.decodeSingularBoolField(value: &_storage._headers) }()
        case 3: try { try decoder.decodeSingularBoolField(value: &_storage._footers) }()
        case 4: try { try decoder.decodeSingularBoolField(value: &_storage._preview) }()
        case 5: try { try decoder.decodeSingularBoolField(value: &_storage._copyMovies) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._copyAssets) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._placeholderAuthoring) }()
        case 8: try { try decoder.decodeSingularBoolField(value: &_storage._linksEnabled) }()
        case 9: try { try decoder.decodeSingularBoolField(value: &_storage._hyphenation) }()
        case 10: try { try decoder.decodeSingularBoolField(value: &_storage._useLigatures) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._tocLinksEnabled) }()
        case 12: try { try decoder.decodeSingularBoolField(value: &_storage._showCtMarkup) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._showCtDeletions) }()
        case 14: try { try decoder.decodeSingularInt32Field(value: &_storage._ctBubblesVisibility) }()
        case 15: try { try decoder.decodeSingularBoolField(value: &_storage._changeBarsVisible) }()
        case 16: try { try decoder.decodeSingularBoolField(value: &_storage._formatChangesVisible) }()
        case 17: try { try decoder.decodeSingularBoolField(value: &_storage._annotationsVisible) }()
        case 18: try { try decoder.decodeSingularBoolField(value: &_storage._documentIsRtl) }()
        case 20: try { try decoder.decodeSingularStringField(value: &_storage._decimalTab) }()
        case 21: try { try decoder.decodeSingularStringField(value: &_storage._language) }()
        case 22: try { try decoder.decodeSingularStringField(value: &_storage._hyphenationLanguage) }()
        case 23: try { try decoder.decodeSingularStringField(value: &_storage._creationLocale) }()
        case 24: try { try decoder.decodeSingularStringField(value: &_storage._lastLocale) }()
        case 25: try { try decoder.decodeSingularStringField(value: &_storage._origTemplate) }()
        case 26: try { try decoder.decodeSingularStringField(value: &_storage._creationDate) }()
        case 27: try { try decoder.decodeSingularStringField(value: &_storage._bibliographyFormat) }()
        case 30: try { try decoder.decodeSingularEnumField(value: &_storage._footnoteKind) }()
        case 31: try { try decoder.decodeSingularEnumField(value: &_storage._footnoteFormat) }()
        case 32: try { try decoder.decodeSingularEnumField(value: &_storage._footnoteNumbering) }()
        case 33: try { try decoder.decodeSingularInt32Field(value: &_storage._footnoteGap) }()
        case 34: try { try decoder.decodeSingularBoolField(value: &_storage._facingPages) }()
        case 40: try { try decoder.decodeSingularBoolField(value: &_storage._sectionAuthoring) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._body {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._headers {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._footers {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._preview {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._copyMovies {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._copyAssets {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._placeholderAuthoring {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._linksEnabled {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._hyphenation {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._useLigatures {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._tocLinksEnabled {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._showCtMarkup {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._showCtDeletions {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._ctBubblesVisibility {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._changeBarsVisible {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._formatChangesVisible {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._annotationsVisible {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._documentIsRtl {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._decimalTab {
        try visitor.visitSingularStringField(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._language {
        try visitor.visitSingularStringField(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._hyphenationLanguage {
        try visitor.visitSingularStringField(value: v, fieldNumber: 22)
      } }()
      try { if let v = _storage._creationLocale {
        try visitor.visitSingularStringField(value: v, fieldNumber: 23)
      } }()
      try { if let v = _storage._lastLocale {
        try visitor.visitSingularStringField(value: v, fieldNumber: 24)
      } }()
      try { if let v = _storage._origTemplate {
        try visitor.visitSingularStringField(value: v, fieldNumber: 25)
      } }()
      try { if let v = _storage._creationDate {
        try visitor.visitSingularStringField(value: v, fieldNumber: 26)
      } }()
      try { if let v = _storage._bibliographyFormat {
        try visitor.visitSingularStringField(value: v, fieldNumber: 27)
      } }()
      try { if let v = _storage._footnoteKind {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 30)
      } }()
      try { if let v = _storage._footnoteFormat {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 31)
      } }()
      try { if let v = _storage._footnoteNumbering {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 32)
      } }()
      try { if let v = _storage._footnoteGap {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 33)
      } }()
      try { if let v = _storage._facingPages {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 34)
      } }()
      try { if let v = _storage._sectionAuthoring {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 40)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TP_SettingsArchive, rhs: TP_SettingsArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._body != rhs_storage._body {return false}
        if _storage._headers != rhs_storage._headers {return false}
        if _storage._footers != rhs_storage._footers {return false}
        if _storage._preview != rhs_storage._preview {return false}
        if _storage._copyMovies != rhs_storage._copyMovies {return false}
        if _storage._copyAssets != rhs_storage._copyAssets {return false}
        if _storage._placeholderAuthoring != rhs_storage._placeholderAuthoring {return false}
        if _storage._linksEnabled != rhs_storage._linksEnabled {return false}
        if _storage._hyphenation != rhs_storage._hyphenation {return false}
        if _storage._useLigatures != rhs_storage._useLigatures {return false}
        if _storage._tocLinksEnabled != rhs_storage._tocLinksEnabled {return false}
        if _storage._showCtMarkup != rhs_storage._showCtMarkup {return false}
        if _storage._showCtDeletions != rhs_storage._showCtDeletions {return false}
        if _storage._ctBubblesVisibility != rhs_storage._ctBubblesVisibility {return false}
        if _storage._changeBarsVisible != rhs_storage._changeBarsVisible {return false}
        if _storage._formatChangesVisible != rhs_storage._formatChangesVisible {return false}
        if _storage._annotationsVisible != rhs_storage._annotationsVisible {return false}
        if _storage._documentIsRtl != rhs_storage._documentIsRtl {return false}
        if _storage._decimalTab != rhs_storage._decimalTab {return false}
        if _storage._language != rhs_storage._language {return false}
        if _storage._hyphenationLanguage != rhs_storage._hyphenationLanguage {return false}
        if _storage._creationLocale != rhs_storage._creationLocale {return false}
        if _storage._lastLocale != rhs_storage._lastLocale {return false}
        if _storage._origTemplate != rhs_storage._origTemplate {return false}
        if _storage._creationDate != rhs_storage._creationDate {return false}
        if _storage._bibliographyFormat != rhs_storage._bibliographyFormat {return false}
        if _storage._footnoteKind != rhs_storage._footnoteKind {return false}
        if _storage._footnoteFormat != rhs_storage._footnoteFormat {return false}
        if _storage._footnoteNumbering != rhs_storage._footnoteNumbering {return false}
        if _storage._footnoteGap != rhs_storage._footnoteGap {return false}
        if _storage._facingPages != rhs_storage._facingPages {return false}
        if _storage._sectionAuthoring != rhs_storage._sectionAuthoring {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TP_SettingsArchive.FootnoteKind: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0kFootnoteKindFootnotes\0\u{1}kFootnoteKindDocumentEndnotes\0\u{1}kFootnoteKindSectionEndnotes\0")
}

extension TP_SettingsArchive.FootnoteFormat: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0kFootnoteFormatNumeric\0\u{1}kFootnoteFormatRoman\0\u{1}kFootnoteFormatSymbolic\0\u{1}kFootnoteFormatJapaneseNumeric\0\u{1}kFootnoteFormatJapaneseIdeographic\0\u{1}kFootnoteFormatArabicNumeric\0")
}

extension TP_SettingsArchive.FootnoteNumbering: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0kFootnoteNumberingContinuous\0\u{1}kFootnoteNumberingRestartEachPage\0\u{1}kFootnoteNumberingRestartEachSection\0")
}

extension TP_PlaceholderArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PlaceholderArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}super\0")

  public var isInitialized: Bool {
    if self._super == nil {return false}
    if let v = self._super, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._super) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._super {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TP_PlaceholderArchive, rhs: TP_PlaceholderArchive) -> Bool {
    if lhs._super != rhs._super {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TP_DrawableTagPairsArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DrawableTagPairsArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}drawable_tag_pairs\0")

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.drawableTagPairs) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.drawableTagPairs) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.drawableTagPairs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.drawableTagPairs, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TP_DrawableTagPairsArchive, rhs: TP_DrawableTagPairsArchive) -> Bool {
    if lhs.drawableTagPairs != rhs.drawableTagPairs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TP_DrawableTagPairsArchive.DrawableTagPair: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = TP_DrawableTagPairsArchive.protoMessageName + ".DrawableTagPair"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}tag\0\u{1}drawable\0")

  public var isInitialized: Bool {
    if self._tag == nil {return false}
    if self._drawable == nil {return false}
    if let v = self._drawable, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._tag) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._drawable) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._tag {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._drawable {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TP_DrawableTagPairsArchive.DrawableTagPair, rhs: TP_DrawableTagPairsArchive.DrawableTagPair) -> Bool {
    if lhs._tag != rhs._tag {return false}
    if lhs._drawable != rhs._drawable {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TP_FloatingDrawablesArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FloatingDrawablesArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}page_groups\0\u{3}drawable_tag_pairs\0")

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.pageGroups) {return false}
    if let v = self._drawableTagPairs, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.pageGroups) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._drawableTagPairs) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.pageGroups.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pageGroups, fieldNumber: 1)
    }
    try { if let v = self._drawableTagPairs {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TP_FloatingDrawablesArchive, rhs: TP_FloatingDrawablesArchive) -> Bool {
    if lhs.pageGroups != rhs.pageGroups {return false}
    if lhs._drawableTagPairs != rhs._drawableTagPairs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TP_FloatingDrawablesArchive.DrawableEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = TP_FloatingDrawablesArchive.protoMessageName + ".DrawableEntry"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}drawable\0")

  public var isInitialized: Bool {
    if let v = self._drawable, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._drawable) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._drawable {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TP_FloatingDrawablesArchive.DrawableEntry, rhs: TP_FloatingDrawablesArchive.DrawableEntry) -> Bool {
    if lhs._drawable != rhs._drawable {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TP_FloatingDrawablesArchive.PageGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = TP_FloatingDrawablesArchive.protoMessageName + ".PageGroup"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}page_index\0\u{3}background_drawables\0\u{3}foreground_drawables\0\u{1}drawables\0")

  public var isInitialized: Bool {
    if self._pageIndex == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.backgroundDrawables) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.foregroundDrawables) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.drawables) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._pageIndex) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.backgroundDrawables) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.foregroundDrawables) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.drawables) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._pageIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    } }()
    if !self.backgroundDrawables.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.backgroundDrawables, fieldNumber: 2)
    }
    if !self.foregroundDrawables.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.foregroundDrawables, fieldNumber: 3)
    }
    if !self.drawables.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.drawables, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TP_FloatingDrawablesArchive.PageGroup, rhs: TP_FloatingDrawablesArchive.PageGroup) -> Bool {
    if lhs._pageIndex != rhs._pageIndex {return false}
    if lhs.backgroundDrawables != rhs.backgroundDrawables {return false}
    if lhs.foregroundDrawables != rhs.foregroundDrawables {return false}
    if lhs.drawables != rhs.drawables {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TP_DrawablesZOrderArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DrawablesZOrderArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}drawables\0")

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.drawables) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.drawables) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.drawables.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.drawables, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TP_DrawablesZOrderArchive, rhs: TP_DrawablesZOrderArchive) -> Bool {
    if lhs.drawables != rhs.drawables {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TP_SectionTemplateArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SectionTemplateArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}headers\0\u{1}footers\0\u{3}section_template_drawables\0\u{3}page_template_uuidpath\0")

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.headers) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.footers) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.sectionTemplateDrawables) {return false}
    if let v = self._pageTemplateUuidpath, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.headers) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.footers) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.sectionTemplateDrawables) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._pageTemplateUuidpath) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.headers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.headers, fieldNumber: 1)
    }
    if !self.footers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.footers, fieldNumber: 2)
    }
    if !self.sectionTemplateDrawables.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sectionTemplateDrawables, fieldNumber: 3)
    }
    try { if let v = self._pageTemplateUuidpath {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TP_SectionTemplateArchive, rhs: TP_SectionTemplateArchive) -> Bool {
    if lhs.headers != rhs.headers {return false}
    if lhs.footers != rhs.footers {return false}
    if lhs.sectionTemplateDrawables != rhs.sectionTemplateDrawables {return false}
    if lhs._pageTemplateUuidpath != rhs._pageTemplateUuidpath {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TP_PageTemplateArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PageTemplateArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}name\0\u{3}section_template_drawables\0\u{3}placeholder_drawables\0\u{3}headers_footers_match_previous_page\0\u{3}hide_headers_footers\0\u{3}background_fill\0\u{3}guide_storage\0")

  public var isInitialized: Bool {
    if self._headersFootersMatchPreviousPage == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.sectionTemplateDrawables) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.placeholderDrawables) {return false}
    if let v = self._backgroundFill, !v.isInitialized {return false}
    if let v = self._guideStorage, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._name) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.sectionTemplateDrawables) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.placeholderDrawables) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self._headersFootersMatchPreviousPage) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self._hideHeadersFooters) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._backgroundFill) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._guideStorage) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    if !self.sectionTemplateDrawables.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sectionTemplateDrawables, fieldNumber: 2)
    }
    if !self.placeholderDrawables.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.placeholderDrawables, fieldNumber: 3)
    }
    try { if let v = self._headersFootersMatchPreviousPage {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._hideHeadersFooters {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._backgroundFill {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._guideStorage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TP_PageTemplateArchive, rhs: TP_PageTemplateArchive) -> Bool {
    if lhs._name != rhs._name {return false}
    if lhs.sectionTemplateDrawables != rhs.sectionTemplateDrawables {return false}
    if lhs.placeholderDrawables != rhs.placeholderDrawables {return false}
    if lhs._headersFootersMatchPreviousPage != rhs._headersFootersMatchPreviousPage {return false}
    if lhs._hideHeadersFooters != rhs._hideHeadersFooters {return false}
    if lhs._backgroundFill != rhs._backgroundFill {return false}
    if lhs._guideStorage != rhs._guideStorage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TP_PageTemplateArchive.TagDrawablePair: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = TP_PageTemplateArchive.protoMessageName + ".TagDrawablePair"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}tag\0\u{1}drawable\0\u{3}z_index\0")

  public var isInitialized: Bool {
    if self._tag == nil {return false}
    if self._drawable == nil {return false}
    if self._zIndex == nil {return false}
    if let v = self._drawable, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._tag) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._drawable) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._zIndex) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._tag {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._drawable {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._zIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TP_PageTemplateArchive.TagDrawablePair, rhs: TP_PageTemplateArchive.TagDrawablePair) -> Bool {
    if lhs._tag != rhs._tag {return false}
    if lhs._drawable != rhs._drawable {return false}
    if lhs._zIndex != rhs._zIndex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TP_SectionArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SectionArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}OBSOLETE_shows_header\0\u{3}OBSOLETE_shows_footer\0\u{3}OBSOLETE_headers\0\u{3}OBSOLETE_footers\0\u{3}OBSOLETE_left_margin\0\u{3}OBSOLETE_right_margin\0\u{3}OBSOLETE_top_margin\0\u{3}OBSOLETE_bottom_margin\0\u{3}OBSOLETE_header_padding\0\u{3}OBSOLETE_footer_padding\0\u{3}OBSOLETE_paper_width\0\u{3}OBSOLETE_paper_height\0\u{3}OBSOLETE_landscape_mode\0\u{3}OBSOLETE_section_template_drawables\0\u{3}OBSOLETE_header_margin\0\u{3}OBSOLETE_footer_margin\0\u{3}inherit_previous_header_footer\0\u{3}section_template_first_page_different\0\u{3}section_template_even_odd_pages_different\0\u{3}section_start_kind\0\u{3}section_page_number_kind\0\u{3}section_page_number_start\0\u{3}first_section_template_page\0\u{3}even_section_template_page\0\u{3}odd_section_template_page\0\u{1}name\0\u{4}\u{2}section_template_first_page_hides_header_footer\0\u{3}user_defined_guide_storage\0\u{3}background_fill\0\u{3}section_hyperlink_uuid\0")

  fileprivate class _StorageClass {
    var _obsoleteShowsHeader: Bool? = nil
    var _obsoleteShowsFooter: Bool? = nil
    var _obsoleteHeaders: [TSP_Reference] = []
    var _obsoleteFooters: [TSP_Reference] = []
    var _obsoleteLeftMargin: Float? = nil
    var _obsoleteRightMargin: Float? = nil
    var _obsoleteTopMargin: Float? = nil
    var _obsoleteBottomMargin: Float? = nil
    var _obsoleteHeaderPadding: Float? = nil
    var _obsoleteFooterPadding: Float? = nil
    var _obsoletePaperWidth: Float? = nil
    var _obsoletePaperHeight: Float? = nil
    var _obsoleteLandscapeMode: Bool? = nil
    var _obsoleteSectionTemplateDrawables: [TSP_Reference] = []
    var _obsoleteHeaderMargin: Float? = nil
    var _obsoleteFooterMargin: Float? = nil
    var _inheritPreviousHeaderFooter: Bool? = nil
    var _sectionTemplateFirstPageDifferent: Bool? = nil
    var _sectionTemplateEvenOddPagesDifferent: Bool? = nil
    var _sectionStartKind: UInt32? = nil
    var _sectionPageNumberKind: UInt32? = nil
    var _sectionPageNumberStart: UInt32? = nil
    var _firstSectionTemplatePage: TSP_Reference? = nil
    var _evenSectionTemplatePage: TSP_Reference? = nil
    var _oddSectionTemplatePage: TSP_Reference? = nil
    var _name: String? = nil
    var _sectionTemplateFirstPageHidesHeaderFooter: Bool? = nil
    var _userDefinedGuideStorage: TSP_Reference? = nil
    var _backgroundFill: TSD_FillArchive? = nil
    var _sectionHyperlinkUuid: TSP_UUID? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _obsoleteShowsHeader = source._obsoleteShowsHeader
      _obsoleteShowsFooter = source._obsoleteShowsFooter
      _obsoleteHeaders = source._obsoleteHeaders
      _obsoleteFooters = source._obsoleteFooters
      _obsoleteLeftMargin = source._obsoleteLeftMargin
      _obsoleteRightMargin = source._obsoleteRightMargin
      _obsoleteTopMargin = source._obsoleteTopMargin
      _obsoleteBottomMargin = source._obsoleteBottomMargin
      _obsoleteHeaderPadding = source._obsoleteHeaderPadding
      _obsoleteFooterPadding = source._obsoleteFooterPadding
      _obsoletePaperWidth = source._obsoletePaperWidth
      _obsoletePaperHeight = source._obsoletePaperHeight
      _obsoleteLandscapeMode = source._obsoleteLandscapeMode
      _obsoleteSectionTemplateDrawables = source._obsoleteSectionTemplateDrawables
      _obsoleteHeaderMargin = source._obsoleteHeaderMargin
      _obsoleteFooterMargin = source._obsoleteFooterMargin
      _inheritPreviousHeaderFooter = source._inheritPreviousHeaderFooter
      _sectionTemplateFirstPageDifferent = source._sectionTemplateFirstPageDifferent
      _sectionTemplateEvenOddPagesDifferent = source._sectionTemplateEvenOddPagesDifferent
      _sectionStartKind = source._sectionStartKind
      _sectionPageNumberKind = source._sectionPageNumberKind
      _sectionPageNumberStart = source._sectionPageNumberStart
      _firstSectionTemplatePage = source._firstSectionTemplatePage
      _evenSectionTemplatePage = source._evenSectionTemplatePage
      _oddSectionTemplatePage = source._oddSectionTemplatePage
      _name = source._name
      _sectionTemplateFirstPageHidesHeaderFooter = source._sectionTemplateFirstPageHidesHeaderFooter
      _userDefinedGuideStorage = source._userDefinedGuideStorage
      _backgroundFill = source._backgroundFill
      _sectionHyperlinkUuid = source._sectionHyperlinkUuid
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._obsoleteHeaders) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._obsoleteFooters) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._obsoleteSectionTemplateDrawables) {return false}
      if let v = _storage._firstSectionTemplatePage, !v.isInitialized {return false}
      if let v = _storage._evenSectionTemplatePage, !v.isInitialized {return false}
      if let v = _storage._oddSectionTemplatePage, !v.isInitialized {return false}
      if let v = _storage._userDefinedGuideStorage, !v.isInitialized {return false}
      if let v = _storage._backgroundFill, !v.isInitialized {return false}
      if let v = _storage._sectionHyperlinkUuid, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularBoolField(value: &_storage._obsoleteShowsHeader) }()
        case 2: try { try decoder.decodeSingularBoolField(value: &_storage._obsoleteShowsFooter) }()
        case 3: try { try decoder.decodeRepeatedMessageField(value: &_storage._obsoleteHeaders) }()
        case 4: try { try decoder.decodeRepeatedMessageField(value: &_storage._obsoleteFooters) }()
        case 5: try { try decoder.decodeSingularFloatField(value: &_storage._obsoleteLeftMargin) }()
        case 6: try { try decoder.decodeSingularFloatField(value: &_storage._obsoleteRightMargin) }()
        case 7: try { try decoder.decodeSingularFloatField(value: &_storage._obsoleteTopMargin) }()
        case 8: try { try decoder.decodeSingularFloatField(value: &_storage._obsoleteBottomMargin) }()
        case 9: try { try decoder.decodeSingularFloatField(value: &_storage._obsoleteHeaderPadding) }()
        case 10: try { try decoder.decodeSingularFloatField(value: &_storage._obsoleteFooterPadding) }()
        case 11: try { try decoder.decodeSingularFloatField(value: &_storage._obsoletePaperWidth) }()
        case 12: try { try decoder.decodeSingularFloatField(value: &_storage._obsoletePaperHeight) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._obsoleteLandscapeMode) }()
        case 14: try { try decoder.decodeRepeatedMessageField(value: &_storage._obsoleteSectionTemplateDrawables) }()
        case 15: try { try decoder.decodeSingularFloatField(value: &_storage._obsoleteHeaderMargin) }()
        case 16: try { try decoder.decodeSingularFloatField(value: &_storage._obsoleteFooterMargin) }()
        case 17: try { try decoder.decodeSingularBoolField(value: &_storage._inheritPreviousHeaderFooter) }()
        case 18: try { try decoder.decodeSingularBoolField(value: &_storage._sectionTemplateFirstPageDifferent) }()
        case 19: try { try decoder.decodeSingularBoolField(value: &_storage._sectionTemplateEvenOddPagesDifferent) }()
        case 20: try { try decoder.decodeSingularUInt32Field(value: &_storage._sectionStartKind) }()
        case 21: try { try decoder.decodeSingularUInt32Field(value: &_storage._sectionPageNumberKind) }()
        case 22: try { try decoder.decodeSingularUInt32Field(value: &_storage._sectionPageNumberStart) }()
        case 23: try { try decoder.decodeSingularMessageField(value: &_storage._firstSectionTemplatePage) }()
        case 24: try { try decoder.decodeSingularMessageField(value: &_storage._evenSectionTemplatePage) }()
        case 25: try { try decoder.decodeSingularMessageField(value: &_storage._oddSectionTemplatePage) }()
        case 26: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 28: try { try decoder.decodeSingularBoolField(value: &_storage._sectionTemplateFirstPageHidesHeaderFooter) }()
        case 29: try { try decoder.decodeSingularMessageField(value: &_storage._userDefinedGuideStorage) }()
        case 30: try { try decoder.decodeSingularMessageField(value: &_storage._backgroundFill) }()
        case 31: try { try decoder.decodeSingularMessageField(value: &_storage._sectionHyperlinkUuid) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._obsoleteShowsHeader {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._obsoleteShowsFooter {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
      } }()
      if !_storage._obsoleteHeaders.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._obsoleteHeaders, fieldNumber: 3)
      }
      if !_storage._obsoleteFooters.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._obsoleteFooters, fieldNumber: 4)
      }
      try { if let v = _storage._obsoleteLeftMargin {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._obsoleteRightMargin {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._obsoleteTopMargin {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._obsoleteBottomMargin {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._obsoleteHeaderPadding {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._obsoleteFooterPadding {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._obsoletePaperWidth {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._obsoletePaperHeight {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._obsoleteLandscapeMode {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
      } }()
      if !_storage._obsoleteSectionTemplateDrawables.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._obsoleteSectionTemplateDrawables, fieldNumber: 14)
      }
      try { if let v = _storage._obsoleteHeaderMargin {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._obsoleteFooterMargin {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._inheritPreviousHeaderFooter {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._sectionTemplateFirstPageDifferent {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._sectionTemplateEvenOddPagesDifferent {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._sectionStartKind {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._sectionPageNumberKind {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._sectionPageNumberStart {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 22)
      } }()
      try { if let v = _storage._firstSectionTemplatePage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      } }()
      try { if let v = _storage._evenSectionTemplatePage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
      } }()
      try { if let v = _storage._oddSectionTemplatePage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 25)
      } }()
      try { if let v = _storage._name {
        try visitor.visitSingularStringField(value: v, fieldNumber: 26)
      } }()
      try { if let v = _storage._sectionTemplateFirstPageHidesHeaderFooter {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 28)
      } }()
      try { if let v = _storage._userDefinedGuideStorage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 29)
      } }()
      try { if let v = _storage._backgroundFill {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 30)
      } }()
      try { if let v = _storage._sectionHyperlinkUuid {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 31)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TP_SectionArchive, rhs: TP_SectionArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._obsoleteShowsHeader != rhs_storage._obsoleteShowsHeader {return false}
        if _storage._obsoleteShowsFooter != rhs_storage._obsoleteShowsFooter {return false}
        if _storage._obsoleteHeaders != rhs_storage._obsoleteHeaders {return false}
        if _storage._obsoleteFooters != rhs_storage._obsoleteFooters {return false}
        if _storage._obsoleteLeftMargin != rhs_storage._obsoleteLeftMargin {return false}
        if _storage._obsoleteRightMargin != rhs_storage._obsoleteRightMargin {return false}
        if _storage._obsoleteTopMargin != rhs_storage._obsoleteTopMargin {return false}
        if _storage._obsoleteBottomMargin != rhs_storage._obsoleteBottomMargin {return false}
        if _storage._obsoleteHeaderPadding != rhs_storage._obsoleteHeaderPadding {return false}
        if _storage._obsoleteFooterPadding != rhs_storage._obsoleteFooterPadding {return false}
        if _storage._obsoletePaperWidth != rhs_storage._obsoletePaperWidth {return false}
        if _storage._obsoletePaperHeight != rhs_storage._obsoletePaperHeight {return false}
        if _storage._obsoleteLandscapeMode != rhs_storage._obsoleteLandscapeMode {return false}
        if _storage._obsoleteSectionTemplateDrawables != rhs_storage._obsoleteSectionTemplateDrawables {return false}
        if _storage._obsoleteHeaderMargin != rhs_storage._obsoleteHeaderMargin {return false}
        if _storage._obsoleteFooterMargin != rhs_storage._obsoleteFooterMargin {return false}
        if _storage._inheritPreviousHeaderFooter != rhs_storage._inheritPreviousHeaderFooter {return false}
        if _storage._sectionTemplateFirstPageDifferent != rhs_storage._sectionTemplateFirstPageDifferent {return false}
        if _storage._sectionTemplateEvenOddPagesDifferent != rhs_storage._sectionTemplateEvenOddPagesDifferent {return false}
        if _storage._sectionStartKind != rhs_storage._sectionStartKind {return false}
        if _storage._sectionPageNumberKind != rhs_storage._sectionPageNumberKind {return false}
        if _storage._sectionPageNumberStart != rhs_storage._sectionPageNumberStart {return false}
        if _storage._firstSectionTemplatePage != rhs_storage._firstSectionTemplatePage {return false}
        if _storage._evenSectionTemplatePage != rhs_storage._evenSectionTemplatePage {return false}
        if _storage._oddSectionTemplatePage != rhs_storage._oddSectionTemplatePage {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._sectionTemplateFirstPageHidesHeaderFooter != rhs_storage._sectionTemplateFirstPageHidesHeaderFooter {return false}
        if _storage._userDefinedGuideStorage != rhs_storage._userDefinedGuideStorage {return false}
        if _storage._backgroundFill != rhs_storage._backgroundFill {return false}
        if _storage._sectionHyperlinkUuid != rhs_storage._sectionHyperlinkUuid {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TP_DoublePoint: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DoublePoint"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}x\0\u{1}y\0")

  public var isInitialized: Bool {
    if self._x == nil {return false}
    if self._y == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self._x) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self._y) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._x {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._y {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TP_DoublePoint, rhs: TP_DoublePoint) -> Bool {
    if lhs._x != rhs._x {return false}
    if lhs._y != rhs._y {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TP_DoubleSize: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DoubleSize"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}width\0\u{1}height\0")

  public var isInitialized: Bool {
    if self._width == nil {return false}
    if self._height == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self._width) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self._height) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._width {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._height {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TP_DoubleSize, rhs: TP_DoubleSize) -> Bool {
    if lhs._width != rhs._width {return false}
    if lhs._height != rhs._height {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TP_AnchorPosArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AnchorPosArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}attachment\0\u{1}position\0\u{3}drawable_uuid_path\0\u{3}double_position\0")

  public var isInitialized: Bool {
    if let v = self._attachment, !v.isInitialized {return false}
    if let v = self._position, !v.isInitialized {return false}
    if let v = self._drawableUuidPath, !v.isInitialized {return false}
    if let v = self._doublePosition, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._attachment) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._position) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._drawableUuidPath) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._doublePosition) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._attachment {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._position {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._drawableUuidPath {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._doublePosition {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TP_AnchorPosArchive, rhs: TP_AnchorPosArchive) -> Bool {
    if lhs._attachment != rhs._attachment {return false}
    if lhs._position != rhs._position {return false}
    if lhs._drawableUuidPath != rhs._drawableUuidPath {return false}
    if lhs._doublePosition != rhs._doublePosition {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TP_TargetHintArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TargetHintArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}frame_origin\0\u{3}frame_size\0\u{1}range\0\u{3}next_widow_pulls_down_from_char_index\0\u{3}anchored_range\0\u{3}column_count\0\u{3}line_fragment_count\0\u{3}double_origin\0\u{3}double_size\0\u{3}end_of_layout\0\u{3}last_line_is_empty_and_has_list_label\0\u{3}text_is_vertical\0\u{3}terminated_by_break\0")

  fileprivate class _StorageClass {
    var _frameOrigin: TSP_Point? = nil
    var _frameSize: TSP_Size? = nil
    var _range: TSP_Range? = nil
    var _nextWidowPullsDownFromCharIndex: UInt32? = nil
    var _anchoredRange: TSP_Range? = nil
    var _columnCount: UInt32? = nil
    var _lineFragmentCount: UInt32? = nil
    var _doubleOrigin: TP_DoublePoint? = nil
    var _doubleSize: TP_DoubleSize? = nil
    var _endOfLayout: Bool? = nil
    var _lastLineIsEmptyAndHasListLabel: Bool? = nil
    var _textIsVertical: Bool? = nil
    var _terminatedByBreak: Bool? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _frameOrigin = source._frameOrigin
      _frameSize = source._frameSize
      _range = source._range
      _nextWidowPullsDownFromCharIndex = source._nextWidowPullsDownFromCharIndex
      _anchoredRange = source._anchoredRange
      _columnCount = source._columnCount
      _lineFragmentCount = source._lineFragmentCount
      _doubleOrigin = source._doubleOrigin
      _doubleSize = source._doubleSize
      _endOfLayout = source._endOfLayout
      _lastLineIsEmptyAndHasListLabel = source._lastLineIsEmptyAndHasListLabel
      _textIsVertical = source._textIsVertical
      _terminatedByBreak = source._terminatedByBreak
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._frameOrigin, !v.isInitialized {return false}
      if let v = _storage._frameSize, !v.isInitialized {return false}
      if let v = _storage._range, !v.isInitialized {return false}
      if let v = _storage._anchoredRange, !v.isInitialized {return false}
      if let v = _storage._doubleOrigin, !v.isInitialized {return false}
      if let v = _storage._doubleSize, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._frameOrigin) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._frameSize) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._range) }()
        case 4: try { try decoder.decodeSingularUInt32Field(value: &_storage._nextWidowPullsDownFromCharIndex) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._anchoredRange) }()
        case 6: try { try decoder.decodeSingularUInt32Field(value: &_storage._columnCount) }()
        case 7: try { try decoder.decodeSingularUInt32Field(value: &_storage._lineFragmentCount) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._doubleOrigin) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._doubleSize) }()
        case 10: try { try decoder.decodeSingularBoolField(value: &_storage._endOfLayout) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._lastLineIsEmptyAndHasListLabel) }()
        case 12: try { try decoder.decodeSingularBoolField(value: &_storage._textIsVertical) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._terminatedByBreak) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._frameOrigin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._frameSize {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._range {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._nextWidowPullsDownFromCharIndex {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._anchoredRange {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._columnCount {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._lineFragmentCount {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._doubleOrigin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._doubleSize {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._endOfLayout {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._lastLineIsEmptyAndHasListLabel {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._textIsVertical {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._terminatedByBreak {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TP_TargetHintArchive, rhs: TP_TargetHintArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._frameOrigin != rhs_storage._frameOrigin {return false}
        if _storage._frameSize != rhs_storage._frameSize {return false}
        if _storage._range != rhs_storage._range {return false}
        if _storage._nextWidowPullsDownFromCharIndex != rhs_storage._nextWidowPullsDownFromCharIndex {return false}
        if _storage._anchoredRange != rhs_storage._anchoredRange {return false}
        if _storage._columnCount != rhs_storage._columnCount {return false}
        if _storage._lineFragmentCount != rhs_storage._lineFragmentCount {return false}
        if _storage._doubleOrigin != rhs_storage._doubleOrigin {return false}
        if _storage._doubleSize != rhs_storage._doubleSize {return false}
        if _storage._endOfLayout != rhs_storage._endOfLayout {return false}
        if _storage._lastLineIsEmptyAndHasListLabel != rhs_storage._lastLineIsEmptyAndHasListLabel {return false}
        if _storage._textIsVertical != rhs_storage._textIsVertical {return false}
        if _storage._terminatedByBreak != rhs_storage._terminatedByBreak {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TP_PageHintArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PageHintArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}page_kind\0\u{3}target_hints\0\u{3}footnote_auto_number_range\0\u{3}footnote_layout_range\0\u{4}\u{2}first_child_hint\0\u{3}last_child_hint\0\u{3}anchored_attachments_map\0\u{4}\u{2}version_number\0\u{3}platform_id\0\u{3}child_hints\0\u{3}partitioned_attachment_uuids\0\u{3}text_flows\0\u{3}flow_hints\0\u{4}\u{2}page_side\0\u{3}page_column\0\u{3}page_row\0\u{3}topic_number_hints\0\u{3}flow_topic_number_hints\0")

  fileprivate class _StorageClass {
    var _pageKind: TP_PageHintArchive.PageKind? = nil
    var _targetHints: [TP_TargetHintArchive] = []
    var _footnoteAutoNumberRange: TSP_Range? = nil
    var _footnoteLayoutRange: TSP_Range? = nil
    var _firstChildHint: TSP_Reference? = nil
    var _lastChildHint: TSP_Reference? = nil
    var _anchoredAttachmentsMap: [TP_AnchorPosArchive] = []
    var _versionNumber: UInt32? = nil
    var _platformID: UInt32? = nil
    var _childHints: [TSP_Reference] = []
    var _partitionedAttachmentUuids: [TSP_UUID] = []
    var _textFlows: [TSP_Reference] = []
    var _flowHints: [TP_TargetHintArchive] = []
    var _pageSide: TP_PageHintArchive.PageSide? = nil
    var _pageColumn: UInt32? = nil
    var _pageRow: UInt32? = nil
    var _topicNumberHints: TP_TopicNumberHintsArchive? = nil
    var _flowTopicNumberHints: [TP_TopicNumberHintsArchive] = []

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _pageKind = source._pageKind
      _targetHints = source._targetHints
      _footnoteAutoNumberRange = source._footnoteAutoNumberRange
      _footnoteLayoutRange = source._footnoteLayoutRange
      _firstChildHint = source._firstChildHint
      _lastChildHint = source._lastChildHint
      _anchoredAttachmentsMap = source._anchoredAttachmentsMap
      _versionNumber = source._versionNumber
      _platformID = source._platformID
      _childHints = source._childHints
      _partitionedAttachmentUuids = source._partitionedAttachmentUuids
      _textFlows = source._textFlows
      _flowHints = source._flowHints
      _pageSide = source._pageSide
      _pageColumn = source._pageColumn
      _pageRow = source._pageRow
      _topicNumberHints = source._topicNumberHints
      _flowTopicNumberHints = source._flowTopicNumberHints
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._targetHints) {return false}
      if let v = _storage._footnoteAutoNumberRange, !v.isInitialized {return false}
      if let v = _storage._footnoteLayoutRange, !v.isInitialized {return false}
      if let v = _storage._firstChildHint, !v.isInitialized {return false}
      if let v = _storage._lastChildHint, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._anchoredAttachmentsMap) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._childHints) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._partitionedAttachmentUuids) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._textFlows) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._flowHints) {return false}
      if let v = _storage._topicNumberHints, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._flowTopicNumberHints) {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularEnumField(value: &_storage._pageKind) }()
        case 2: try { try decoder.decodeRepeatedMessageField(value: &_storage._targetHints) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._footnoteAutoNumberRange) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._footnoteLayoutRange) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._firstChildHint) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._lastChildHint) }()
        case 8: try { try decoder.decodeRepeatedMessageField(value: &_storage._anchoredAttachmentsMap) }()
        case 10: try { try decoder.decodeSingularUInt32Field(value: &_storage._versionNumber) }()
        case 11: try { try decoder.decodeSingularUInt32Field(value: &_storage._platformID) }()
        case 12: try { try decoder.decodeRepeatedMessageField(value: &_storage._childHints) }()
        case 13: try { try decoder.decodeRepeatedMessageField(value: &_storage._partitionedAttachmentUuids) }()
        case 14: try { try decoder.decodeRepeatedMessageField(value: &_storage._textFlows) }()
        case 15: try { try decoder.decodeRepeatedMessageField(value: &_storage._flowHints) }()
        case 17: try { try decoder.decodeSingularEnumField(value: &_storage._pageSide) }()
        case 18: try { try decoder.decodeSingularUInt32Field(value: &_storage._pageColumn) }()
        case 19: try { try decoder.decodeSingularUInt32Field(value: &_storage._pageRow) }()
        case 20: try { try decoder.decodeSingularMessageField(value: &_storage._topicNumberHints) }()
        case 21: try { try decoder.decodeRepeatedMessageField(value: &_storage._flowTopicNumberHints) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._pageKind {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
      } }()
      if !_storage._targetHints.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._targetHints, fieldNumber: 2)
      }
      try { if let v = _storage._footnoteAutoNumberRange {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._footnoteLayoutRange {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._firstChildHint {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._lastChildHint {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      if !_storage._anchoredAttachmentsMap.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._anchoredAttachmentsMap, fieldNumber: 8)
      }
      try { if let v = _storage._versionNumber {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._platformID {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 11)
      } }()
      if !_storage._childHints.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._childHints, fieldNumber: 12)
      }
      if !_storage._partitionedAttachmentUuids.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._partitionedAttachmentUuids, fieldNumber: 13)
      }
      if !_storage._textFlows.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._textFlows, fieldNumber: 14)
      }
      if !_storage._flowHints.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._flowHints, fieldNumber: 15)
      }
      try { if let v = _storage._pageSide {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._pageColumn {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._pageRow {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._topicNumberHints {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      } }()
      if !_storage._flowTopicNumberHints.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._flowTopicNumberHints, fieldNumber: 21)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TP_PageHintArchive, rhs: TP_PageHintArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._pageKind != rhs_storage._pageKind {return false}
        if _storage._targetHints != rhs_storage._targetHints {return false}
        if _storage._footnoteAutoNumberRange != rhs_storage._footnoteAutoNumberRange {return false}
        if _storage._footnoteLayoutRange != rhs_storage._footnoteLayoutRange {return false}
        if _storage._firstChildHint != rhs_storage._firstChildHint {return false}
        if _storage._lastChildHint != rhs_storage._lastChildHint {return false}
        if _storage._anchoredAttachmentsMap != rhs_storage._anchoredAttachmentsMap {return false}
        if _storage._versionNumber != rhs_storage._versionNumber {return false}
        if _storage._platformID != rhs_storage._platformID {return false}
        if _storage._childHints != rhs_storage._childHints {return false}
        if _storage._partitionedAttachmentUuids != rhs_storage._partitionedAttachmentUuids {return false}
        if _storage._textFlows != rhs_storage._textFlows {return false}
        if _storage._flowHints != rhs_storage._flowHints {return false}
        if _storage._pageSide != rhs_storage._pageSide {return false}
        if _storage._pageColumn != rhs_storage._pageColumn {return false}
        if _storage._pageRow != rhs_storage._pageRow {return false}
        if _storage._topicNumberHints != rhs_storage._topicNumberHints {return false}
        if _storage._flowTopicNumberHints != rhs_storage._flowTopicNumberHints {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TP_PageHintArchive.PageKind: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0kPageKindNone\0\u{1}kPageKindText\0\u{1}kPageKindFiller\0\u{1}kPageKindOrphan\0\u{1}kPageKindEndnote\0\u{1}kPageKindDirty\0\u{1}kTPPageKindPageLayout\0")
}

extension TP_PageHintArchive.PageSide: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0kTPPageSideUnknown\0\u{1}kTPPageSideLeft\0\u{1}kTPPageSideRight\0")
}

extension TP_NullChildHintArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NullChildHintArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TP_NullChildHintArchive, rhs: TP_NullChildHintArchive) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TP_SectionHintArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SectionHintArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}page_hints\0\u{3}start_page_index\0")

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.pageHints) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.pageHints) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._startPageIndex) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.pageHints.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pageHints, fieldNumber: 1)
    }
    try { if let v = self._startPageIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TP_SectionHintArchive, rhs: TP_SectionHintArchive) -> Bool {
    if lhs.pageHints != rhs.pageHints {return false}
    if lhs._startPageIndex != rhs._startPageIndex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TP_TextboxHintArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TextboxHintArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}range\0\u{1}size\0")

  public var isInitialized: Bool {
    if self._range == nil {return false}
    if self._size == nil {return false}
    if let v = self._range, !v.isInitialized {return false}
    if let v = self._size, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._range) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._size) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._range {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._size {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TP_TextboxHintArchive, rhs: TP_TextboxHintArchive) -> Bool {
    if lhs._range != rhs._range {return false}
    if lhs._size != rhs._size {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TP_TopicNumberHintLevelDataArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TopicNumberHintLevelDataArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}number\0\u{3}label_type\0\u{3}number_type\0\u{3}is_tiered\0")

  public var isInitialized: Bool {
    if self._number == nil {return false}
    if self._labelType == nil {return false}
    if self._numberType == nil {return false}
    if self._isTiered == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._number) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._labelType) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._numberType) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self._isTiered) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._number {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._labelType {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._numberType {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._isTiered {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TP_TopicNumberHintLevelDataArchive, rhs: TP_TopicNumberHintLevelDataArchive) -> Bool {
    if lhs._number != rhs._number {return false}
    if lhs._labelType != rhs._labelType {return false}
    if lhs._numberType != rhs._numberType {return false}
    if lhs._isTiered != rhs._isTiered {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TP_TopicNumberHintEntryArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TopicNumberHintEntryArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}list_style\0\u{3}topic_numbers\0")

  public var isInitialized: Bool {
    if self._listStyle == nil {return false}
    if let v = self._listStyle, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.topicNumbers) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._listStyle) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.topicNumbers) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._listStyle {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.topicNumbers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.topicNumbers, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TP_TopicNumberHintEntryArchive, rhs: TP_TopicNumberHintEntryArchive) -> Bool {
    if lhs._listStyle != rhs._listStyle {return false}
    if lhs.topicNumbers != rhs.topicNumbers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TP_TopicNumberHintsArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TopicNumberHintsArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{4}\u{2}topic_numbers_map\0")

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.topicNumbersMap) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.topicNumbersMap) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.topicNumbersMap.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.topicNumbersMap, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TP_TopicNumberHintsArchive, rhs: TP_TopicNumberHintsArchive) -> Bool {
    if lhs.topicNumbersMap != rhs.topicNumbersMap {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TP_LayoutStateArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LayoutStateArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}section_index\0\u{3}section_page_index\0\u{3}document_page_index\0\u{3}last_page_count\0\u{3}section_hints\0\u{3}body_length\0\u{3}missing_fonts\0\u{3}os_version\0")

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.sectionHints) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._sectionIndex) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._sectionPageIndex) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._documentPageIndex) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self._lastPageCount) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.sectionHints) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self._bodyLength) }()
      case 7: try { try decoder.decodeRepeatedStringField(value: &self.missingFonts) }()
      case 8: try { try decoder.decodeSingularInt32Field(value: &self._osVersion) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._sectionIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._sectionPageIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._documentPageIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._lastPageCount {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    } }()
    if !self.sectionHints.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sectionHints, fieldNumber: 5)
    }
    try { if let v = self._bodyLength {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
    } }()
    if !self.missingFonts.isEmpty {
      try visitor.visitRepeatedStringField(value: self.missingFonts, fieldNumber: 7)
    }
    try { if let v = self._osVersion {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 8)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TP_LayoutStateArchive, rhs: TP_LayoutStateArchive) -> Bool {
    if lhs._sectionIndex != rhs._sectionIndex {return false}
    if lhs._sectionPageIndex != rhs._sectionPageIndex {return false}
    if lhs._documentPageIndex != rhs._documentPageIndex {return false}
    if lhs._lastPageCount != rhs._lastPageCount {return false}
    if lhs.sectionHints != rhs.sectionHints {return false}
    if lhs._bodyLength != rhs._bodyLength {return false}
    if lhs.missingFonts != rhs.missingFonts {return false}
    if lhs._osVersion != rhs._osVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TP_CanvasSelectionArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CanvasSelectionArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}deprecated_type\0\u{3}visual_definition_range\0\u{3}style_insertion_behavior\0\u{3}caret_affinity\0\u{1}infos\0\u{3}excluded_infos\0\u{3}additional_infos\0\u{3}deprecated_container\0\u{3}leading_edge\0\u{3}leading_char_index\0\u{1}type\0\u{1}ranges\0")

  public var isInitialized: Bool {
    if self._deprecatedType == nil {return false}
    if self._visualDefinitionRange == nil {return false}
    if self._styleInsertionBehavior == nil {return false}
    if self._caretAffinity == nil {return false}
    if let v = self._visualDefinitionRange, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.infos) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.excludedInfos) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.additionalInfos) {return false}
    if let v = self._deprecatedContainer, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.ranges) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._deprecatedType) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._visualDefinitionRange) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self._styleInsertionBehavior) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self._caretAffinity) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.infos) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.excludedInfos) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.additionalInfos) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._deprecatedContainer) }()
      case 9: try { try decoder.decodeSingularBoolField(value: &self._leadingEdge) }()
      case 10: try { try decoder.decodeSingularUInt32Field(value: &self._leadingCharIndex) }()
      case 11: try { try decoder.decodeSingularEnumField(value: &self._type) }()
      case 12: try { try decoder.decodeRepeatedMessageField(value: &self.ranges) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._deprecatedType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._visualDefinitionRange {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._styleInsertionBehavior {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._caretAffinity {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
    } }()
    if !self.infos.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.infos, fieldNumber: 5)
    }
    if !self.excludedInfos.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.excludedInfos, fieldNumber: 6)
    }
    if !self.additionalInfos.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.additionalInfos, fieldNumber: 7)
    }
    try { if let v = self._deprecatedContainer {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._leadingEdge {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
    } }()
    try { if let v = self._leadingCharIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 10)
    } }()
    try { if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 11)
    } }()
    if !self.ranges.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.ranges, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TP_CanvasSelectionArchive, rhs: TP_CanvasSelectionArchive) -> Bool {
    if lhs._deprecatedType != rhs._deprecatedType {return false}
    if lhs._visualDefinitionRange != rhs._visualDefinitionRange {return false}
    if lhs._styleInsertionBehavior != rhs._styleInsertionBehavior {return false}
    if lhs._caretAffinity != rhs._caretAffinity {return false}
    if lhs.infos != rhs.infos {return false}
    if lhs.excludedInfos != rhs.excludedInfos {return false}
    if lhs.additionalInfos != rhs.additionalInfos {return false}
    if lhs._deprecatedContainer != rhs._deprecatedContainer {return false}
    if lhs._leadingEdge != rhs._leadingEdge {return false}
    if lhs._leadingCharIndex != rhs._leadingCharIndex {return false}
    if lhs._type != rhs._type {return false}
    if lhs.ranges != rhs.ranges {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TP_AllFootnoteSelectionArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AllFootnoteSelectionArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TP_AllFootnoteSelectionArchive, rhs: TP_AllFootnoteSelectionArchive) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TP_UIStateArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UIStateArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}OBSOLETE_view_scale\0\u{3}visible_rect_origin\0\u{3}OBSOLETE_landscape\0\u{1}selection\0\u{3}selection_model\0\u{3}section_template_drawables_selectable\0\u{3}visible_rect_size\0\u{3}chart_ui_state\0\u{3}ruler_visible\0\u{3}layout_borders_visible\0\u{3}word_count_hud_visible\0\u{3}shows_comments\0\u{3}shows_page_navigator\0\u{3}view_scale_mode\0\u{3}view_scale\0\u{3}window_frame_origin\0\u{3}window_frame_size\0\u{3}selected_inspector_switch_segment_identifier\0\u{3}inspector_hidden\0\u{3}word_count_hud_type\0\u{3}word_count_hud_x_position\0\u{3}word_count_hud_y_position\0\u{3}show_user_defined_guides\0\u{3}should_show_comment_sidebar\0\u{3}compatibility_selection_path\0\u{3}shows_ctmarkup\0\u{3}shows_ctdeletions\0\u{3}change_tracking_paused\0\u{3}compatibility_2_selection_path\0\u{3}filtered_author_name\0\u{3}view_scale_mode_ios\0\u{3}filtered_author\0\u{3}page_view_state\0\u{3}pencil_annotations_hidden\0\u{3}freehand_drawing_toolkit_state\0\u{3}presentation_auto_scroll_speed\0\u{3}selection_path_transformer\0\u{3}shows_toc_navigator\0\u{3}show_user_defined_page_template_guides\0\u{3}editing_disabled\0\u{3}pencil_annotation_ui_state\0\u{3}shows_flow_mode\0\u{3}mail_merge_settings\0\u{3}shows_activity_stream\0\u{3}toc_or_page_nav_width\0\u{3}activity_or_annotation_width\0\u{3}selection_path\0\u{3}flow_mode_font_scale\0")

  fileprivate class _StorageClass {
    var _obsoleteViewScale: Float? = nil
    var _visibleRectOrigin: TSP_Point? = nil
    var _obsoleteLandscape: Bool? = nil
    var _selection: TSP_Reference? = nil
    var _selectionModel: TSP_Reference? = nil
    var _sectionTemplateDrawablesSelectable: Bool? = nil
    var _visibleRectSize: TSP_Size? = nil
    var _chartUiState: [TSCH_ChartUIState] = []
    var _rulerVisible: Bool? = nil
    var _layoutBordersVisible: Bool? = nil
    var _wordCountHudVisible: Bool? = nil
    var _showsComments: Bool? = nil
    var _showsPageNavigator: Bool? = nil
    var _viewScaleMode: TP_ViewScaleMode? = nil
    var _viewScale: Float? = nil
    var _windowFrameOrigin: TSP_Point? = nil
    var _windowFrameSize: TSP_Size? = nil
    var _selectedInspectorSwitchSegmentIdentifier: String? = nil
    var _inspectorHidden: Bool? = nil
    var _wordCountHudType: UInt32? = nil
    var _wordCountHudXPosition: Float? = nil
    var _wordCountHudYPosition: Float? = nil
    var _showUserDefinedGuides: Bool? = nil
    var _shouldShowCommentSidebar: Bool? = nil
    var _compatibilitySelectionPath: TSK_SelectionPathArchive? = nil
    var _showsCtmarkup: Bool? = nil
    var _showsCtdeletions: Bool? = nil
    var _changeTrackingPaused: Bool? = nil
    var _compatibility2SelectionPath: TSK_SelectionPathArchive? = nil
    var _filteredAuthorName: String? = nil
    var _viewScaleModeIos: TP_ViewScaleModeiOS? = nil
    var _filteredAuthor: TSP_Reference? = nil
    var _pageViewState: TP_PageViewState? = nil
    var _pencilAnnotationsHidden: Bool? = nil
    var _freehandDrawingToolkitState: TSP_Reference? = nil
    var _presentationAutoScrollSpeed: Float? = nil
    var _selectionPathTransformer: TSP_Reference? = nil
    var _showsTocNavigator: Bool? = nil
    var _showUserDefinedPageTemplateGuides: Bool? = nil
    var _editingDisabled: Bool? = nil
    var _pencilAnnotationUiState: TSP_Reference? = nil
    var _showsFlowMode: Bool? = nil
    var _mailMergeSettings: TP_MailMergeSettingsArchive? = nil
    var _showsActivityStream: Bool? = nil
    var _tocOrPageNavWidth: Float? = nil
    var _activityOrAnnotationWidth: Float? = nil
    var _selectionPath: TSK_SelectionPathArchive? = nil
    var _flowModeFontScale: Float? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _obsoleteViewScale = source._obsoleteViewScale
      _visibleRectOrigin = source._visibleRectOrigin
      _obsoleteLandscape = source._obsoleteLandscape
      _selection = source._selection
      _selectionModel = source._selectionModel
      _sectionTemplateDrawablesSelectable = source._sectionTemplateDrawablesSelectable
      _visibleRectSize = source._visibleRectSize
      _chartUiState = source._chartUiState
      _rulerVisible = source._rulerVisible
      _layoutBordersVisible = source._layoutBordersVisible
      _wordCountHudVisible = source._wordCountHudVisible
      _showsComments = source._showsComments
      _showsPageNavigator = source._showsPageNavigator
      _viewScaleMode = source._viewScaleMode
      _viewScale = source._viewScale
      _windowFrameOrigin = source._windowFrameOrigin
      _windowFrameSize = source._windowFrameSize
      _selectedInspectorSwitchSegmentIdentifier = source._selectedInspectorSwitchSegmentIdentifier
      _inspectorHidden = source._inspectorHidden
      _wordCountHudType = source._wordCountHudType
      _wordCountHudXPosition = source._wordCountHudXPosition
      _wordCountHudYPosition = source._wordCountHudYPosition
      _showUserDefinedGuides = source._showUserDefinedGuides
      _shouldShowCommentSidebar = source._shouldShowCommentSidebar
      _compatibilitySelectionPath = source._compatibilitySelectionPath
      _showsCtmarkup = source._showsCtmarkup
      _showsCtdeletions = source._showsCtdeletions
      _changeTrackingPaused = source._changeTrackingPaused
      _compatibility2SelectionPath = source._compatibility2SelectionPath
      _filteredAuthorName = source._filteredAuthorName
      _viewScaleModeIos = source._viewScaleModeIos
      _filteredAuthor = source._filteredAuthor
      _pageViewState = source._pageViewState
      _pencilAnnotationsHidden = source._pencilAnnotationsHidden
      _freehandDrawingToolkitState = source._freehandDrawingToolkitState
      _presentationAutoScrollSpeed = source._presentationAutoScrollSpeed
      _selectionPathTransformer = source._selectionPathTransformer
      _showsTocNavigator = source._showsTocNavigator
      _showUserDefinedPageTemplateGuides = source._showUserDefinedPageTemplateGuides
      _editingDisabled = source._editingDisabled
      _pencilAnnotationUiState = source._pencilAnnotationUiState
      _showsFlowMode = source._showsFlowMode
      _mailMergeSettings = source._mailMergeSettings
      _showsActivityStream = source._showsActivityStream
      _tocOrPageNavWidth = source._tocOrPageNavWidth
      _activityOrAnnotationWidth = source._activityOrAnnotationWidth
      _selectionPath = source._selectionPath
      _flowModeFontScale = source._flowModeFontScale
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._visibleRectOrigin, !v.isInitialized {return false}
      if let v = _storage._selection, !v.isInitialized {return false}
      if let v = _storage._selectionModel, !v.isInitialized {return false}
      if let v = _storage._visibleRectSize, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._chartUiState) {return false}
      if let v = _storage._windowFrameOrigin, !v.isInitialized {return false}
      if let v = _storage._windowFrameSize, !v.isInitialized {return false}
      if let v = _storage._compatibilitySelectionPath, !v.isInitialized {return false}
      if let v = _storage._compatibility2SelectionPath, !v.isInitialized {return false}
      if let v = _storage._filteredAuthor, !v.isInitialized {return false}
      if let v = _storage._freehandDrawingToolkitState, !v.isInitialized {return false}
      if let v = _storage._selectionPathTransformer, !v.isInitialized {return false}
      if let v = _storage._pencilAnnotationUiState, !v.isInitialized {return false}
      if let v = _storage._mailMergeSettings, !v.isInitialized {return false}
      if let v = _storage._selectionPath, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularFloatField(value: &_storage._obsoleteViewScale) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._visibleRectOrigin) }()
        case 3: try { try decoder.decodeSingularBoolField(value: &_storage._obsoleteLandscape) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._selection) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._selectionModel) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._sectionTemplateDrawablesSelectable) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._visibleRectSize) }()
        case 8: try { try decoder.decodeRepeatedMessageField(value: &_storage._chartUiState) }()
        case 9: try { try decoder.decodeSingularBoolField(value: &_storage._rulerVisible) }()
        case 10: try { try decoder.decodeSingularBoolField(value: &_storage._layoutBordersVisible) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._wordCountHudVisible) }()
        case 12: try { try decoder.decodeSingularBoolField(value: &_storage._showsComments) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._showsPageNavigator) }()
        case 14: try { try decoder.decodeSingularEnumField(value: &_storage._viewScaleMode) }()
        case 15: try { try decoder.decodeSingularFloatField(value: &_storage._viewScale) }()
        case 16: try { try decoder.decodeSingularMessageField(value: &_storage._windowFrameOrigin) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._windowFrameSize) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._selectedInspectorSwitchSegmentIdentifier) }()
        case 19: try { try decoder.decodeSingularBoolField(value: &_storage._inspectorHidden) }()
        case 20: try { try decoder.decodeSingularUInt32Field(value: &_storage._wordCountHudType) }()
        case 21: try { try decoder.decodeSingularFloatField(value: &_storage._wordCountHudXPosition) }()
        case 22: try { try decoder.decodeSingularFloatField(value: &_storage._wordCountHudYPosition) }()
        case 23: try { try decoder.decodeSingularBoolField(value: &_storage._showUserDefinedGuides) }()
        case 24: try { try decoder.decodeSingularBoolField(value: &_storage._shouldShowCommentSidebar) }()
        case 25: try { try decoder.decodeSingularMessageField(value: &_storage._compatibilitySelectionPath) }()
        case 26: try { try decoder.decodeSingularBoolField(value: &_storage._showsCtmarkup) }()
        case 27: try { try decoder.decodeSingularBoolField(value: &_storage._showsCtdeletions) }()
        case 28: try { try decoder.decodeSingularBoolField(value: &_storage._changeTrackingPaused) }()
        case 29: try { try decoder.decodeSingularMessageField(value: &_storage._compatibility2SelectionPath) }()
        case 30: try { try decoder.decodeSingularStringField(value: &_storage._filteredAuthorName) }()
        case 31: try { try decoder.decodeSingularEnumField(value: &_storage._viewScaleModeIos) }()
        case 32: try { try decoder.decodeSingularMessageField(value: &_storage._filteredAuthor) }()
        case 33: try { try decoder.decodeSingularEnumField(value: &_storage._pageViewState) }()
        case 34: try { try decoder.decodeSingularBoolField(value: &_storage._pencilAnnotationsHidden) }()
        case 35: try { try decoder.decodeSingularMessageField(value: &_storage._freehandDrawingToolkitState) }()
        case 36: try { try decoder.decodeSingularFloatField(value: &_storage._presentationAutoScrollSpeed) }()
        case 37: try { try decoder.decodeSingularMessageField(value: &_storage._selectionPathTransformer) }()
        case 38: try { try decoder.decodeSingularBoolField(value: &_storage._showsTocNavigator) }()
        case 39: try { try decoder.decodeSingularBoolField(value: &_storage._showUserDefinedPageTemplateGuides) }()
        case 40: try { try decoder.decodeSingularBoolField(value: &_storage._editingDisabled) }()
        case 41: try { try decoder.decodeSingularMessageField(value: &_storage._pencilAnnotationUiState) }()
        case 42: try { try decoder.decodeSingularBoolField(value: &_storage._showsFlowMode) }()
        case 43: try { try decoder.decodeSingularMessageField(value: &_storage._mailMergeSettings) }()
        case 44: try { try decoder.decodeSingularBoolField(value: &_storage._showsActivityStream) }()
        case 45: try { try decoder.decodeSingularFloatField(value: &_storage._tocOrPageNavWidth) }()
        case 46: try { try decoder.decodeSingularFloatField(value: &_storage._activityOrAnnotationWidth) }()
        case 47: try { try decoder.decodeSingularMessageField(value: &_storage._selectionPath) }()
        case 48: try { try decoder.decodeSingularFloatField(value: &_storage._flowModeFontScale) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._obsoleteViewScale {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._visibleRectOrigin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._obsoleteLandscape {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._selection {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._selectionModel {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._sectionTemplateDrawablesSelectable {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._visibleRectSize {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      if !_storage._chartUiState.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._chartUiState, fieldNumber: 8)
      }
      try { if let v = _storage._rulerVisible {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._layoutBordersVisible {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._wordCountHudVisible {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._showsComments {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._showsPageNavigator {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._viewScaleMode {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._viewScale {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._windowFrameOrigin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._windowFrameSize {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._selectedInspectorSwitchSegmentIdentifier {
        try visitor.visitSingularStringField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._inspectorHidden {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._wordCountHudType {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._wordCountHudXPosition {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._wordCountHudYPosition {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 22)
      } }()
      try { if let v = _storage._showUserDefinedGuides {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 23)
      } }()
      try { if let v = _storage._shouldShowCommentSidebar {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 24)
      } }()
      try { if let v = _storage._compatibilitySelectionPath {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 25)
      } }()
      try { if let v = _storage._showsCtmarkup {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 26)
      } }()
      try { if let v = _storage._showsCtdeletions {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 27)
      } }()
      try { if let v = _storage._changeTrackingPaused {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 28)
      } }()
      try { if let v = _storage._compatibility2SelectionPath {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 29)
      } }()
      try { if let v = _storage._filteredAuthorName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 30)
      } }()
      try { if let v = _storage._viewScaleModeIos {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 31)
      } }()
      try { if let v = _storage._filteredAuthor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 32)
      } }()
      try { if let v = _storage._pageViewState {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 33)
      } }()
      try { if let v = _storage._pencilAnnotationsHidden {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 34)
      } }()
      try { if let v = _storage._freehandDrawingToolkitState {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 35)
      } }()
      try { if let v = _storage._presentationAutoScrollSpeed {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 36)
      } }()
      try { if let v = _storage._selectionPathTransformer {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 37)
      } }()
      try { if let v = _storage._showsTocNavigator {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 38)
      } }()
      try { if let v = _storage._showUserDefinedPageTemplateGuides {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 39)
      } }()
      try { if let v = _storage._editingDisabled {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 40)
      } }()
      try { if let v = _storage._pencilAnnotationUiState {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 41)
      } }()
      try { if let v = _storage._showsFlowMode {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 42)
      } }()
      try { if let v = _storage._mailMergeSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 43)
      } }()
      try { if let v = _storage._showsActivityStream {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 44)
      } }()
      try { if let v = _storage._tocOrPageNavWidth {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 45)
      } }()
      try { if let v = _storage._activityOrAnnotationWidth {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 46)
      } }()
      try { if let v = _storage._selectionPath {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 47)
      } }()
      try { if let v = _storage._flowModeFontScale {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 48)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TP_UIStateArchive, rhs: TP_UIStateArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._obsoleteViewScale != rhs_storage._obsoleteViewScale {return false}
        if _storage._visibleRectOrigin != rhs_storage._visibleRectOrigin {return false}
        if _storage._obsoleteLandscape != rhs_storage._obsoleteLandscape {return false}
        if _storage._selection != rhs_storage._selection {return false}
        if _storage._selectionModel != rhs_storage._selectionModel {return false}
        if _storage._sectionTemplateDrawablesSelectable != rhs_storage._sectionTemplateDrawablesSelectable {return false}
        if _storage._visibleRectSize != rhs_storage._visibleRectSize {return false}
        if _storage._chartUiState != rhs_storage._chartUiState {return false}
        if _storage._rulerVisible != rhs_storage._rulerVisible {return false}
        if _storage._layoutBordersVisible != rhs_storage._layoutBordersVisible {return false}
        if _storage._wordCountHudVisible != rhs_storage._wordCountHudVisible {return false}
        if _storage._showsComments != rhs_storage._showsComments {return false}
        if _storage._showsPageNavigator != rhs_storage._showsPageNavigator {return false}
        if _storage._viewScaleMode != rhs_storage._viewScaleMode {return false}
        if _storage._viewScale != rhs_storage._viewScale {return false}
        if _storage._windowFrameOrigin != rhs_storage._windowFrameOrigin {return false}
        if _storage._windowFrameSize != rhs_storage._windowFrameSize {return false}
        if _storage._selectedInspectorSwitchSegmentIdentifier != rhs_storage._selectedInspectorSwitchSegmentIdentifier {return false}
        if _storage._inspectorHidden != rhs_storage._inspectorHidden {return false}
        if _storage._wordCountHudType != rhs_storage._wordCountHudType {return false}
        if _storage._wordCountHudXPosition != rhs_storage._wordCountHudXPosition {return false}
        if _storage._wordCountHudYPosition != rhs_storage._wordCountHudYPosition {return false}
        if _storage._showUserDefinedGuides != rhs_storage._showUserDefinedGuides {return false}
        if _storage._shouldShowCommentSidebar != rhs_storage._shouldShowCommentSidebar {return false}
        if _storage._compatibilitySelectionPath != rhs_storage._compatibilitySelectionPath {return false}
        if _storage._showsCtmarkup != rhs_storage._showsCtmarkup {return false}
        if _storage._showsCtdeletions != rhs_storage._showsCtdeletions {return false}
        if _storage._changeTrackingPaused != rhs_storage._changeTrackingPaused {return false}
        if _storage._compatibility2SelectionPath != rhs_storage._compatibility2SelectionPath {return false}
        if _storage._filteredAuthorName != rhs_storage._filteredAuthorName {return false}
        if _storage._viewScaleModeIos != rhs_storage._viewScaleModeIos {return false}
        if _storage._filteredAuthor != rhs_storage._filteredAuthor {return false}
        if _storage._pageViewState != rhs_storage._pageViewState {return false}
        if _storage._pencilAnnotationsHidden != rhs_storage._pencilAnnotationsHidden {return false}
        if _storage._freehandDrawingToolkitState != rhs_storage._freehandDrawingToolkitState {return false}
        if _storage._presentationAutoScrollSpeed != rhs_storage._presentationAutoScrollSpeed {return false}
        if _storage._selectionPathTransformer != rhs_storage._selectionPathTransformer {return false}
        if _storage._showsTocNavigator != rhs_storage._showsTocNavigator {return false}
        if _storage._showUserDefinedPageTemplateGuides != rhs_storage._showUserDefinedPageTemplateGuides {return false}
        if _storage._editingDisabled != rhs_storage._editingDisabled {return false}
        if _storage._pencilAnnotationUiState != rhs_storage._pencilAnnotationUiState {return false}
        if _storage._showsFlowMode != rhs_storage._showsFlowMode {return false}
        if _storage._mailMergeSettings != rhs_storage._mailMergeSettings {return false}
        if _storage._showsActivityStream != rhs_storage._showsActivityStream {return false}
        if _storage._tocOrPageNavWidth != rhs_storage._tocOrPageNavWidth {return false}
        if _storage._activityOrAnnotationWidth != rhs_storage._activityOrAnnotationWidth {return false}
        if _storage._selectionPath != rhs_storage._selectionPath {return false}
        if _storage._flowModeFontScale != rhs_storage._flowModeFontScale {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TP_ViewStateRootArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ViewStateRootArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}layout_state\0\u{3}view_state\0")

  public var isInitialized: Bool {
    if let v = self._layoutState, !v.isInitialized {return false}
    if let v = self._viewState, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._layoutState) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._viewState) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._layoutState {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._viewState {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TP_ViewStateRootArchive, rhs: TP_ViewStateRootArchive) -> Bool {
    if lhs._layoutState != rhs._layoutState {return false}
    if lhs._viewState != rhs._viewState {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TP_UserDefinedGuideMapArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserDefinedGuideMapArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}user_defined_guide_storages\0")

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.userDefinedGuideStorages) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.userDefinedGuideStorages) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.userDefinedGuideStorages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.userDefinedGuideStorages, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TP_UserDefinedGuideMapArchive, rhs: TP_UserDefinedGuideMapArchive) -> Bool {
    if lhs.userDefinedGuideStorages != rhs.userDefinedGuideStorages {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TP_UserDefinedGuideMapArchive.UserDefinedGuide: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = TP_UserDefinedGuideMapArchive.protoMessageName + ".UserDefinedGuide"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}page_index\0\u{3}guide_storage\0")

  public var isInitialized: Bool {
    if self._pageIndex == nil {return false}
    if self._guideStorage == nil {return false}
    if let v = self._guideStorage, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._pageIndex) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._guideStorage) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._pageIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._guideStorage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TP_UserDefinedGuideMapArchive.UserDefinedGuide, rhs: TP_UserDefinedGuideMapArchive.UserDefinedGuide) -> Bool {
    if lhs._pageIndex != rhs._pageIndex {return false}
    if lhs._guideStorage != rhs._guideStorage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TP_SectionSelectionArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SectionSelectionArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}sections\0")

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.sections) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.sections) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sections.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sections, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TP_SectionSelectionArchive, rhs: TP_SectionSelectionArchive) -> Bool {
    if lhs.sections != rhs.sections {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TP_SectionSelectionTransformerArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SectionSelectionTransformerArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}original_selection\0\u{3}storage_uuid_path\0\u{3}section_uuid_paths\0")

  public var isInitialized: Bool {
    if let v = self._originalSelection, !v.isInitialized {return false}
    if let v = self._storageUuidPath, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.sectionUuidPaths) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._originalSelection) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._storageUuidPath) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.sectionUuidPaths) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._originalSelection {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._storageUuidPath {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.sectionUuidPaths.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sectionUuidPaths, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TP_SectionSelectionTransformerArchive, rhs: TP_SectionSelectionTransformerArchive) -> Bool {
    if lhs._originalSelection != rhs._originalSelection {return false}
    if lhs._storageUuidPath != rhs._storageUuidPath {return false}
    if lhs.sectionUuidPaths != rhs.sectionUuidPaths {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TP_SectionPasteboardObjectArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SectionPasteboardObjectArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}text_storage\0\u{3}page_count\0\u{3}page_drawables\0\u{3}ordered_drawables\0")

  public var isInitialized: Bool {
    if self._textStorage == nil {return false}
    if self._pageCount == nil {return false}
    if let v = self._textStorage, !v.isInitialized {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.pageDrawables) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.orderedDrawables) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._textStorage) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._pageCount) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.pageDrawables) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.orderedDrawables) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._textStorage {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._pageCount {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    if !self.pageDrawables.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pageDrawables, fieldNumber: 3)
    }
    if !self.orderedDrawables.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.orderedDrawables, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TP_SectionPasteboardObjectArchive, rhs: TP_SectionPasteboardObjectArchive) -> Bool {
    if lhs._textStorage != rhs._textStorage {return false}
    if lhs._pageCount != rhs._pageCount {return false}
    if lhs.pageDrawables != rhs.pageDrawables {return false}
    if lhs.orderedDrawables != rhs.orderedDrawables {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TP_SectionPasteboardObjectArchive.PageDrawables: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = TP_SectionPasteboardObjectArchive.protoMessageName + ".PageDrawables"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}page_index\0\u{3}drawable_tag_pairs\0")

  public var isInitialized: Bool {
    if self._pageIndex == nil {return false}
    if self._drawableTagPairs == nil {return false}
    if let v = self._drawableTagPairs, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._pageIndex) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._drawableTagPairs) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._pageIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._drawableTagPairs {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TP_SectionPasteboardObjectArchive.PageDrawables, rhs: TP_SectionPasteboardObjectArchive.PageDrawables) -> Bool {
    if lhs._pageIndex != rhs._pageIndex {return false}
    if lhs._drawableTagPairs != rhs._drawableTagPairs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TP_SectionsAppNativeObjectArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SectionsAppNativeObjectArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}section_pasteboard_objects\0\u{3}page_templates\0\u{1}flows\0")

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.sectionPasteboardObjects) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.pageTemplates) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.flows) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.sectionPasteboardObjects) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.pageTemplates) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.flows) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sectionPasteboardObjects.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sectionPasteboardObjects, fieldNumber: 1)
    }
    if !self.pageTemplates.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pageTemplates, fieldNumber: 2)
    }
    if !self.flows.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.flows, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TP_SectionsAppNativeObjectArchive, rhs: TP_SectionsAppNativeObjectArchive) -> Bool {
    if lhs.sectionPasteboardObjects != rhs.sectionPasteboardObjects {return false}
    if lhs.pageTemplates != rhs.pageTemplates {return false}
    if lhs.flows != rhs.flows {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TP_SectionsAppNativeObjectArchive.PageTemplatesEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = TP_SectionsAppNativeObjectArchive.protoMessageName + ".PageTemplatesEntry"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}key\0\u{1}value\0")

  public var isInitialized: Bool {
    if self._key == nil {return false}
    if self._value == nil {return false}
    if let v = self._key, !v.isInitialized {return false}
    if let v = self._value, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._key) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._key {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TP_SectionsAppNativeObjectArchive.PageTemplatesEntry, rhs: TP_SectionsAppNativeObjectArchive.PageTemplatesEntry) -> Bool {
    if lhs._key != rhs._key {return false}
    if lhs._value != rhs._value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TP_MailMergeSettingsArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MailMergeSettingsArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}substitute_closest\0\u{3}data_has_header_row\0\u{3}current_data_source\0\u{3}contacts_group_identifier\0\u{3}numbers_document_url\0\u{3}numbers_table_uuid\0\u{3}numbers_bookmark_data\0\u{3}numbers_data_source\0\u{3}merging_numbers_data_source\0\u{3}contacts_fields_map\0\u{3}numbers_fields_map\0")

  fileprivate class _StorageClass {
    var _substituteClosest: Bool? = nil
    var _dataHasHeaderRow: Bool? = nil
    var _currentDataSource: TP_MailMergeSettingsArchive.CurrentDataSource? = nil
    var _contactsGroupIdentifier: String? = nil
    var _numbersDocumentURL: String? = nil
    var _numbersTableUuid: TSP_UUID? = nil
    var _numbersBookmarkData: Data? = nil
    var _numbersDataSource: TP_MailMergeSettingsArchive.NumbersDataSourceArchive? = nil
    var _mergingNumbersDataSource: TP_MailMergeSettingsArchive.NumbersDataSourceArchive? = nil
    var _contactsFieldsMap: [TP_MailMergeSettingsArchive.ContactsFieldsMapEntry] = []
    var _numbersFieldsMap: [TP_MailMergeSettingsArchive.NumbersFieldsMapEntry] = []

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _substituteClosest = source._substituteClosest
      _dataHasHeaderRow = source._dataHasHeaderRow
      _currentDataSource = source._currentDataSource
      _contactsGroupIdentifier = source._contactsGroupIdentifier
      _numbersDocumentURL = source._numbersDocumentURL
      _numbersTableUuid = source._numbersTableUuid
      _numbersBookmarkData = source._numbersBookmarkData
      _numbersDataSource = source._numbersDataSource
      _mergingNumbersDataSource = source._mergingNumbersDataSource
      _contactsFieldsMap = source._contactsFieldsMap
      _numbersFieldsMap = source._numbersFieldsMap
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._numbersTableUuid, !v.isInitialized {return false}
      if let v = _storage._numbersDataSource, !v.isInitialized {return false}
      if let v = _storage._mergingNumbersDataSource, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularBoolField(value: &_storage._substituteClosest) }()
        case 2: try { try decoder.decodeSingularBoolField(value: &_storage._dataHasHeaderRow) }()
        case 3: try { try decoder.decodeSingularEnumField(value: &_storage._currentDataSource) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._contactsGroupIdentifier) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._numbersDocumentURL) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._numbersTableUuid) }()
        case 7: try { try decoder.decodeSingularBytesField(value: &_storage._numbersBookmarkData) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._numbersDataSource) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._mergingNumbersDataSource) }()
        case 10: try { try decoder.decodeRepeatedMessageField(value: &_storage._contactsFieldsMap) }()
        case 11: try { try decoder.decodeRepeatedMessageField(value: &_storage._numbersFieldsMap) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._substituteClosest {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._dataHasHeaderRow {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._currentDataSource {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._contactsGroupIdentifier {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._numbersDocumentURL {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._numbersTableUuid {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._numbersBookmarkData {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._numbersDataSource {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._mergingNumbersDataSource {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      if !_storage._contactsFieldsMap.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._contactsFieldsMap, fieldNumber: 10)
      }
      if !_storage._numbersFieldsMap.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._numbersFieldsMap, fieldNumber: 11)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TP_MailMergeSettingsArchive, rhs: TP_MailMergeSettingsArchive) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._substituteClosest != rhs_storage._substituteClosest {return false}
        if _storage._dataHasHeaderRow != rhs_storage._dataHasHeaderRow {return false}
        if _storage._currentDataSource != rhs_storage._currentDataSource {return false}
        if _storage._contactsGroupIdentifier != rhs_storage._contactsGroupIdentifier {return false}
        if _storage._numbersDocumentURL != rhs_storage._numbersDocumentURL {return false}
        if _storage._numbersTableUuid != rhs_storage._numbersTableUuid {return false}
        if _storage._numbersBookmarkData != rhs_storage._numbersBookmarkData {return false}
        if _storage._numbersDataSource != rhs_storage._numbersDataSource {return false}
        if _storage._mergingNumbersDataSource != rhs_storage._mergingNumbersDataSource {return false}
        if _storage._contactsFieldsMap != rhs_storage._contactsFieldsMap {return false}
        if _storage._numbersFieldsMap != rhs_storage._numbersFieldsMap {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TP_MailMergeSettingsArchive.CurrentDataSource: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0kContactsDataSource\0\u{1}kNumbersDataSource\0")
}

extension TP_MailMergeSettingsArchive.NumbersDataSourceArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = TP_MailMergeSettingsArchive.protoMessageName + ".NumbersDataSourceArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}bookmark_data\0\u{3}table_uuid\0\u{3}merge_field_types\0\u{3}document_uuid\0")

  public var isInitialized: Bool {
    if let v = self._tableUuid, !v.isInitialized {return false}
    if let v = self._documentUuid, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self._bookmarkData) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._tableUuid) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.mergeFieldTypes) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._documentUuid) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._bookmarkData {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._tableUuid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.mergeFieldTypes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.mergeFieldTypes, fieldNumber: 3)
    }
    try { if let v = self._documentUuid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TP_MailMergeSettingsArchive.NumbersDataSourceArchive, rhs: TP_MailMergeSettingsArchive.NumbersDataSourceArchive) -> Bool {
    if lhs._bookmarkData != rhs._bookmarkData {return false}
    if lhs._tableUuid != rhs._tableUuid {return false}
    if lhs._documentUuid != rhs._documentUuid {return false}
    if lhs.mergeFieldTypes != rhs.mergeFieldTypes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TP_MailMergeSettingsArchive.ContactsFieldsMapEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = TP_MailMergeSettingsArchive.protoMessageName + ".ContactsFieldsMapEntry"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}key\0\u{1}value\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._key) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._key {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TP_MailMergeSettingsArchive.ContactsFieldsMapEntry, rhs: TP_MailMergeSettingsArchive.ContactsFieldsMapEntry) -> Bool {
    if lhs._key != rhs._key {return false}
    if lhs._value != rhs._value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TP_MailMergeSettingsArchive.NumbersFieldsMapEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = TP_MailMergeSettingsArchive.protoMessageName + ".NumbersFieldsMapEntry"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}key\0\u{1}value\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._key) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._key {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._value {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TP_MailMergeSettingsArchive.NumbersFieldsMapEntry, rhs: TP_MailMergeSettingsArchive.NumbersFieldsMapEntry) -> Bool {
    if lhs._key != rhs._key {return false}
    if lhs._value != rhs._value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
